
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004158  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  00004158  000041ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080013a  0080013a  000042c6  2**0
                  ALLOC
  3 .stab         00003660  00000000  00000000  000042c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014cb  00000000  00000000  00007928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000090e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b127  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d1ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000de7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__vector_7>
      20:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__vector_8>
      24:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e5       	ldi	r30, 0x58	; 88
     162:	f1 e4       	ldi	r31, 0x41	; 65
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	aa 33       	cpi	r26, 0x3A	; 58
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	aa e3       	ldi	r26, 0x3A	; 58
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a9 34       	cpi	r26, 0x49	; 73
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <main>
     184:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a5 e2       	ldi	r26, 0x25	; 37
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	85 e2       	ldi	r24, 0x25	; 37
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	65 e2       	ldi	r22, 0x25	; 37
     796:	71 e0       	ldi	r23, 0x01	; 1
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 f7 1d 	jmp	0x3bee	; 0x3bee <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__epilogue_restores__+0x20>

00000a4c <__pack_f>:
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	fc 01       	movw	r30, r24
     a58:	e4 80       	ldd	r14, Z+4	; 0x04
     a5a:	f5 80       	ldd	r15, Z+5	; 0x05
     a5c:	06 81       	ldd	r16, Z+6	; 0x06
     a5e:	17 81       	ldd	r17, Z+7	; 0x07
     a60:	d1 80       	ldd	r13, Z+1	; 0x01
     a62:	80 81       	ld	r24, Z
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	48 f4       	brcc	.+18     	; 0xa7a <__pack_f+0x2e>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e1       	ldi	r26, 0x10	; 16
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e8 2a       	or	r14, r24
     a72:	f9 2a       	or	r15, r25
     a74:	0a 2b       	or	r16, r26
     a76:	1b 2b       	or	r17, r27
     a78:	a5 c0       	rjmp	.+330    	; 0xbc4 <__pack_f+0x178>
     a7a:	84 30       	cpi	r24, 0x04	; 4
     a7c:	09 f4       	brne	.+2      	; 0xa80 <__pack_f+0x34>
     a7e:	9f c0       	rjmp	.+318    	; 0xbbe <__pack_f+0x172>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	21 f4       	brne	.+8      	; 0xa8c <__pack_f+0x40>
     a84:	ee 24       	eor	r14, r14
     a86:	ff 24       	eor	r15, r15
     a88:	87 01       	movw	r16, r14
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__pack_f+0x4a>
     a8c:	e1 14       	cp	r14, r1
     a8e:	f1 04       	cpc	r15, r1
     a90:	01 05       	cpc	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	19 f4       	brne	.+6      	; 0xa9c <__pack_f+0x50>
     a96:	e0 e0       	ldi	r30, 0x00	; 0
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	96 c0       	rjmp	.+300    	; 0xbc8 <__pack_f+0x17c>
     a9c:	62 81       	ldd	r22, Z+2	; 0x02
     a9e:	73 81       	ldd	r23, Z+3	; 0x03
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	62 38       	cpi	r22, 0x82	; 130
     aa4:	79 07       	cpc	r23, r25
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <__pack_f+0x5e>
     aa8:	5b c0       	rjmp	.+182    	; 0xb60 <__pack_f+0x114>
     aaa:	22 e8       	ldi	r18, 0x82	; 130
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	26 1b       	sub	r18, r22
     ab0:	37 0b       	sbc	r19, r23
     ab2:	2a 31       	cpi	r18, 0x1A	; 26
     ab4:	31 05       	cpc	r19, r1
     ab6:	2c f0       	brlt	.+10     	; 0xac2 <__pack_f+0x76>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	2a c0       	rjmp	.+84     	; 0xb16 <__pack_f+0xca>
     ac2:	b8 01       	movw	r22, r16
     ac4:	a7 01       	movw	r20, r14
     ac6:	02 2e       	mov	r0, r18
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__pack_f+0x86>
     aca:	76 95       	lsr	r23
     acc:	67 95       	ror	r22
     ace:	57 95       	ror	r21
     ad0:	47 95       	ror	r20
     ad2:	0a 94       	dec	r0
     ad4:	d2 f7       	brpl	.-12     	; 0xaca <__pack_f+0x7e>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <__pack_f+0x9c>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	2a 95       	dec	r18
     aea:	d2 f7       	brpl	.-12     	; 0xae0 <__pack_f+0x94>
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	a1 09       	sbc	r26, r1
     af0:	b1 09       	sbc	r27, r1
     af2:	8e 21       	and	r24, r14
     af4:	9f 21       	and	r25, r15
     af6:	a0 23       	and	r26, r16
     af8:	b1 23       	and	r27, r17
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	21 f0       	breq	.+8      	; 0xb0a <__pack_f+0xbe>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	9a 01       	movw	r18, r20
     b0c:	ab 01       	movw	r20, r22
     b0e:	28 2b       	or	r18, r24
     b10:	39 2b       	or	r19, r25
     b12:	4a 2b       	or	r20, r26
     b14:	5b 2b       	or	r21, r27
     b16:	da 01       	movw	r26, r20
     b18:	c9 01       	movw	r24, r18
     b1a:	8f 77       	andi	r24, 0x7F	; 127
     b1c:	90 70       	andi	r25, 0x00	; 0
     b1e:	a0 70       	andi	r26, 0x00	; 0
     b20:	b0 70       	andi	r27, 0x00	; 0
     b22:	80 34       	cpi	r24, 0x40	; 64
     b24:	91 05       	cpc	r25, r1
     b26:	a1 05       	cpc	r26, r1
     b28:	b1 05       	cpc	r27, r1
     b2a:	39 f4       	brne	.+14     	; 0xb3a <__pack_f+0xee>
     b2c:	27 ff       	sbrs	r18, 7
     b2e:	09 c0       	rjmp	.+18     	; 0xb42 <__pack_f+0xf6>
     b30:	20 5c       	subi	r18, 0xC0	; 192
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	4f 4f       	sbci	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0xf6>
     b3a:	21 5c       	subi	r18, 0xC1	; 193
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	4f 4f       	sbci	r20, 0xFF	; 255
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	20 30       	cpi	r18, 0x00	; 0
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	3a 07       	cpc	r19, r26
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	4a 07       	cpc	r20, r26
     b50:	a0 e4       	ldi	r26, 0x40	; 64
     b52:	5a 07       	cpc	r21, r26
     b54:	10 f0       	brcs	.+4      	; 0xb5a <__pack_f+0x10e>
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	79 01       	movw	r14, r18
     b5c:	8a 01       	movw	r16, r20
     b5e:	27 c0       	rjmp	.+78     	; 0xbae <__pack_f+0x162>
     b60:	60 38       	cpi	r22, 0x80	; 128
     b62:	71 05       	cpc	r23, r1
     b64:	64 f5       	brge	.+88     	; 0xbbe <__pack_f+0x172>
     b66:	fb 01       	movw	r30, r22
     b68:	e1 58       	subi	r30, 0x81	; 129
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	d8 01       	movw	r26, r16
     b6e:	c7 01       	movw	r24, r14
     b70:	8f 77       	andi	r24, 0x7F	; 127
     b72:	90 70       	andi	r25, 0x00	; 0
     b74:	a0 70       	andi	r26, 0x00	; 0
     b76:	b0 70       	andi	r27, 0x00	; 0
     b78:	80 34       	cpi	r24, 0x40	; 64
     b7a:	91 05       	cpc	r25, r1
     b7c:	a1 05       	cpc	r26, r1
     b7e:	b1 05       	cpc	r27, r1
     b80:	39 f4       	brne	.+14     	; 0xb90 <__pack_f+0x144>
     b82:	e7 fe       	sbrs	r14, 7
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <__pack_f+0x154>
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x14c>
     b90:	8f e3       	ldi	r24, 0x3F	; 63
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e8 0e       	add	r14, r24
     b9a:	f9 1e       	adc	r15, r25
     b9c:	0a 1f       	adc	r16, r26
     b9e:	1b 1f       	adc	r17, r27
     ba0:	17 ff       	sbrs	r17, 7
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <__pack_f+0x162>
     ba4:	16 95       	lsr	r17
     ba6:	07 95       	ror	r16
     ba8:	f7 94       	ror	r15
     baa:	e7 94       	ror	r14
     bac:	31 96       	adiw	r30, 0x01	; 1
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	16 95       	lsr	r17
     bb2:	07 95       	ror	r16
     bb4:	f7 94       	ror	r15
     bb6:	e7 94       	ror	r14
     bb8:	8a 95       	dec	r24
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__pack_f+0x164>
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__pack_f+0x17c>
     bbe:	ee 24       	eor	r14, r14
     bc0:	ff 24       	eor	r15, r15
     bc2:	87 01       	movw	r16, r14
     bc4:	ef ef       	ldi	r30, 0xFF	; 255
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	6e 2f       	mov	r22, r30
     bca:	67 95       	ror	r22
     bcc:	66 27       	eor	r22, r22
     bce:	67 95       	ror	r22
     bd0:	90 2f       	mov	r25, r16
     bd2:	9f 77       	andi	r25, 0x7F	; 127
     bd4:	d7 94       	ror	r13
     bd6:	dd 24       	eor	r13, r13
     bd8:	d7 94       	ror	r13
     bda:	8e 2f       	mov	r24, r30
     bdc:	86 95       	lsr	r24
     bde:	49 2f       	mov	r20, r25
     be0:	46 2b       	or	r20, r22
     be2:	58 2f       	mov	r21, r24
     be4:	5d 29       	or	r21, r13
     be6:	b7 01       	movw	r22, r14
     be8:	ca 01       	movw	r24, r20
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	08 95       	ret

00000bf6 <__unpack_f>:
     bf6:	fc 01       	movw	r30, r24
     bf8:	db 01       	movw	r26, r22
     bfa:	40 81       	ld	r20, Z
     bfc:	51 81       	ldd	r21, Z+1	; 0x01
     bfe:	22 81       	ldd	r18, Z+2	; 0x02
     c00:	62 2f       	mov	r22, r18
     c02:	6f 77       	andi	r22, 0x7F	; 127
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	22 1f       	adc	r18, r18
     c08:	22 27       	eor	r18, r18
     c0a:	22 1f       	adc	r18, r18
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	89 2f       	mov	r24, r25
     c10:	88 0f       	add	r24, r24
     c12:	82 2b       	or	r24, r18
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	99 1f       	adc	r25, r25
     c1a:	99 27       	eor	r25, r25
     c1c:	99 1f       	adc	r25, r25
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	9c 93       	st	X, r25
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	a9 f5       	brne	.+106    	; 0xc94 <__unpack_f+0x9e>
     c2a:	41 15       	cp	r20, r1
     c2c:	51 05       	cpc	r21, r1
     c2e:	61 05       	cpc	r22, r1
     c30:	71 05       	cpc	r23, r1
     c32:	11 f4       	brne	.+4      	; 0xc38 <__unpack_f+0x42>
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	37 c0       	rjmp	.+110    	; 0xca6 <__unpack_f+0xb0>
     c38:	82 e8       	ldi	r24, 0x82	; 130
     c3a:	9f ef       	ldi	r25, 0xFF	; 255
     c3c:	13 96       	adiw	r26, 0x03	; 3
     c3e:	9c 93       	st	X, r25
     c40:	8e 93       	st	-X, r24
     c42:	12 97       	sbiw	r26, 0x02	; 2
     c44:	9a 01       	movw	r18, r20
     c46:	ab 01       	movw	r20, r22
     c48:	67 e0       	ldi	r22, 0x07	; 7
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	44 1f       	adc	r20, r20
     c50:	55 1f       	adc	r21, r21
     c52:	6a 95       	dec	r22
     c54:	d1 f7       	brne	.-12     	; 0xc4a <__unpack_f+0x54>
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	8c 93       	st	X, r24
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <__unpack_f+0x80>
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	44 1f       	adc	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	12 96       	adiw	r26, 0x02	; 2
     c66:	8d 91       	ld	r24, X+
     c68:	9c 91       	ld	r25, X
     c6a:	13 97       	sbiw	r26, 0x03	; 3
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	13 96       	adiw	r26, 0x03	; 3
     c70:	9c 93       	st	X, r25
     c72:	8e 93       	st	-X, r24
     c74:	12 97       	sbiw	r26, 0x02	; 2
     c76:	20 30       	cpi	r18, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	38 07       	cpc	r19, r24
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	48 07       	cpc	r20, r24
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	58 07       	cpc	r21, r24
     c84:	58 f3       	brcs	.-42     	; 0xc5c <__unpack_f+0x66>
     c86:	14 96       	adiw	r26, 0x04	; 4
     c88:	2d 93       	st	X+, r18
     c8a:	3d 93       	st	X+, r19
     c8c:	4d 93       	st	X+, r20
     c8e:	5c 93       	st	X, r21
     c90:	17 97       	sbiw	r26, 0x07	; 7
     c92:	08 95       	ret
     c94:	2f 3f       	cpi	r18, 0xFF	; 255
     c96:	31 05       	cpc	r19, r1
     c98:	79 f4       	brne	.+30     	; 0xcb8 <__unpack_f+0xc2>
     c9a:	41 15       	cp	r20, r1
     c9c:	51 05       	cpc	r21, r1
     c9e:	61 05       	cpc	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	19 f4       	brne	.+6      	; 0xcaa <__unpack_f+0xb4>
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	8c 93       	st	X, r24
     ca8:	08 95       	ret
     caa:	64 ff       	sbrs	r22, 4
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <__unpack_f+0xbe>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
     cb2:	12 c0       	rjmp	.+36     	; 0xcd8 <__unpack_f+0xe2>
     cb4:	1c 92       	st	X, r1
     cb6:	10 c0       	rjmp	.+32     	; 0xcd8 <__unpack_f+0xe2>
     cb8:	2f 57       	subi	r18, 0x7F	; 127
     cba:	30 40       	sbci	r19, 0x00	; 0
     cbc:	13 96       	adiw	r26, 0x03	; 3
     cbe:	3c 93       	st	X, r19
     cc0:	2e 93       	st	-X, r18
     cc2:	12 97       	sbiw	r26, 0x02	; 2
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	8c 93       	st	X, r24
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	44 0f       	add	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	8a 95       	dec	r24
     cd4:	d1 f7       	brne	.-12     	; 0xcca <__unpack_f+0xd4>
     cd6:	70 64       	ori	r23, 0x40	; 64
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	4d 93       	st	X+, r20
     cdc:	5d 93       	st	X+, r21
     cde:	6d 93       	st	X+, r22
     ce0:	7c 93       	st	X, r23
     ce2:	17 97       	sbiw	r26, 0x07	; 7
     ce4:	08 95       	ret

00000ce6 <__fpcmp_parts_f>:
     ce6:	1f 93       	push	r17
     ce8:	dc 01       	movw	r26, r24
     cea:	fb 01       	movw	r30, r22
     cec:	9c 91       	ld	r25, X
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <__fpcmp_parts_f+0xe>
     cf2:	47 c0       	rjmp	.+142    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cf4:	80 81       	ld	r24, Z
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <__fpcmp_parts_f+0x16>
     cfa:	43 c0       	rjmp	.+134    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cfc:	94 30       	cpi	r25, 0x04	; 4
     cfe:	51 f4       	brne	.+20     	; 0xd14 <__fpcmp_parts_f+0x2e>
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	1c 91       	ld	r17, X
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	99 f5       	brne	.+102    	; 0xd6e <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	68 2f       	mov	r22, r24
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	61 1b       	sub	r22, r17
     d10:	71 09       	sbc	r23, r1
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <__fpcmp_parts_f+0xac>
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	21 f0       	breq	.+8      	; 0xd20 <__fpcmp_parts_f+0x3a>
     d18:	92 30       	cpi	r25, 0x02	; 2
     d1a:	31 f4       	brne	.+12     	; 0xd28 <__fpcmp_parts_f+0x42>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	b9 f1       	breq	.+110    	; 0xd8e <__fpcmp_parts_f+0xa8>
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	88 23       	and	r24, r24
     d24:	89 f1       	breq	.+98     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d26:	2d c0       	rjmp	.+90     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	1c 91       	ld	r17, X
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	f1 f0       	breq	.+60     	; 0xd6e <__fpcmp_parts_f+0x88>
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	18 17       	cp	r17, r24
     d36:	d9 f4       	brne	.+54     	; 0xd6e <__fpcmp_parts_f+0x88>
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	2d 91       	ld	r18, X+
     d3c:	3c 91       	ld	r19, X
     d3e:	13 97       	sbiw	r26, 0x03	; 3
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	94 f0       	brlt	.+36     	; 0xd6e <__fpcmp_parts_f+0x88>
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	bc f0       	brlt	.+46     	; 0xd7e <__fpcmp_parts_f+0x98>
     d50:	14 96       	adiw	r26, 0x04	; 4
     d52:	8d 91       	ld	r24, X+
     d54:	9d 91       	ld	r25, X+
     d56:	0d 90       	ld	r0, X+
     d58:	bc 91       	ld	r27, X
     d5a:	a0 2d       	mov	r26, r0
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
     d5e:	35 81       	ldd	r19, Z+5	; 0x05
     d60:	46 81       	ldd	r20, Z+6	; 0x06
     d62:	57 81       	ldd	r21, Z+7	; 0x07
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	4a 07       	cpc	r20, r26
     d6a:	5b 07       	cpc	r21, r27
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <__fpcmp_parts_f+0x8e>
     d6e:	11 23       	and	r17, r17
     d70:	41 f0       	breq	.+16     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	a4 07       	cpc	r26, r20
     d7a:	b5 07       	cpc	r27, r21
     d7c:	40 f4       	brcc	.+16     	; 0xd8e <__fpcmp_parts_f+0xa8>
     d7e:	11 23       	and	r17, r17
     d80:	19 f0       	breq	.+6      	; 0xd88 <__fpcmp_parts_f+0xa2>
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__fpcmp_parts_f+0xac>
     d88:	6f ef       	ldi	r22, 0xFF	; 255
     d8a:	7f ef       	ldi	r23, 0xFF	; 255
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <__fpcmp_parts_f+0xac>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	cb 01       	movw	r24, r22
     d94:	1f 91       	pop	r17
     d96:	08 95       	ret

00000d98 <timer_delay>:

/*
 * Timer delay function used as a call back function for the timer
 * to be used as a delay in seconds .
 */
void timer_delay(void){
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0; /*static variable to count the number of interrupts which occur every second*/
	count++; /*increment the count every interrupt(second)*/
     da0:	80 91 46 01 	lds	r24, 0x0146
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 46 01 	sts	0x0146, r24

	/*if the count reaches the timercount stop the timer and
	 * reset the count and set the flag*/
	/*flag is then reset manually when using this function*/
	if(count==g_timercount){
     daa:	90 91 46 01 	lds	r25, 0x0146
     dae:	80 91 45 01 	lds	r24, 0x0145
     db2:	98 17       	cp	r25, r24
     db4:	49 f4       	brne	.+18     	; 0xdc8 <timer_delay+0x30>
		Timer1_deInit();
     db6:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <Timer1_deInit>
		count=0;
     dba:	10 92 46 01 	sts	0x0146, r1
		g_timercount=0;
     dbe:	10 92 45 01 	sts	0x0145, r1
		g_timerFlag=1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 44 01 	sts	0x0144, r24
	}

}
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <enter_new_pass>:

/*
 * Function for entering new password that will be called the first time we use the system
 * or when changing the password.
 */
void enter_new_pass(){
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	ab 97       	sbiw	r28, 0x2b	; 43
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
	/*display the msg to enter the password*/
	LCD_clearScreen();
     de6:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
	LCD_displayString("Plz enter pass:  ");
     dea:	80 e6       	ldi	r24, 0x60	; 96
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
	LCD_moveCursor(1,0);
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_moveCursor>
	char i=0;
     dfa:	1b a6       	std	Y+43, r1	; 0x2b
	/*take the password as input from the keypad and store it in the pass array
	 * and display '*' with each keypress*/
	for(i=0;i<PASS_SIZE;i++){
     dfc:	1b a6       	std	Y+43, r1	; 0x2b
     dfe:	81 c0       	rjmp	.+258    	; 0xf02 <enter_new_pass+0x134>
		g_pass[(int)i]=KEYPAD_getPressedKey();
     e00:	8b a5       	ldd	r24, Y+43	; 0x2b
     e02:	08 2f       	mov	r16, r24
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	0e 94 b0 12 	call	0x2560	; 0x2560 <KEYPAD_getPressedKey>
     e0a:	f8 01       	movw	r30, r16
     e0c:	e6 5c       	subi	r30, 0xC6	; 198
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	80 83       	st	Z, r24
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a8 ec       	ldi	r26, 0xC8	; 200
     e18:	b3 e4       	ldi	r27, 0x43	; 67
     e1a:	8f a3       	std	Y+39, r24	; 0x27
     e1c:	98 a7       	std	Y+40, r25	; 0x28
     e1e:	a9 a7       	std	Y+41, r26	; 0x29
     e20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e22:	6f a1       	ldd	r22, Y+39	; 0x27
     e24:	78 a5       	ldd	r23, Y+40	; 0x28
     e26:	89 a5       	ldd	r24, Y+41	; 0x29
     e28:	9a a5       	ldd	r25, Y+42	; 0x2a
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	4a ef       	ldi	r20, 0xFA	; 250
     e30:	54 e4       	ldi	r21, 0x44	; 68
     e32:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	8b a3       	std	Y+35, r24	; 0x23
     e3c:	9c a3       	std	Y+36, r25	; 0x24
     e3e:	ad a3       	std	Y+37, r26	; 0x25
     e40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e42:	6b a1       	ldd	r22, Y+35	; 0x23
     e44:	7c a1       	ldd	r23, Y+36	; 0x24
     e46:	8d a1       	ldd	r24, Y+37	; 0x25
     e48:	9e a1       	ldd	r25, Y+38	; 0x26
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	40 e8       	ldi	r20, 0x80	; 128
     e50:	5f e3       	ldi	r21, 0x3F	; 63
     e52:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
     e56:	88 23       	and	r24, r24
     e58:	2c f4       	brge	.+10     	; 0xe64 <enter_new_pass+0x96>
		__ticks = 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9a a3       	std	Y+34, r25	; 0x22
     e60:	89 a3       	std	Y+33, r24	; 0x21
     e62:	3f c0       	rjmp	.+126    	; 0xee2 <enter_new_pass+0x114>
	else if (__tmp > 65535)
     e64:	6b a1       	ldd	r22, Y+35	; 0x23
     e66:	7c a1       	ldd	r23, Y+36	; 0x24
     e68:	8d a1       	ldd	r24, Y+37	; 0x25
     e6a:	9e a1       	ldd	r25, Y+38	; 0x26
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	3f ef       	ldi	r19, 0xFF	; 255
     e70:	4f e7       	ldi	r20, 0x7F	; 127
     e72:	57 e4       	ldi	r21, 0x47	; 71
     e74:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
     e78:	18 16       	cp	r1, r24
     e7a:	4c f5       	brge	.+82     	; 0xece <enter_new_pass+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e7c:	6f a1       	ldd	r22, Y+39	; 0x27
     e7e:	78 a5       	ldd	r23, Y+40	; 0x28
     e80:	89 a5       	ldd	r24, Y+41	; 0x29
     e82:	9a a5       	ldd	r25, Y+42	; 0x2a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e2       	ldi	r20, 0x20	; 32
     e8a:	51 e4       	ldi	r21, 0x41	; 65
     e8c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	9a a3       	std	Y+34, r25	; 0x22
     ea2:	89 a3       	std	Y+33, r24	; 0x21
     ea4:	0f c0       	rjmp	.+30     	; 0xec4 <enter_new_pass+0xf6>
     ea6:	88 ec       	ldi	r24, 0xC8	; 200
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	98 a3       	std	Y+32, r25	; 0x20
     eac:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eb0:	98 a1       	ldd	r25, Y+32	; 0x20
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <enter_new_pass+0xe4>
     eb6:	98 a3       	std	Y+32, r25	; 0x20
     eb8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eba:	89 a1       	ldd	r24, Y+33	; 0x21
     ebc:	9a a1       	ldd	r25, Y+34	; 0x22
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	9a a3       	std	Y+34, r25	; 0x22
     ec2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec4:	89 a1       	ldd	r24, Y+33	; 0x21
     ec6:	9a a1       	ldd	r25, Y+34	; 0x22
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	69 f7       	brne	.-38     	; 0xea6 <enter_new_pass+0xd8>
     ecc:	14 c0       	rjmp	.+40     	; 0xef6 <enter_new_pass+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ece:	6b a1       	ldd	r22, Y+35	; 0x23
     ed0:	7c a1       	ldd	r23, Y+36	; 0x24
     ed2:	8d a1       	ldd	r24, Y+37	; 0x25
     ed4:	9e a1       	ldd	r25, Y+38	; 0x26
     ed6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9a a3       	std	Y+34, r25	; 0x22
     ee0:	89 a3       	std	Y+33, r24	; 0x21
     ee2:	89 a1       	ldd	r24, Y+33	; 0x21
     ee4:	9a a1       	ldd	r25, Y+34	; 0x22
     ee6:	9e 8f       	std	Y+30, r25	; 0x1e
     ee8:	8d 8f       	std	Y+29, r24	; 0x1d
     eea:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eec:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <enter_new_pass+0x120>
     ef2:	9e 8f       	std	Y+30, r25	; 0x1e
     ef4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(400); /*large delay is for proteus to not enter many characters with each press*/
		LCD_displayChar('*');
     ef6:	8a e2       	ldi	r24, 0x2A	; 42
     ef8:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayChar>
	LCD_displayString("Plz enter pass:  ");
	LCD_moveCursor(1,0);
	char i=0;
	/*take the password as input from the keypad and store it in the pass array
	 * and display '*' with each keypress*/
	for(i=0;i<PASS_SIZE;i++){
     efc:	8b a5       	ldd	r24, Y+43	; 0x2b
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	8b a7       	std	Y+43, r24	; 0x2b
     f02:	8b a5       	ldd	r24, Y+43	; 0x2b
     f04:	85 30       	cpi	r24, 0x05	; 5
     f06:	08 f4       	brcc	.+2      	; 0xf0a <enter_new_pass+0x13c>
     f08:	7b cf       	rjmp	.-266    	; 0xe00 <enter_new_pass+0x32>
		g_pass[(int)i]=KEYPAD_getPressedKey();
		_delay_ms(400); /*large delay is for proteus to not enter many characters with each press*/
		LCD_displayChar('*');
	}
	while(KEYPAD_getPressedKey()!=13); /*wait until the user presses the enter key (green button in proteus keypad)*/
     f0a:	0e 94 b0 12 	call	0x2560	; 0x2560 <KEYPAD_getPressedKey>
     f0e:	8d 30       	cpi	r24, 0x0D	; 13
     f10:	e1 f7       	brne	.-8      	; 0xf0a <enter_new_pass+0x13c>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a8 ec       	ldi	r26, 0xC8	; 200
     f18:	b3 e4       	ldi	r27, 0x43	; 67
     f1a:	89 8f       	std	Y+25, r24	; 0x19
     f1c:	9a 8f       	std	Y+26, r25	; 0x1a
     f1e:	ab 8f       	std	Y+27, r26	; 0x1b
     f20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f22:	69 8d       	ldd	r22, Y+25	; 0x19
     f24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	4a ef       	ldi	r20, 0xFA	; 250
     f30:	54 e4       	ldi	r21, 0x44	; 68
     f32:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	8d 8b       	std	Y+21, r24	; 0x15
     f3c:	9e 8b       	std	Y+22, r25	; 0x16
     f3e:	af 8b       	std	Y+23, r26	; 0x17
     f40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f42:	6d 89       	ldd	r22, Y+21	; 0x15
     f44:	7e 89       	ldd	r23, Y+22	; 0x16
     f46:	8f 89       	ldd	r24, Y+23	; 0x17
     f48:	98 8d       	ldd	r25, Y+24	; 0x18
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e8       	ldi	r20, 0x80	; 128
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
     f56:	88 23       	and	r24, r24
     f58:	2c f4       	brge	.+10     	; 0xf64 <enter_new_pass+0x196>
		__ticks = 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9c 8b       	std	Y+20, r25	; 0x14
     f60:	8b 8b       	std	Y+19, r24	; 0x13
     f62:	3f c0       	rjmp	.+126    	; 0xfe2 <enter_new_pass+0x214>
	else if (__tmp > 65535)
     f64:	6d 89       	ldd	r22, Y+21	; 0x15
     f66:	7e 89       	ldd	r23, Y+22	; 0x16
     f68:	8f 89       	ldd	r24, Y+23	; 0x17
     f6a:	98 8d       	ldd	r25, Y+24	; 0x18
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	3f ef       	ldi	r19, 0xFF	; 255
     f70:	4f e7       	ldi	r20, 0x7F	; 127
     f72:	57 e4       	ldi	r21, 0x47	; 71
     f74:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
     f78:	18 16       	cp	r1, r24
     f7a:	4c f5       	brge	.+82     	; 0xfce <enter_new_pass+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e2       	ldi	r20, 0x20	; 32
     f8a:	51 e4       	ldi	r21, 0x41	; 65
     f8c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	9c 8b       	std	Y+20, r25	; 0x14
     fa2:	8b 8b       	std	Y+19, r24	; 0x13
     fa4:	0f c0       	rjmp	.+30     	; 0xfc4 <enter_new_pass+0x1f6>
     fa6:	88 ec       	ldi	r24, 0xC8	; 200
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9a 8b       	std	Y+18, r25	; 0x12
     fac:	89 8b       	std	Y+17, r24	; 0x11
     fae:	89 89       	ldd	r24, Y+17	; 0x11
     fb0:	9a 89       	ldd	r25, Y+18	; 0x12
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <enter_new_pass+0x1e4>
     fb6:	9a 8b       	std	Y+18, r25	; 0x12
     fb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fba:	8b 89       	ldd	r24, Y+19	; 0x13
     fbc:	9c 89       	ldd	r25, Y+20	; 0x14
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	9c 8b       	std	Y+20, r25	; 0x14
     fc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc4:	8b 89       	ldd	r24, Y+19	; 0x13
     fc6:	9c 89       	ldd	r25, Y+20	; 0x14
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	69 f7       	brne	.-38     	; 0xfa6 <enter_new_pass+0x1d8>
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <enter_new_pass+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fce:	6d 89       	ldd	r22, Y+21	; 0x15
     fd0:	7e 89       	ldd	r23, Y+22	; 0x16
     fd2:	8f 89       	ldd	r24, Y+23	; 0x17
     fd4:	98 8d       	ldd	r25, Y+24	; 0x18
     fd6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	9c 8b       	std	Y+20, r25	; 0x14
     fe0:	8b 8b       	std	Y+19, r24	; 0x13
     fe2:	8b 89       	ldd	r24, Y+19	; 0x13
     fe4:	9c 89       	ldd	r25, Y+20	; 0x14
     fe6:	98 8b       	std	Y+16, r25	; 0x10
     fe8:	8f 87       	std	Y+15, r24	; 0x0f
     fea:	8f 85       	ldd	r24, Y+15	; 0x0f
     fec:	98 89       	ldd	r25, Y+16	; 0x10
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <enter_new_pass+0x220>
     ff2:	98 8b       	std	Y+16, r25	; 0x10
     ff4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);

	/*display the msg to enter the password confirmation*/
	LCD_clearScreen();
     ff6:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
	LCD_displayString("Plz re-enter the");
     ffa:	82 e7       	ldi	r24, 0x72	; 114
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
	LCD_moveCursor(1,0);
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_moveCursor>
	LCD_displayString("same pass: ");
    100a:	83 e8       	ldi	r24, 0x83	; 131
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
	/*do the same process again but this time store the input in Passconfirm array*/
	for(i=0;i<PASS_SIZE;i++){
    1012:	1b a6       	std	Y+43, r1	; 0x2b
    1014:	81 c0       	rjmp	.+258    	; 0x1118 <enter_new_pass+0x34a>
		g_passConfirm[(int)i]=KEYPAD_getPressedKey();
    1016:	8b a5       	ldd	r24, Y+43	; 0x2b
    1018:	08 2f       	mov	r16, r24
    101a:	10 e0       	ldi	r17, 0x00	; 0
    101c:	0e 94 b0 12 	call	0x2560	; 0x2560 <KEYPAD_getPressedKey>
    1020:	f8 01       	movw	r30, r16
    1022:	e1 5c       	subi	r30, 0xC1	; 193
    1024:	fe 4f       	sbci	r31, 0xFE	; 254
    1026:	80 83       	st	Z, r24
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a8 ec       	ldi	r26, 0xC8	; 200
    102e:	b3 e4       	ldi	r27, 0x43	; 67
    1030:	8b 87       	std	Y+11, r24	; 0x0b
    1032:	9c 87       	std	Y+12, r25	; 0x0c
    1034:	ad 87       	std	Y+13, r26	; 0x0d
    1036:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1038:	6b 85       	ldd	r22, Y+11	; 0x0b
    103a:	7c 85       	ldd	r23, Y+12	; 0x0c
    103c:	8d 85       	ldd	r24, Y+13	; 0x0d
    103e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	4a ef       	ldi	r20, 0xFA	; 250
    1046:	54 e4       	ldi	r21, 0x44	; 68
    1048:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	8f 83       	std	Y+7, r24	; 0x07
    1052:	98 87       	std	Y+8, r25	; 0x08
    1054:	a9 87       	std	Y+9, r26	; 0x09
    1056:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1058:	6f 81       	ldd	r22, Y+7	; 0x07
    105a:	78 85       	ldd	r23, Y+8	; 0x08
    105c:	89 85       	ldd	r24, Y+9	; 0x09
    105e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    106c:	88 23       	and	r24, r24
    106e:	2c f4       	brge	.+10     	; 0x107a <enter_new_pass+0x2ac>
		__ticks = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	8d 83       	std	Y+5, r24	; 0x05
    1078:	3f c0       	rjmp	.+126    	; 0x10f8 <enter_new_pass+0x32a>
	else if (__tmp > 65535)
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	4f e7       	ldi	r20, 0x7F	; 127
    1088:	57 e4       	ldi	r21, 0x47	; 71
    108a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    108e:	18 16       	cp	r1, r24
    1090:	4c f5       	brge	.+82     	; 0x10e4 <enter_new_pass+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1092:	6b 85       	ldd	r22, Y+11	; 0x0b
    1094:	7c 85       	ldd	r23, Y+12	; 0x0c
    1096:	8d 85       	ldd	r24, Y+13	; 0x0d
    1098:	9e 85       	ldd	r25, Y+14	; 0x0e
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e2       	ldi	r20, 0x20	; 32
    10a0:	51 e4       	ldi	r21, 0x41	; 65
    10a2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <enter_new_pass+0x30c>
    10bc:	88 ec       	ldi	r24, 0xC8	; 200
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <enter_new_pass+0x2fa>
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	9e 81       	ldd	r25, Y+6	; 0x06
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	9e 83       	std	Y+6, r25	; 0x06
    10d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	69 f7       	brne	.-38     	; 0x10bc <enter_new_pass+0x2ee>
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <enter_new_pass+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <enter_new_pass+0x336>
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		LCD_displayChar('*');
    110c:	8a e2       	ldi	r24, 0x2A	; 42
    110e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayChar>
	LCD_clearScreen();
	LCD_displayString("Plz re-enter the");
	LCD_moveCursor(1,0);
	LCD_displayString("same pass: ");
	/*do the same process again but this time store the input in Passconfirm array*/
	for(i=0;i<PASS_SIZE;i++){
    1112:	8b a5       	ldd	r24, Y+43	; 0x2b
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	8b a7       	std	Y+43, r24	; 0x2b
    1118:	8b a5       	ldd	r24, Y+43	; 0x2b
    111a:	85 30       	cpi	r24, 0x05	; 5
    111c:	08 f4       	brcc	.+2      	; 0x1120 <enter_new_pass+0x352>
    111e:	7b cf       	rjmp	.-266    	; 0x1016 <enter_new_pass+0x248>
		g_passConfirm[(int)i]=KEYPAD_getPressedKey();
		_delay_ms(400);
		LCD_displayChar('*');
	}
	while(KEYPAD_getPressedKey()!=13);
    1120:	0e 94 b0 12 	call	0x2560	; 0x2560 <KEYPAD_getPressedKey>
    1124:	8d 30       	cpi	r24, 0x0D	; 13
    1126:	e1 f7       	brne	.-8      	; 0x1120 <enter_new_pass+0x352>
	LCD_clearScreen();
    1128:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
}
    112c:	ab 96       	adiw	r28, 0x2b	; 43
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <sendPass>:

/*
 * Function to send the new password and it's confirmation to the control ecu through uart.
 */

void sendPass(){
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <sendPass+0x6>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
	/*wait for the control ecu to be ready*/
	while(UART_recieveByte()!=READY);
    114c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    1150:	8f 30       	cpi	r24, 0x0F	; 15
    1152:	e1 f7       	brne	.-8      	; 0x114c <sendPass+0xa>
	/*send the command for sending password*/
	UART_sendByte(SEND_PASS);
    1154:	81 e1       	ldi	r24, 0x11	; 17
    1156:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
	/*start sending the password stored in the pass array*/
	for(char i=0;i<PASS_SIZE;i++){
    115a:	1a 82       	std	Y+2, r1	; 0x02
    115c:	0c c0       	rjmp	.+24     	; 0x1176 <sendPass+0x34>
		UART_sendByte(g_pass[(int)i]);
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	fc 01       	movw	r30, r24
    1166:	e6 5c       	subi	r30, 0xC6	; 198
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	80 81       	ld	r24, Z
    116c:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
	/*wait for the control ecu to be ready*/
	while(UART_recieveByte()!=READY);
	/*send the command for sending password*/
	UART_sendByte(SEND_PASS);
	/*start sending the password stored in the pass array*/
	for(char i=0;i<PASS_SIZE;i++){
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	8a 83       	std	Y+2, r24	; 0x02
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	85 30       	cpi	r24, 0x05	; 5
    117a:	88 f3       	brcs	.-30     	; 0x115e <sendPass+0x1c>
		UART_sendByte(g_pass[(int)i]);
	}
	/*then send the confirmation stored in the passconfirm array*/
	for(char i=0;i<PASS_SIZE;i++){
    117c:	19 82       	std	Y+1, r1	; 0x01
    117e:	0c c0       	rjmp	.+24     	; 0x1198 <sendPass+0x56>
		UART_sendByte(g_passConfirm[(int)i]);
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	fc 01       	movw	r30, r24
    1188:	e1 5c       	subi	r30, 0xC1	; 193
    118a:	fe 4f       	sbci	r31, 0xFE	; 254
    118c:	80 81       	ld	r24, Z
    118e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
	/*start sending the password stored in the pass array*/
	for(char i=0;i<PASS_SIZE;i++){
		UART_sendByte(g_pass[(int)i]);
	}
	/*then send the confirmation stored in the passconfirm array*/
	for(char i=0;i<PASS_SIZE;i++){
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	85 30       	cpi	r24, 0x05	; 5
    119c:	88 f3       	brcs	.-30     	; 0x1180 <sendPass+0x3e>
		UART_sendByte(g_passConfirm[(int)i]);
	}

}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <checkIfPassExist>:
/*
 * This function is called in starting the system to check if there is a password stored
 * in the control ecu or not to decide what to do next.
 */

uint8 checkIfPassExist(){
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	/*wait for the control ECU to be ready*/
	while(UART_recieveByte()!=READY);
    11b2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    11b6:	8f 30       	cpi	r24, 0x0F	; 15
    11b8:	e1 f7       	brne	.-8      	; 0x11b2 <checkIfPassExist+0xa>
	/*send the command to check if a password exists or not*/
	UART_sendByte(PASS_EXIST);
    11ba:	87 ef       	ldi	r24, 0xF7	; 247
    11bc:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
	/*if the control ECU replys with the same command return PASSEXIST*/
	if(UART_recieveByte()==PASS_EXIST)
    11c0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    11c4:	87 3f       	cpi	r24, 0xF7	; 247
    11c6:	19 f4       	brne	.+6      	; 0x11ce <checkIfPassExist+0x26>
		return PASS_EXIST;
    11c8:	87 ef       	ldi	r24, 0xF7	; 247
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <checkIfPassExist+0x28>
	/*else return 0*/
	else
		return 0;
    11ce:	19 82       	std	Y+1, r1	; 0x01
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <passConfirm>:


/*
 * this function is used to check if the pass and the confirmation pass matches or not.
 */
uint8 passConfirm(){
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <passConfirm+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	/*wait for control ECU to be ready*/
	while(UART_recieveByte()!=READY);
    11e4:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    11e8:	8f 30       	cpi	r24, 0x0F	; 15
    11ea:	e1 f7       	brne	.-8      	; 0x11e4 <passConfirm+0xa>
	/*receive the confirmation command*/
	uint8 confirmation=UART_recieveByte();
    11ec:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    11f0:	89 83       	std	Y+1, r24	; 0x01
	/*if the control ECU sends the confirmation command return with the confirmation command*/
	if(confirmation==PASS_CONFIRM)
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	82 32       	cpi	r24, 0x22	; 34
    11f6:	19 f4       	brne	.+6      	; 0x11fe <passConfirm+0x24>
		return PASS_CONFIRM;
    11f8:	82 e2       	ldi	r24, 0x22	; 34
    11fa:	8a 83       	std	Y+2, r24	; 0x02
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <passConfirm+0x26>
	/*else return 0*/
	else
		return 0;
    11fe:	1a 82       	std	Y+2, r1	; 0x02
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <enterNewPassWithConfirm>:
 * this function is used to call the enter new password function to enter the new password
 * then calls the sendPass function to send the password to control ECu
 * and wait for it's response if the two passwords matches or not.
 */

void enterNewPassWithConfirm(){
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	6d 97       	sbiw	r28, 0x1d	; 29
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0;/*flag used for loop to keep entering the two passwords if they don't match*/
    1220:	1d 8e       	std	Y+29, r1	; 0x1d
    1222:	f8 c0       	rjmp	.+496    	; 0x1414 <enterNewPassWithConfirm+0x208>
	while(flag==0){
		enter_new_pass(); /*enter the new password and it's confirmation*/
    1224:	0e 94 e7 06 	call	0xdce	; 0xdce <enter_new_pass>
		sendPass();/*send the new Password and it's confirmation to the control ECU*/
    1228:	0e 94 a1 08 	call	0x1142	; 0x1142 <sendPass>

		/*if the two password matches display pass match msg and set the flag to return from function*/
		if(passConfirm()==PASS_CONFIRM){
    122c:	0e 94 ed 08 	call	0x11da	; 0x11da <passConfirm>
    1230:	82 32       	cpi	r24, 0x22	; 34
    1232:	09 f0       	breq	.+2      	; 0x1236 <enterNewPassWithConfirm+0x2a>
    1234:	79 c0       	rjmp	.+242    	; 0x1328 <enterNewPassWithConfirm+0x11c>
			flag=1;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_displayString("pass match");
    123a:	8f e8       	ldi	r24, 0x8F	; 143
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	aa ef       	ldi	r26, 0xFA	; 250
    1248:	b3 e4       	ldi	r27, 0x43	; 67
    124a:	89 8f       	std	Y+25, r24	; 0x19
    124c:	9a 8f       	std	Y+26, r25	; 0x1a
    124e:	ab 8f       	std	Y+27, r26	; 0x1b
    1250:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1252:	69 8d       	ldd	r22, Y+25	; 0x19
    1254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a ef       	ldi	r20, 0xFA	; 250
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	8d 8b       	std	Y+21, r24	; 0x15
    126c:	9e 8b       	std	Y+22, r25	; 0x16
    126e:	af 8b       	std	Y+23, r26	; 0x17
    1270:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1272:	6d 89       	ldd	r22, Y+21	; 0x15
    1274:	7e 89       	ldd	r23, Y+22	; 0x16
    1276:	8f 89       	ldd	r24, Y+23	; 0x17
    1278:	98 8d       	ldd	r25, Y+24	; 0x18
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	2c f4       	brge	.+10     	; 0x1294 <enterNewPassWithConfirm+0x88>
		__ticks = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9c 8b       	std	Y+20, r25	; 0x14
    1290:	8b 8b       	std	Y+19, r24	; 0x13
    1292:	3f c0       	rjmp	.+126    	; 0x1312 <enterNewPassWithConfirm+0x106>
	else if (__tmp > 65535)
    1294:	6d 89       	ldd	r22, Y+21	; 0x15
    1296:	7e 89       	ldd	r23, Y+22	; 0x16
    1298:	8f 89       	ldd	r24, Y+23	; 0x17
    129a:	98 8d       	ldd	r25, Y+24	; 0x18
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	4f e7       	ldi	r20, 0x7F	; 127
    12a2:	57 e4       	ldi	r21, 0x47	; 71
    12a4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	4c f5       	brge	.+82     	; 0x12fe <enterNewPassWithConfirm+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ac:	69 8d       	ldd	r22, Y+25	; 0x19
    12ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9c 8b       	std	Y+20, r25	; 0x14
    12d2:	8b 8b       	std	Y+19, r24	; 0x13
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <enterNewPassWithConfirm+0xe8>
    12d6:	88 ec       	ldi	r24, 0xC8	; 200
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9a 8b       	std	Y+18, r25	; 0x12
    12dc:	89 8b       	std	Y+17, r24	; 0x11
    12de:	89 89       	ldd	r24, Y+17	; 0x11
    12e0:	9a 89       	ldd	r25, Y+18	; 0x12
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <enterNewPassWithConfirm+0xd6>
    12e6:	9a 8b       	std	Y+18, r25	; 0x12
    12e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	9c 89       	ldd	r25, Y+20	; 0x14
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9c 8b       	std	Y+20, r25	; 0x14
    12f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f4:	8b 89       	ldd	r24, Y+19	; 0x13
    12f6:	9c 89       	ldd	r25, Y+20	; 0x14
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <enterNewPassWithConfirm+0xca>
    12fc:	8b c0       	rjmp	.+278    	; 0x1414 <enterNewPassWithConfirm+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1300:	7e 89       	ldd	r23, Y+22	; 0x16
    1302:	8f 89       	ldd	r24, Y+23	; 0x17
    1304:	98 8d       	ldd	r25, Y+24	; 0x18
    1306:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9c 8b       	std	Y+20, r25	; 0x14
    1310:	8b 8b       	std	Y+19, r24	; 0x13
    1312:	8b 89       	ldd	r24, Y+19	; 0x13
    1314:	9c 89       	ldd	r25, Y+20	; 0x14
    1316:	98 8b       	std	Y+16, r25	; 0x10
    1318:	8f 87       	std	Y+15, r24	; 0x0f
    131a:	8f 85       	ldd	r24, Y+15	; 0x0f
    131c:	98 89       	ldd	r25, Y+16	; 0x10
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <enterNewPassWithConfirm+0x112>
    1322:	98 8b       	std	Y+16, r25	; 0x10
    1324:	8f 87       	std	Y+15, r24	; 0x0f
    1326:	76 c0       	rjmp	.+236    	; 0x1414 <enterNewPassWithConfirm+0x208>
			_delay_ms(500);
		}
		/*if the don't match display pass don't match and try again */
		else{
			LCD_displayString("pass don't match");
    1328:	8a e9       	ldi	r24, 0x9A	; 154
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	aa ef       	ldi	r26, 0xFA	; 250
    1336:	b3 e4       	ldi	r27, 0x43	; 67
    1338:	8b 87       	std	Y+11, r24	; 0x0b
    133a:	9c 87       	std	Y+12, r25	; 0x0c
    133c:	ad 87       	std	Y+13, r26	; 0x0d
    133e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1340:	6b 85       	ldd	r22, Y+11	; 0x0b
    1342:	7c 85       	ldd	r23, Y+12	; 0x0c
    1344:	8d 85       	ldd	r24, Y+13	; 0x0d
    1346:	9e 85       	ldd	r25, Y+14	; 0x0e
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a ef       	ldi	r20, 0xFA	; 250
    134e:	54 e4       	ldi	r21, 0x44	; 68
    1350:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	8f 83       	std	Y+7, r24	; 0x07
    135a:	98 87       	std	Y+8, r25	; 0x08
    135c:	a9 87       	std	Y+9, r26	; 0x09
    135e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1360:	6f 81       	ldd	r22, Y+7	; 0x07
    1362:	78 85       	ldd	r23, Y+8	; 0x08
    1364:	89 85       	ldd	r24, Y+9	; 0x09
    1366:	9a 85       	ldd	r25, Y+10	; 0x0a
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	2c f4       	brge	.+10     	; 0x1382 <enterNewPassWithConfirm+0x176>
		__ticks = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
    1380:	3f c0       	rjmp	.+126    	; 0x1400 <enterNewPassWithConfirm+0x1f4>
	else if (__tmp > 65535)
    1382:	6f 81       	ldd	r22, Y+7	; 0x07
    1384:	78 85       	ldd	r23, Y+8	; 0x08
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	57 e4       	ldi	r21, 0x47	; 71
    1392:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1396:	18 16       	cp	r1, r24
    1398:	4c f5       	brge	.+82     	; 0x13ec <enterNewPassWithConfirm+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139a:	6b 85       	ldd	r22, Y+11	; 0x0b
    139c:	7c 85       	ldd	r23, Y+12	; 0x0c
    139e:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <enterNewPassWithConfirm+0x1d6>
    13c4:	88 ec       	ldi	r24, 0xC8	; 200
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9c 83       	std	Y+4, r25	; 0x04
    13ca:	8b 83       	std	Y+3, r24	; 0x03
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <enterNewPassWithConfirm+0x1c4>
    13d4:	9c 83       	std	Y+4, r25	; 0x04
    13d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	69 f7       	brne	.-38     	; 0x13c4 <enterNewPassWithConfirm+0x1b8>
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <enterNewPassWithConfirm+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ec:	6f 81       	ldd	r22, Y+7	; 0x07
    13ee:	78 85       	ldd	r23, Y+8	; 0x08
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <enterNewPassWithConfirm+0x200>
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
 * and wait for it's response if the two passwords matches or not.
 */

void enterNewPassWithConfirm(){
	uint8 flag=0;/*flag used for loop to keep entering the two passwords if they don't match*/
	while(flag==0){
    1414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1416:	88 23       	and	r24, r24
    1418:	09 f4       	brne	.+2      	; 0x141c <enterNewPassWithConfirm+0x210>
    141a:	04 cf       	rjmp	.-504    	; 0x1224 <enterNewPassWithConfirm+0x18>
		else{
			LCD_displayString("pass don't match");
			_delay_ms(500);
		}
	}
}
    141c:	6d 96       	adiw	r28, 0x1d	; 29
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <enterCurrentPass>:


/*
 * the function is used to take the current stored password as input from the user.
 */
void enterCurrentPass(){
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	6d 97       	sbiw	r28, 0x1d	; 29
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1446:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
	LCD_displayString("Plz enter Pass: ");
    144a:	8b ea       	ldi	r24, 0xAB	; 171
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
	LCD_moveCursor(1,0);
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_moveCursor>

	/*
	 * enter the password from the keypad and store it in the pass array
	 * then wait for the user to press enter.
	 */
	for(char i=0;i<PASS_SIZE;i++){
    145a:	1d 8e       	std	Y+29, r1	; 0x1d
    145c:	81 c0       	rjmp	.+258    	; 0x1560 <enterCurrentPass+0x132>
		g_pass[(int)i]=KEYPAD_getPressedKey();
    145e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1460:	08 2f       	mov	r16, r24
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	0e 94 b0 12 	call	0x2560	; 0x2560 <KEYPAD_getPressedKey>
    1468:	f8 01       	movw	r30, r16
    146a:	e6 5c       	subi	r30, 0xC6	; 198
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	80 83       	st	Z, r24
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a8 ec       	ldi	r26, 0xC8	; 200
    1476:	b3 e4       	ldi	r27, 0x43	; 67
    1478:	89 8f       	std	Y+25, r24	; 0x19
    147a:	9a 8f       	std	Y+26, r25	; 0x1a
    147c:	ab 8f       	std	Y+27, r26	; 0x1b
    147e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	69 8d       	ldd	r22, Y+25	; 0x19
    1482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8d 8b       	std	Y+21, r24	; 0x15
    149a:	9e 8b       	std	Y+22, r25	; 0x16
    149c:	af 8b       	std	Y+23, r26	; 0x17
    149e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14a0:	6d 89       	ldd	r22, Y+21	; 0x15
    14a2:	7e 89       	ldd	r23, Y+22	; 0x16
    14a4:	8f 89       	ldd	r24, Y+23	; 0x17
    14a6:	98 8d       	ldd	r25, Y+24	; 0x18
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <enterCurrentPass+0x94>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9c 8b       	std	Y+20, r25	; 0x14
    14be:	8b 8b       	std	Y+19, r24	; 0x13
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <enterCurrentPass+0x112>
	else if (__tmp > 65535)
    14c2:	6d 89       	ldd	r22, Y+21	; 0x15
    14c4:	7e 89       	ldd	r23, Y+22	; 0x16
    14c6:	8f 89       	ldd	r24, Y+23	; 0x17
    14c8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <enterCurrentPass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	69 8d       	ldd	r22, Y+25	; 0x19
    14dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9c 8b       	std	Y+20, r25	; 0x14
    1500:	8b 8b       	std	Y+19, r24	; 0x13
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <enterCurrentPass+0xf4>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9a 8b       	std	Y+18, r25	; 0x12
    150a:	89 8b       	std	Y+17, r24	; 0x11
    150c:	89 89       	ldd	r24, Y+17	; 0x11
    150e:	9a 89       	ldd	r25, Y+18	; 0x12
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <enterCurrentPass+0xe2>
    1514:	9a 8b       	std	Y+18, r25	; 0x12
    1516:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	9c 89       	ldd	r25, Y+20	; 0x14
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9c 8b       	std	Y+20, r25	; 0x14
    1520:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	8b 89       	ldd	r24, Y+19	; 0x13
    1524:	9c 89       	ldd	r25, Y+20	; 0x14
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <enterCurrentPass+0xd6>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <enterCurrentPass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6d 89       	ldd	r22, Y+21	; 0x15
    152e:	7e 89       	ldd	r23, Y+22	; 0x16
    1530:	8f 89       	ldd	r24, Y+23	; 0x17
    1532:	98 8d       	ldd	r25, Y+24	; 0x18
    1534:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9c 8b       	std	Y+20, r25	; 0x14
    153e:	8b 8b       	std	Y+19, r24	; 0x13
    1540:	8b 89       	ldd	r24, Y+19	; 0x13
    1542:	9c 89       	ldd	r25, Y+20	; 0x14
    1544:	98 8b       	std	Y+16, r25	; 0x10
    1546:	8f 87       	std	Y+15, r24	; 0x0f
    1548:	8f 85       	ldd	r24, Y+15	; 0x0f
    154a:	98 89       	ldd	r25, Y+16	; 0x10
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <enterCurrentPass+0x11e>
    1550:	98 8b       	std	Y+16, r25	; 0x10
    1552:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(400);
		LCD_displayChar('*');
    1554:	8a e2       	ldi	r24, 0x2A	; 42
    1556:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayChar>

	/*
	 * enter the password from the keypad and store it in the pass array
	 * then wait for the user to press enter.
	 */
	for(char i=0;i<PASS_SIZE;i++){
    155a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	8d 8f       	std	Y+29, r24	; 0x1d
    1560:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1562:	85 30       	cpi	r24, 0x05	; 5
    1564:	08 f4       	brcc	.+2      	; 0x1568 <enterCurrentPass+0x13a>
    1566:	7b cf       	rjmp	.-266    	; 0x145e <enterCurrentPass+0x30>
		g_pass[(int)i]=KEYPAD_getPressedKey();
		_delay_ms(400);
		LCD_displayChar('*');
	}
	while(KEYPAD_getPressedKey()!=13);
    1568:	0e 94 b0 12 	call	0x2560	; 0x2560 <KEYPAD_getPressedKey>
    156c:	8d 30       	cpi	r24, 0x0D	; 13
    156e:	e1 f7       	brne	.-8      	; 0x1568 <enterCurrentPass+0x13a>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a8 ec       	ldi	r26, 0xC8	; 200
    1576:	b3 e4       	ldi	r27, 0x43	; 67
    1578:	8b 87       	std	Y+11, r24	; 0x0b
    157a:	9c 87       	std	Y+12, r25	; 0x0c
    157c:	ad 87       	std	Y+13, r26	; 0x0d
    157e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1580:	6b 85       	ldd	r22, Y+11	; 0x0b
    1582:	7c 85       	ldd	r23, Y+12	; 0x0c
    1584:	8d 85       	ldd	r24, Y+13	; 0x0d
    1586:	9e 85       	ldd	r25, Y+14	; 0x0e
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	4a ef       	ldi	r20, 0xFA	; 250
    158e:	54 e4       	ldi	r21, 0x44	; 68
    1590:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	8f 83       	std	Y+7, r24	; 0x07
    159a:	98 87       	std	Y+8, r25	; 0x08
    159c:	a9 87       	std	Y+9, r26	; 0x09
    159e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15a0:	6f 81       	ldd	r22, Y+7	; 0x07
    15a2:	78 85       	ldd	r23, Y+8	; 0x08
    15a4:	89 85       	ldd	r24, Y+9	; 0x09
    15a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e8       	ldi	r20, 0x80	; 128
    15ae:	5f e3       	ldi	r21, 0x3F	; 63
    15b0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <enterCurrentPass+0x194>
		__ticks = 1;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	3f c0       	rjmp	.+126    	; 0x1640 <enterCurrentPass+0x212>
	else if (__tmp > 65535)
    15c2:	6f 81       	ldd	r22, Y+7	; 0x07
    15c4:	78 85       	ldd	r23, Y+8	; 0x08
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	3f ef       	ldi	r19, 0xFF	; 255
    15ce:	4f e7       	ldi	r20, 0x7F	; 127
    15d0:	57 e4       	ldi	r21, 0x47	; 71
    15d2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    15d6:	18 16       	cp	r1, r24
    15d8:	4c f5       	brge	.+82     	; 0x162c <enterCurrentPass+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15da:	6b 85       	ldd	r22, Y+11	; 0x0b
    15dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15de:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e2       	ldi	r20, 0x20	; 32
    15e8:	51 e4       	ldi	r21, 0x41	; 65
    15ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	0f c0       	rjmp	.+30     	; 0x1622 <enterCurrentPass+0x1f4>
    1604:	88 ec       	ldi	r24, 0xC8	; 200
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9c 83       	std	Y+4, r25	; 0x04
    160a:	8b 83       	std	Y+3, r24	; 0x03
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <enterCurrentPass+0x1e2>
    1614:	9c 83       	std	Y+4, r25	; 0x04
    1616:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	69 f7       	brne	.-38     	; 0x1604 <enterCurrentPass+0x1d6>
    162a:	14 c0       	rjmp	.+40     	; 0x1654 <enterCurrentPass+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162c:	6f 81       	ldd	r22, Y+7	; 0x07
    162e:	78 85       	ldd	r23, Y+8	; 0x08
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	9a 85       	ldd	r25, Y+10	; 0x0a
    1634:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9e 83       	std	Y+6, r25	; 0x06
    163e:	8d 83       	std	Y+5, r24	; 0x05
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <enterCurrentPass+0x21e>
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
}
    1654:	6d 96       	adiw	r28, 0x1d	; 29
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <sendCurrentPass>:


/*
 * this is used to send the current stored password to the control ECU to check it
 */
void sendCurrentPass(){
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=READY);
    1674:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    1678:	8f 30       	cpi	r24, 0x0F	; 15
    167a:	e1 f7       	brne	.-8      	; 0x1674 <sendCurrentPass+0xa>
	UART_sendByte(SEND_CURRENT_PASS);
    167c:	83 e3       	ldi	r24, 0x33	; 51
    167e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
	for(char i=0;i<PASS_SIZE;i++){
    1682:	19 82       	std	Y+1, r1	; 0x01
    1684:	0c c0       	rjmp	.+24     	; 0x169e <sendCurrentPass+0x34>
		UART_sendByte(g_pass[(int)i]);
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	fc 01       	movw	r30, r24
    168e:	e6 5c       	subi	r30, 0xC6	; 198
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	80 81       	ld	r24, Z
    1694:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
 * this is used to send the current stored password to the control ECU to check it
 */
void sendCurrentPass(){
	while(UART_recieveByte()!=READY);
	UART_sendByte(SEND_CURRENT_PASS);
	for(char i=0;i<PASS_SIZE;i++){
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	8f 5f       	subi	r24, 0xFF	; 255
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	85 30       	cpi	r24, 0x05	; 5
    16a2:	88 f3       	brcs	.-30     	; 0x1686 <sendCurrentPass+0x1c>
		UART_sendByte(g_pass[(int)i]);
	}
}
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <checkCurrentPass>:
/*
 * this function checks if the password sent matches the stored one or not
 * if it matches it returns PASS_CONFIRM.
 * it it doesn't match it returns 0.
 */
uint8 checkCurrentPass(){
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <checkCurrentPass+0x6>
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=READY);/*wait for the control ECU to be ready*/
    16b6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    16ba:	8f 30       	cpi	r24, 0x0F	; 15
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <checkCurrentPass+0xa>
	UART_sendByte(CHECK_CURRENT_PASS); /*send the command to check if password match or not*/
    16be:	84 e4       	ldi	r24, 0x44	; 68
    16c0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
	uint8 data;
	data=UART_recieveByte(); /*receive the reply of the control ecu */
    16c4:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    16c8:	89 83       	std	Y+1, r24	; 0x01

	/*return the result of the check*/
	if(data==PASS_CONFIRM)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	82 32       	cpi	r24, 0x22	; 34
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <checkCurrentPass+0x2a>
		return PASS_CONFIRM;
    16d0:	82 e2       	ldi	r24, 0x22	; 34
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <checkCurrentPass+0x2c>
	else
		return 0;
    16d6:	1a 82       	std	Y+2, r1	; 0x02
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <displayMainOption>:
 * This function is responsible for the main functionality of the system after storing
 * a new password is done.
 * This the first function that gets called when running the program after storing a password
 * successfully.
 */
void displayMainOption(){
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	c6 55       	subi	r28, 0x56	; 86
    16f2:	d0 40       	sbci	r29, 0x00	; 0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
	uint8 key;/*variable to store the pressed key on keypad*/
	uint8 wrongPassCount=0;/*variable to count the number of wrong pass entry times*/
    16fe:	fe 01       	movw	r30, r28
    1700:	e8 5b       	subi	r30, 0xB8	; 184
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	10 82       	st	Z, r1
	uint8 WrongPassFlag=0;/*flag for reentering the pass after wrong entry*/
    1706:	fe 01       	movw	r30, r28
    1708:	e9 5b       	subi	r30, 0xB9	; 185
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	10 82       	st	Z, r1
	/*
	 * First we Display on LCD:
	 * +: Open Door
	 * -: Change Pass
	 */
	LCD_clearScreen();
    170e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1712:	8c eb       	ldi	r24, 0xBC	; 188
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
	LCD_moveCursor(1,0);
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    1722:	8a ec       	ldi	r24, 0xCA	; 202
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
	key=KEYPAD_getPressedKey();
    172a:	0e 94 b0 12 	call	0x2560	; 0x2560 <KEYPAD_getPressedKey>
    172e:	fe 01       	movw	r30, r28
    1730:	e7 5b       	subi	r30, 0xB7	; 183
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 83       	st	Z, r24

	/*timer initialized to produce interrupt every 1 sec to be used as a delay*/
	Timer1_ConfigType timer_config={0,31250,CLK_256,CTC_OCR1A};
    1736:	ce 01       	movw	r24, r28
    1738:	86 5b       	subi	r24, 0xB6	; 182
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	64 96       	adiw	r28, 0x14	; 20
    173e:	9f af       	std	Y+63, r25	; 0x3f
    1740:	8e af       	std	Y+62, r24	; 0x3e
    1742:	64 97       	sbiw	r28, 0x14	; 20
    1744:	2d e2       	ldi	r18, 0x2D	; 45
    1746:	31 e0       	ldi	r19, 0x01	; 1
    1748:	66 96       	adiw	r28, 0x16	; 22
    174a:	3f af       	std	Y+63, r19	; 0x3f
    174c:	2e af       	std	Y+62, r18	; 0x3e
    174e:	66 97       	sbiw	r28, 0x16	; 22
    1750:	36 e0       	ldi	r19, 0x06	; 6
    1752:	67 96       	adiw	r28, 0x17	; 23
    1754:	3f af       	std	Y+63, r19	; 0x3f
    1756:	67 97       	sbiw	r28, 0x17	; 23
    1758:	66 96       	adiw	r28, 0x16	; 22
    175a:	ee ad       	ldd	r30, Y+62	; 0x3e
    175c:	ff ad       	ldd	r31, Y+63	; 0x3f
    175e:	66 97       	sbiw	r28, 0x16	; 22
    1760:	00 80       	ld	r0, Z
    1762:	66 96       	adiw	r28, 0x16	; 22
    1764:	2e ad       	ldd	r18, Y+62	; 0x3e
    1766:	3f ad       	ldd	r19, Y+63	; 0x3f
    1768:	66 97       	sbiw	r28, 0x16	; 22
    176a:	2f 5f       	subi	r18, 0xFF	; 255
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	66 96       	adiw	r28, 0x16	; 22
    1770:	3f af       	std	Y+63, r19	; 0x3f
    1772:	2e af       	std	Y+62, r18	; 0x3e
    1774:	66 97       	sbiw	r28, 0x16	; 22
    1776:	64 96       	adiw	r28, 0x14	; 20
    1778:	ee ad       	ldd	r30, Y+62	; 0x3e
    177a:	ff ad       	ldd	r31, Y+63	; 0x3f
    177c:	64 97       	sbiw	r28, 0x14	; 20
    177e:	00 82       	st	Z, r0
    1780:	64 96       	adiw	r28, 0x14	; 20
    1782:	2e ad       	ldd	r18, Y+62	; 0x3e
    1784:	3f ad       	ldd	r19, Y+63	; 0x3f
    1786:	64 97       	sbiw	r28, 0x14	; 20
    1788:	2f 5f       	subi	r18, 0xFF	; 255
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	64 96       	adiw	r28, 0x14	; 20
    178e:	3f af       	std	Y+63, r19	; 0x3f
    1790:	2e af       	std	Y+62, r18	; 0x3e
    1792:	64 97       	sbiw	r28, 0x14	; 20
    1794:	67 96       	adiw	r28, 0x17	; 23
    1796:	3f ad       	ldd	r19, Y+63	; 0x3f
    1798:	67 97       	sbiw	r28, 0x17	; 23
    179a:	31 50       	subi	r19, 0x01	; 1
    179c:	67 96       	adiw	r28, 0x17	; 23
    179e:	3f af       	std	Y+63, r19	; 0x3f
    17a0:	67 97       	sbiw	r28, 0x17	; 23
    17a2:	67 96       	adiw	r28, 0x17	; 23
    17a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    17a6:	67 97       	sbiw	r28, 0x17	; 23
    17a8:	88 23       	and	r24, r24
    17aa:	b1 f6       	brne	.-84     	; 0x1758 <displayMainOption+0x74>
    17ac:	fe 01       	movw	r30, r28
    17ae:	ed 5b       	subi	r30, 0xBD	; 189
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a8 ec       	ldi	r26, 0xC8	; 200
    17b8:	b3 e4       	ldi	r27, 0x43	; 67
    17ba:	80 83       	st	Z, r24
    17bc:	91 83       	std	Z+1, r25	; 0x01
    17be:	a2 83       	std	Z+2, r26	; 0x02
    17c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c2:	8e 01       	movw	r16, r28
    17c4:	01 5c       	subi	r16, 0xC1	; 193
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	fe 01       	movw	r30, r28
    17ca:	ed 5b       	subi	r30, 0xBD	; 189
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	4a ef       	ldi	r20, 0xFA	; 250
    17dc:	54 e4       	ldi	r21, 0x44	; 68
    17de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	f8 01       	movw	r30, r16
    17e8:	80 83       	st	Z, r24
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	a2 83       	std	Z+2, r26	; 0x02
    17ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f0:	fe 01       	movw	r30, r28
    17f2:	ff 96       	adiw	r30, 0x3f	; 63
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <displayMainOption+0x132>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9e af       	std	Y+62, r25	; 0x3e
    1812:	8d af       	std	Y+61, r24	; 0x3d
    1814:	46 c0       	rjmp	.+140    	; 0x18a2 <displayMainOption+0x1be>
	else if (__tmp > 65535)
    1816:	fe 01       	movw	r30, r28
    1818:	ff 96       	adiw	r30, 0x3f	; 63
    181a:	60 81       	ld	r22, Z
    181c:	71 81       	ldd	r23, Z+1	; 0x01
    181e:	82 81       	ldd	r24, Z+2	; 0x02
    1820:	93 81       	ldd	r25, Z+3	; 0x03
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	57 e4       	ldi	r21, 0x47	; 71
    182a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    182e:	18 16       	cp	r1, r24
    1830:	64 f5       	brge	.+88     	; 0x188a <displayMainOption+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1832:	fe 01       	movw	r30, r28
    1834:	ed 5b       	subi	r30, 0xBD	; 189
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e af       	std	Y+62, r25	; 0x3e
    185e:	8d af       	std	Y+61, r24	; 0x3d
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <displayMainOption+0x19c>
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9c af       	std	Y+60, r25	; 0x3c
    1868:	8b af       	std	Y+59, r24	; 0x3b
    186a:	8b ad       	ldd	r24, Y+59	; 0x3b
    186c:	9c ad       	ldd	r25, Y+60	; 0x3c
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <displayMainOption+0x18a>
    1872:	9c af       	std	Y+60, r25	; 0x3c
    1874:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8d ad       	ldd	r24, Y+61	; 0x3d
    1878:	9e ad       	ldd	r25, Y+62	; 0x3e
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9e af       	std	Y+62, r25	; 0x3e
    187e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8d ad       	ldd	r24, Y+61	; 0x3d
    1882:	9e ad       	ldd	r25, Y+62	; 0x3e
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <displayMainOption+0x17e>
    1888:	16 c0       	rjmp	.+44     	; 0x18b6 <displayMainOption+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	fe 01       	movw	r30, r28
    188c:	ff 96       	adiw	r30, 0x3f	; 63
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	9e af       	std	Y+62, r25	; 0x3e
    18a0:	8d af       	std	Y+61, r24	; 0x3d
    18a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a6:	9a af       	std	Y+58, r25	; 0x3a
    18a8:	89 af       	std	Y+57, r24	; 0x39
    18aa:	89 ad       	ldd	r24, Y+57	; 0x39
    18ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <displayMainOption+0x1ca>
    18b2:	9a af       	std	Y+58, r25	; 0x3a
    18b4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(400); /*delay for proteus */
	switch(key){
    18b6:	fe 01       	movw	r30, r28
    18b8:	e7 5b       	subi	r30, 0xB7	; 183
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	62 96       	adiw	r28, 0x12	; 18
    18c4:	3f af       	std	Y+63, r19	; 0x3f
    18c6:	2e af       	std	Y+62, r18	; 0x3e
    18c8:	62 97       	sbiw	r28, 0x12	; 18
    18ca:	62 96       	adiw	r28, 0x12	; 18
    18cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    18ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    18d0:	62 97       	sbiw	r28, 0x12	; 18
    18d2:	8b 32       	cpi	r24, 0x2B	; 43
    18d4:	91 05       	cpc	r25, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <displayMainOption+0x1f6>
    18d8:	fe c0       	rjmp	.+508    	; 0x1ad6 <displayMainOption+0x3f2>
    18da:	62 96       	adiw	r28, 0x12	; 18
    18dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    18de:	ff ad       	ldd	r31, Y+63	; 0x3f
    18e0:	62 97       	sbiw	r28, 0x12	; 18
    18e2:	ed 32       	cpi	r30, 0x2D	; 45
    18e4:	f1 05       	cpc	r31, r1
    18e6:	09 f4       	brne	.+2      	; 0x18ea <displayMainOption+0x206>
    18e8:	a9 c2       	rjmp	.+1362   	; 0x1e3c <displayMainOption+0x758>
    18ea:	af c2       	rjmp	.+1374   	; 0x1e4a <displayMainOption+0x766>
	case '+':
		while(WrongPassFlag==0){
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a6 e9       	ldi	r26, 0x96	; 150
    18f2:	b3 e4       	ldi	r27, 0x43	; 67
    18f4:	8d ab       	std	Y+53, r24	; 0x35
    18f6:	9e ab       	std	Y+54, r25	; 0x36
    18f8:	af ab       	std	Y+55, r26	; 0x37
    18fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	6d a9       	ldd	r22, Y+53	; 0x35
    18fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1900:	8f a9       	ldd	r24, Y+55	; 0x37
    1902:	98 ad       	ldd	r25, Y+56	; 0x38
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a ef       	ldi	r20, 0xFA	; 250
    190a:	54 e4       	ldi	r21, 0x44	; 68
    190c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	89 ab       	std	Y+49, r24	; 0x31
    1916:	9a ab       	std	Y+50, r25	; 0x32
    1918:	ab ab       	std	Y+51, r26	; 0x33
    191a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    191c:	69 a9       	ldd	r22, Y+49	; 0x31
    191e:	7a a9       	ldd	r23, Y+50	; 0x32
    1920:	8b a9       	ldd	r24, Y+51	; 0x33
    1922:	9c a9       	ldd	r25, Y+52	; 0x34
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <displayMainOption+0x25a>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	98 ab       	std	Y+48, r25	; 0x30
    193a:	8f a7       	std	Y+47, r24	; 0x2f
    193c:	3f c0       	rjmp	.+126    	; 0x19bc <displayMainOption+0x2d8>
	else if (__tmp > 65535)
    193e:	69 a9       	ldd	r22, Y+49	; 0x31
    1940:	7a a9       	ldd	r23, Y+50	; 0x32
    1942:	8b a9       	ldd	r24, Y+51	; 0x33
    1944:	9c a9       	ldd	r25, Y+52	; 0x34
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	4c f5       	brge	.+82     	; 0x19a8 <displayMainOption+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1956:	6d a9       	ldd	r22, Y+53	; 0x35
    1958:	7e a9       	ldd	r23, Y+54	; 0x36
    195a:	8f a9       	ldd	r24, Y+55	; 0x37
    195c:	98 ad       	ldd	r25, Y+56	; 0x38
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	98 ab       	std	Y+48, r25	; 0x30
    197c:	8f a7       	std	Y+47, r24	; 0x2f
    197e:	0f c0       	rjmp	.+30     	; 0x199e <displayMainOption+0x2ba>
    1980:	88 ec       	ldi	r24, 0xC8	; 200
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9e a7       	std	Y+46, r25	; 0x2e
    1986:	8d a7       	std	Y+45, r24	; 0x2d
    1988:	8d a5       	ldd	r24, Y+45	; 0x2d
    198a:	9e a5       	ldd	r25, Y+46	; 0x2e
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <displayMainOption+0x2a8>
    1990:	9e a7       	std	Y+46, r25	; 0x2e
    1992:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	8f a5       	ldd	r24, Y+47	; 0x2f
    1996:	98 a9       	ldd	r25, Y+48	; 0x30
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	98 ab       	std	Y+48, r25	; 0x30
    199c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a0:	98 a9       	ldd	r25, Y+48	; 0x30
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	69 f7       	brne	.-38     	; 0x1980 <displayMainOption+0x29c>
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <displayMainOption+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a8:	69 a9       	ldd	r22, Y+49	; 0x31
    19aa:	7a a9       	ldd	r23, Y+50	; 0x32
    19ac:	8b a9       	ldd	r24, Y+51	; 0x33
    19ae:	9c a9       	ldd	r25, Y+52	; 0x34
    19b0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	98 ab       	std	Y+48, r25	; 0x30
    19ba:	8f a7       	std	Y+47, r24	; 0x2f
    19bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19be:	98 a9       	ldd	r25, Y+48	; 0x30
    19c0:	9c a7       	std	Y+44, r25	; 0x2c
    19c2:	8b a7       	std	Y+43, r24	; 0x2b
    19c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <displayMainOption+0x2e4>
    19cc:	9c a7       	std	Y+44, r25	; 0x2c
    19ce:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(300);
			enterCurrentPass();	/*when the user presses the '+' button it should ask him to enter the current password*/
    19d0:	0e 94 17 0a 	call	0x142e	; 0x142e <enterCurrentPass>
			sendCurrentPass();/*send the entered pass to the control ecu to check it*/
    19d4:	0e 94 35 0b 	call	0x166a	; 0x166a <sendCurrentPass>
			if(checkCurrentPass()==PASS_CONFIRM){
    19d8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <checkCurrentPass>
    19dc:	82 32       	cpi	r24, 0x22	; 34
    19de:	09 f0       	breq	.+2      	; 0x19e2 <displayMainOption+0x2fe>
    19e0:	47 c0       	rjmp	.+142    	; 0x1a70 <displayMainOption+0x38c>
				/*if the password is correct set the worgpassflag to 1 and start the unlocking process*/
				WrongPassFlag=1;
    19e2:	fe 01       	movw	r30, r28
    19e4:	e9 5b       	subi	r30, 0xB9	; 185
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 83       	st	Z, r24
				/*send commant to open door*/
				openDoor();
    19ec:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    19f0:	8f 30       	cpi	r24, 0x0F	; 15
    19f2:	e1 f7       	brne	.-8      	; 0x19ec <displayMainOption+0x308>
    19f4:	85 e5       	ldi	r24, 0x55	; 85
    19f6:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
				/*
				 * display on lcd :
				 * 1- door is unlocking for 18 seconds .
				 * 2- door is locking for 15 seconds .
				 */
				LCD_clearScreen();
    19fa:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
				LCD_displayString("Door is");
    19fe:	8a ed       	ldi	r24, 0xDA	; 218
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
				LCD_moveCursor(1,0);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_moveCursor>
				LCD_displayString("Unlocking");
    1a0e:	82 ee       	ldi	r24, 0xE2	; 226
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
				/*use the timer to produce delay with seconds */
				g_timercount=18;
    1a16:	82 e1       	ldi	r24, 0x12	; 18
    1a18:	80 93 45 01 	sts	0x0145, r24
				Timer1_setCallBack(timer_delay);/*set timer call back function */
    1a1c:	8c ec       	ldi	r24, 0xCC	; 204
    1a1e:	96 e0       	ldi	r25, 0x06	; 6
    1a20:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <Timer1_setCallBack>
				Timer1_init(&timer_config);/*set timer initialization*/
    1a24:	ce 01       	movw	r24, r28
    1a26:	86 5b       	subi	r24, 0xB6	; 182
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	0e 94 4b 1b 	call	0x3696	; 0x3696 <Timer1_init>
				while(g_timerFlag!=1);/*wait for the timer to count till the desired number of seconds */
    1a2e:	80 91 44 01 	lds	r24, 0x0144
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	e1 f7       	brne	.-8      	; 0x1a2e <displayMainOption+0x34a>
				g_timerFlag=0; /*reset the flag to be able to reuse the delay function*/
    1a36:	10 92 44 01 	sts	0x0144, r1
				LCD_clearScreen();
    1a3a:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
				/*display door is locking for 15 seconds using the same process*/
				LCD_displayString("Door is Locking");
    1a3e:	8c ee       	ldi	r24, 0xEC	; 236
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
				g_timercount=15;
    1a46:	8f e0       	ldi	r24, 0x0F	; 15
    1a48:	80 93 45 01 	sts	0x0145, r24
				Timer1_setCallBack(timer_delay);
    1a4c:	8c ec       	ldi	r24, 0xCC	; 204
    1a4e:	96 e0       	ldi	r25, 0x06	; 6
    1a50:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <Timer1_setCallBack>
				Timer1_init(&timer_config);
    1a54:	ce 01       	movw	r24, r28
    1a56:	86 5b       	subi	r24, 0xB6	; 182
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	0e 94 4b 1b 	call	0x3696	; 0x3696 <Timer1_init>
				while(g_timerFlag!=1);
    1a5e:	80 91 44 01 	lds	r24, 0x0144
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	e1 f7       	brne	.-8      	; 0x1a5e <displayMainOption+0x37a>
				g_timerFlag=0;
    1a66:	10 92 44 01 	sts	0x0144, r1
				LCD_clearScreen();
    1a6a:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
    1a6e:	33 c0       	rjmp	.+102    	; 0x1ad6 <displayMainOption+0x3f2>
			}
			else{
				/*if the pass did not match increment the wrongpasscount and enter pass again*/

				wrongPassCount++;
    1a70:	de 01       	movw	r26, r28
    1a72:	a8 5b       	subi	r26, 0xB8	; 184
    1a74:	bf 4f       	sbci	r27, 0xFF	; 255
    1a76:	fe 01       	movw	r30, r28
    1a78:	e8 5b       	subi	r30, 0xB8	; 184
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	8c 93       	st	X, r24
				/*if the user enter wrong password 3 consecutive times
				 * activate the alarm and display error msg for 1 minute*/
				if(wrongPassCount==3){
    1a82:	fe 01       	movw	r30, r28
    1a84:	e8 5b       	subi	r30, 0xB8	; 184
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	83 30       	cpi	r24, 0x03	; 3
    1a8c:	21 f5       	brne	.+72     	; 0x1ad6 <displayMainOption+0x3f2>
					/*set the flag to one to stop looping on reentering the password */
					WrongPassFlag=1;
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e9 5b       	subi	r30, 0xB9	; 185
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 83       	st	Z, r24
					/*send the command to activate the alarm for 1 minute  */
					while(UART_recieveByte()!=READY);
    1a98:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    1a9c:	8f 30       	cpi	r24, 0x0F	; 15
    1a9e:	e1 f7       	brne	.-8      	; 0x1a98 <displayMainOption+0x3b4>
					UART_sendByte(ALARM_ON);
    1aa0:	87 e7       	ldi	r24, 0x77	; 119
    1aa2:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
					LCD_clearScreen();
    1aa6:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
					LCD_displayString("SYSTEM LOCKED!!!");
    1aaa:	8c ef       	ldi	r24, 0xFC	; 252
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
					g_timercount=60;
    1ab2:	8c e3       	ldi	r24, 0x3C	; 60
    1ab4:	80 93 45 01 	sts	0x0145, r24
					Timer1_setCallBack(timer_delay);
    1ab8:	8c ec       	ldi	r24, 0xCC	; 204
    1aba:	96 e0       	ldi	r25, 0x06	; 6
    1abc:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <Timer1_setCallBack>
					Timer1_init(&timer_config);
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	86 5b       	subi	r24, 0xB6	; 182
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	0e 94 4b 1b 	call	0x3696	; 0x3696 <Timer1_init>
					while(g_timerFlag!=1);
    1aca:	80 91 44 01 	lds	r24, 0x0144
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	e1 f7       	brne	.-8      	; 0x1aca <displayMainOption+0x3e6>
					g_timerFlag=0;
    1ad2:	10 92 44 01 	sts	0x0144, r1
	Timer1_ConfigType timer_config={0,31250,CLK_256,CTC_OCR1A};

	_delay_ms(400); /*delay for proteus */
	switch(key){
	case '+':
		while(WrongPassFlag==0){
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e9 5b       	subi	r30, 0xB9	; 185
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <displayMainOption+0x400>
    1ae2:	04 cf       	rjmp	.-504    	; 0x18ec <displayMainOption+0x208>
    1ae4:	b2 c1       	rjmp	.+868    	; 0x1e4a <displayMainOption+0x766>
		/*If the user chooses to change password:
		 * first : ask for the current pass.
		 * second: if the password match send command to change password
		 * if the pass doesn't match ask the user to reenter it .
		 */
		while(WrongPassFlag==0){
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a6 e9       	ldi	r26, 0x96	; 150
    1aec:	b3 e4       	ldi	r27, 0x43	; 67
    1aee:	8f a3       	std	Y+39, r24	; 0x27
    1af0:	98 a7       	std	Y+40, r25	; 0x28
    1af2:	a9 a7       	std	Y+41, r26	; 0x29
    1af4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	6f a1       	ldd	r22, Y+39	; 0x27
    1af8:	78 a5       	ldd	r23, Y+40	; 0x28
    1afa:	89 a5       	ldd	r24, Y+41	; 0x29
    1afc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a ef       	ldi	r20, 0xFA	; 250
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8b a3       	std	Y+35, r24	; 0x23
    1b10:	9c a3       	std	Y+36, r25	; 0x24
    1b12:	ad a3       	std	Y+37, r26	; 0x25
    1b14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b16:	6b a1       	ldd	r22, Y+35	; 0x23
    1b18:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <displayMainOption+0x454>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <displayMainOption+0x4d2>
	else if (__tmp > 65535)
    1b38:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <displayMainOption+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	6f a1       	ldd	r22, Y+39	; 0x27
    1b52:	78 a5       	ldd	r23, Y+40	; 0x28
    1b54:	89 a5       	ldd	r24, Y+41	; 0x29
    1b56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9a a3       	std	Y+34, r25	; 0x22
    1b76:	89 a3       	std	Y+33, r24	; 0x21
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <displayMainOption+0x4b4>
    1b7a:	88 ec       	ldi	r24, 0xC8	; 200
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	98 a3       	std	Y+32, r25	; 0x20
    1b80:	8f 8f       	std	Y+31, r24	; 0x1f
    1b82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b84:	98 a1       	ldd	r25, Y+32	; 0x20
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <displayMainOption+0x4a2>
    1b8a:	98 a3       	std	Y+32, r25	; 0x20
    1b8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b90:	9a a1       	ldd	r25, Y+34	; 0x22
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9a a3       	std	Y+34, r25	; 0x22
    1b96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <displayMainOption+0x496>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <displayMainOption+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    1baa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9a a3       	std	Y+34, r25	; 0x22
    1bb4:	89 a3       	std	Y+33, r24	; 0x21
    1bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bba:	9e 8f       	std	Y+30, r25	; 0x1e
    1bbc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <displayMainOption+0x4de>
    1bc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			enterCurrentPass();//enter current password
    1bca:	0e 94 17 0a 	call	0x142e	; 0x142e <enterCurrentPass>
			sendCurrentPass();//send current password
    1bce:	0e 94 35 0b 	call	0x166a	; 0x166a <sendCurrentPass>
			if(checkCurrentPass()==PASS_CONFIRM){
    1bd2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <checkCurrentPass>
    1bd6:	82 32       	cpi	r24, 0x22	; 34
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <displayMainOption+0x4f8>
    1bda:	85 c0       	rjmp	.+266    	; 0x1ce6 <displayMainOption+0x602>
				/*if the password matches send command to change password */
				WrongPassFlag=1;
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e9 5b       	subi	r30, 0xB9	; 185
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	80 83       	st	Z, r24
				LCD_clearScreen();
    1be6:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
				LCD_displayString("Correct Pass");
    1bea:	8d e0       	ldi	r24, 0x0D	; 13
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	aa ef       	ldi	r26, 0xFA	; 250
    1bf8:	b3 e4       	ldi	r27, 0x43	; 67
    1bfa:	89 8f       	std	Y+25, r24	; 0x19
    1bfc:	9a 8f       	std	Y+26, r25	; 0x1a
    1bfe:	ab 8f       	std	Y+27, r26	; 0x1b
    1c00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	69 8d       	ldd	r22, Y+25	; 0x19
    1c04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a ef       	ldi	r20, 0xFA	; 250
    1c10:	54 e4       	ldi	r21, 0x44	; 68
    1c12:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8d 8b       	std	Y+21, r24	; 0x15
    1c1c:	9e 8b       	std	Y+22, r25	; 0x16
    1c1e:	af 8b       	std	Y+23, r26	; 0x17
    1c20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c22:	6d 89       	ldd	r22, Y+21	; 0x15
    1c24:	7e 89       	ldd	r23, Y+22	; 0x16
    1c26:	8f 89       	ldd	r24, Y+23	; 0x17
    1c28:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <displayMainOption+0x560>
		__ticks = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9c 8b       	std	Y+20, r25	; 0x14
    1c40:	8b 8b       	std	Y+19, r24	; 0x13
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <displayMainOption+0x5de>
	else if (__tmp > 65535)
    1c44:	6d 89       	ldd	r22, Y+21	; 0x15
    1c46:	7e 89       	ldd	r23, Y+22	; 0x16
    1c48:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	4c f5       	brge	.+82     	; 0x1cae <displayMainOption+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9c 8b       	std	Y+20, r25	; 0x14
    1c82:	8b 8b       	std	Y+19, r24	; 0x13
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <displayMainOption+0x5c0>
    1c86:	88 ec       	ldi	r24, 0xC8	; 200
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9a 8b       	std	Y+18, r25	; 0x12
    1c8c:	89 8b       	std	Y+17, r24	; 0x11
    1c8e:	89 89       	ldd	r24, Y+17	; 0x11
    1c90:	9a 89       	ldd	r25, Y+18	; 0x12
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <displayMainOption+0x5ae>
    1c96:	9a 8b       	std	Y+18, r25	; 0x12
    1c98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	9c 8b       	std	Y+20, r25	; 0x14
    1ca2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f7       	brne	.-38     	; 0x1c86 <displayMainOption+0x5a2>
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <displayMainOption+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	98 8b       	std	Y+16, r25	; 0x10
    1cc8:	8f 87       	std	Y+15, r24	; 0x0f
    1cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ccc:	98 89       	ldd	r25, Y+16	; 0x10
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <displayMainOption+0x5ea>
    1cd2:	98 8b       	std	Y+16, r25	; 0x10
    1cd4:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				while(UART_recieveByte()!=READY);
    1cd6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    1cda:	8f 30       	cpi	r24, 0x0F	; 15
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <displayMainOption+0x5f2>
				UART_sendByte(CHANGE_PASS);
    1cde:	86 e6       	ldi	r24, 0x66	; 102
    1ce0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
    1ce4:	ab c0       	rjmp	.+342    	; 0x1e3c <displayMainOption+0x758>
			}
			else{
				/*if pass don't match increment the wrongpasscount and enter pass again*/
				wrongPassCount++;
    1ce6:	de 01       	movw	r26, r28
    1ce8:	a8 5b       	subi	r26, 0xB8	; 184
    1cea:	bf 4f       	sbci	r27, 0xFF	; 255
    1cec:	fe 01       	movw	r30, r28
    1cee:	e8 5b       	subi	r30, 0xB8	; 184
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 5f       	subi	r24, 0xFF	; 255
    1cf6:	8c 93       	st	X, r24
				LCD_clearScreen();
    1cf8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
				LCD_displayString("Wrong Pass");
    1cfc:	8a e1       	ldi	r24, 0x1A	; 26
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	aa ef       	ldi	r26, 0xFA	; 250
    1d0a:	b3 e4       	ldi	r27, 0x43	; 67
    1d0c:	8b 87       	std	Y+11, r24	; 0x0b
    1d0e:	9c 87       	std	Y+12, r25	; 0x0c
    1d10:	ad 87       	std	Y+13, r26	; 0x0d
    1d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a ef       	ldi	r20, 0xFA	; 250
    1d22:	54 e4       	ldi	r21, 0x44	; 68
    1d24:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8f 83       	std	Y+7, r24	; 0x07
    1d2e:	98 87       	std	Y+8, r25	; 0x08
    1d30:	a9 87       	std	Y+9, r26	; 0x09
    1d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <displayMainOption+0x672>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	3f c0       	rjmp	.+126    	; 0x1dd4 <displayMainOption+0x6f0>
	else if (__tmp > 65535)
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	4c f5       	brge	.+82     	; 0x1dc0 <displayMainOption+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <displayMainOption+0x6d2>
    1d98:	88 ec       	ldi	r24, 0xC8	; 200
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <displayMainOption+0x6c0>
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <displayMainOption+0x6b4>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <displayMainOption+0x704>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <displayMainOption+0x6fc>
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				if(wrongPassCount==3){
    1de8:	fe 01       	movw	r30, r28
    1dea:	e8 5b       	subi	r30, 0xB8	; 184
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	83 30       	cpi	r24, 0x03	; 3
    1df2:	21 f5       	brne	.+72     	; 0x1e3c <displayMainOption+0x758>
					/*if the user enters wrong password 3 consecutive times
					 * activate the alarm as done before.*/
					WrongPassFlag=1;
    1df4:	fe 01       	movw	r30, r28
    1df6:	e9 5b       	subi	r30, 0xB9	; 185
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	80 83       	st	Z, r24
					while(UART_recieveByte()!=READY);
    1dfe:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    1e02:	8f 30       	cpi	r24, 0x0F	; 15
    1e04:	e1 f7       	brne	.-8      	; 0x1dfe <displayMainOption+0x71a>
					UART_sendByte(ALARM_ON);
    1e06:	87 e7       	ldi	r24, 0x77	; 119
    1e08:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
					LCD_clearScreen();
    1e0c:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_clearScreen>
					LCD_displayString("SYSTEM LOCKED!!!");
    1e10:	8c ef       	ldi	r24, 0xFC	; 252
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
					g_timercount=10;
    1e18:	8a e0       	ldi	r24, 0x0A	; 10
    1e1a:	80 93 45 01 	sts	0x0145, r24
					Timer1_setCallBack(timer_delay);
    1e1e:	8c ec       	ldi	r24, 0xCC	; 204
    1e20:	96 e0       	ldi	r25, 0x06	; 6
    1e22:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <Timer1_setCallBack>
					Timer1_init(&timer_config);
    1e26:	ce 01       	movw	r24, r28
    1e28:	86 5b       	subi	r24, 0xB6	; 182
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	0e 94 4b 1b 	call	0x3696	; 0x3696 <Timer1_init>
					while(g_timerFlag!=1);
    1e30:	80 91 44 01 	lds	r24, 0x0144
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	e1 f7       	brne	.-8      	; 0x1e30 <displayMainOption+0x74c>
					g_timerFlag=0;
    1e38:	10 92 44 01 	sts	0x0144, r1
		/*If the user chooses to change password:
		 * first : ask for the current pass.
		 * second: if the password match send command to change password
		 * if the pass doesn't match ask the user to reenter it .
		 */
		while(WrongPassFlag==0){
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e9 5b       	subi	r30, 0xB9	; 185
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	88 23       	and	r24, r24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <displayMainOption+0x766>
    1e48:	4e ce       	rjmp	.-868    	; 0x1ae6 <displayMainOption+0x402>
		break;

	}


}
    1e4a:	ca 5a       	subi	r28, 0xAA	; 170
    1e4c:	df 4f       	sbci	r29, 0xFF	; 255
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	08 95       	ret

00001e62 <main>:

/*************************************************************************
 *                            MAIN FUNCTION                              *
 *************************************************************************/

int main(void){
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	2c 97       	sbiw	r28, 0x0c	; 12
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
	LCD_init();/*initialize lcd*/
    1e76:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <LCD_init>

	/*initialize uart with 8_bit ,no parity and 1 stop bit and bit rate 9600*/
	UART_ConfigType uart_config={UART_8BIT,PARITY_DISABLE,UART_1_STOP_BIT,9600};
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	01 96       	adiw	r24, 0x01	; 1
    1e7e:	99 87       	std	Y+9, r25	; 0x09
    1e80:	88 87       	std	Y+8, r24	; 0x08
    1e82:	e3 e3       	ldi	r30, 0x33	; 51
    1e84:	f1 e0       	ldi	r31, 0x01	; 1
    1e86:	fb 87       	std	Y+11, r31	; 0x0b
    1e88:	ea 87       	std	Y+10, r30	; 0x0a
    1e8a:	f7 e0       	ldi	r31, 0x07	; 7
    1e8c:	fc 87       	std	Y+12, r31	; 0x0c
    1e8e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e90:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e92:	00 80       	ld	r0, Z
    1e94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	9b 87       	std	Y+11, r25	; 0x0b
    1e9c:	8a 87       	std	Y+10, r24	; 0x0a
    1e9e:	e8 85       	ldd	r30, Y+8	; 0x08
    1ea0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ea2:	00 82       	st	Z, r0
    1ea4:	88 85       	ldd	r24, Y+8	; 0x08
    1ea6:	99 85       	ldd	r25, Y+9	; 0x09
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	99 87       	std	Y+9, r25	; 0x09
    1eac:	88 87       	std	Y+8, r24	; 0x08
    1eae:	9c 85       	ldd	r25, Y+12	; 0x0c
    1eb0:	91 50       	subi	r25, 0x01	; 1
    1eb2:	9c 87       	std	Y+12, r25	; 0x0c
    1eb4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1eb6:	ee 23       	and	r30, r30
    1eb8:	51 f7       	brne	.-44     	; 0x1e8e <main+0x2c>
	UART_init(&uart_config);
    1eba:	ce 01       	movw	r24, r28
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	0e 94 9e 1c 	call	0x393c	; 0x393c <UART_init>
	/*activate global interrupts for timer ISR*/
	SREG|=(1<<7);
    1ec2:	af e5       	ldi	r26, 0x5F	; 95
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	ef e5       	ldi	r30, 0x5F	; 95
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 68       	ori	r24, 0x80	; 128
    1ece:	8c 93       	st	X, r24
	while(1){
		/*check if there is a password stored in the system
		 * if there is no password found then start the process to enter new password
		 * if the is a password found then display the main options*/
		if(checkIfPassExist()!=PASS_EXIST){
    1ed0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <checkIfPassExist>
    1ed4:	87 3f       	cpi	r24, 0xF7	; 247
    1ed6:	19 f0       	breq	.+6      	; 0x1ede <main+0x7c>
			enterNewPassWithConfirm();
    1ed8:	0e 94 06 09 	call	0x120c	; 0x120c <enterNewPassWithConfirm>
    1edc:	f9 cf       	rjmp	.-14     	; 0x1ed0 <main+0x6e>
		}
		else {
			displayMainOption();
    1ede:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <displayMainOption>
    1ee2:	f6 cf       	rjmp	.-20     	; 0x1ed0 <main+0x6e>

00001ee4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <GPIO_setupPinDirection+0x6>
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <GPIO_setupPinDirection+0x8>
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	6a 83       	std	Y+2, r22	; 0x02
    1ef6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	88 30       	cpi	r24, 0x08	; 8
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <GPIO_setupPinDirection+0x1c>
    1efe:	d5 c0       	rjmp	.+426    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	84 30       	cpi	r24, 0x04	; 4
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <GPIO_setupPinDirection+0x24>
    1f06:	d1 c0       	rjmp	.+418    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3d 83       	std	Y+5, r19	; 0x05
    1f10:	2c 83       	std	Y+4, r18	; 0x04
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	91 05       	cpc	r25, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <GPIO_setupPinDirection+0x3a>
    1f1c:	43 c0       	rjmp	.+134    	; 0x1fa4 <GPIO_setupPinDirection+0xc0>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <GPIO_setupPinDirection+0x4e>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	71 f0       	breq	.+28     	; 0x1f4c <GPIO_setupPinDirection+0x68>
    1f30:	bc c0       	rjmp	.+376    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <GPIO_setupPinDirection+0x5a>
    1f3c:	5f c0       	rjmp	.+190    	; 0x1ffc <GPIO_setupPinDirection+0x118>
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <GPIO_setupPinDirection+0x66>
    1f48:	85 c0       	rjmp	.+266    	; 0x2054 <GPIO_setupPinDirection+0x170>
    1f4a:	af c0       	rjmp	.+350    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	a1 f4       	brne	.+40     	; 0x1f7a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1f52:	aa e3       	ldi	r26, 0x3A	; 58
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ea e3       	ldi	r30, 0x3A	; 58
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <GPIO_setupPinDirection+0x8c>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <GPIO_setupPinDirection+0x88>
    1f74:	84 2b       	or	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	98 c0       	rjmp	.+304    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1f7a:	aa e3       	ldi	r26, 0x3A	; 58
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	ea e3       	ldi	r30, 0x3A	; 58
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 2e       	mov	r0, r18
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <GPIO_setupPinDirection+0xb4>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <GPIO_setupPinDirection+0xb0>
    1f9c:	80 95       	com	r24
    1f9e:	84 23       	and	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	83 c0       	rjmp	.+262    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	a1 f4       	brne	.+40     	; 0x1fd2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1faa:	a7 e3       	ldi	r26, 0x37	; 55
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e7 e3       	ldi	r30, 0x37	; 55
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 2e       	mov	r0, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <GPIO_setupPinDirection+0xe4>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 94       	dec	r0
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <GPIO_setupPinDirection+0xe0>
    1fcc:	84 2b       	or	r24, r20
    1fce:	8c 93       	st	X, r24
    1fd0:	6c c0       	rjmp	.+216    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1fd2:	a7 e3       	ldi	r26, 0x37	; 55
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e7 e3       	ldi	r30, 0x37	; 55
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <GPIO_setupPinDirection+0x10c>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <GPIO_setupPinDirection+0x108>
    1ff4:	80 95       	com	r24
    1ff6:	84 23       	and	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	57 c0       	rjmp	.+174    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	a1 f4       	brne	.+40     	; 0x202a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2002:	a4 e3       	ldi	r26, 0x34	; 52
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e4 e3       	ldi	r30, 0x34	; 52
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <GPIO_setupPinDirection+0x13c>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <GPIO_setupPinDirection+0x138>
    2024:	84 2b       	or	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	40 c0       	rjmp	.+128    	; 0x20aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    202a:	a4 e3       	ldi	r26, 0x34	; 52
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e4 e3       	ldi	r30, 0x34	; 52
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	48 2f       	mov	r20, r24
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 2e       	mov	r0, r18
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <GPIO_setupPinDirection+0x164>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	0a 94       	dec	r0
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <GPIO_setupPinDirection+0x160>
    204c:	80 95       	com	r24
    204e:	84 23       	and	r24, r20
    2050:	8c 93       	st	X, r24
    2052:	2b c0       	rjmp	.+86     	; 0x20aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	a1 f4       	brne	.+40     	; 0x2082 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    205a:	a1 e3       	ldi	r26, 0x31	; 49
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e1 e3       	ldi	r30, 0x31	; 49
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <GPIO_setupPinDirection+0x194>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <GPIO_setupPinDirection+0x190>
    207c:	84 2b       	or	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2082:	a1 e3       	ldi	r26, 0x31	; 49
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e1 e3       	ldi	r30, 0x31	; 49
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <GPIO_setupPinDirection+0x1bc>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <GPIO_setupPinDirection+0x1b8>
    20a4:	80 95       	com	r24
    20a6:	84 23       	and	r24, r20
    20a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <GPIO_writePin+0x6>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <GPIO_writePin+0x8>
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	6a 83       	std	Y+2, r22	; 0x02
    20cc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	88 30       	cpi	r24, 0x08	; 8
    20d2:	08 f0       	brcs	.+2      	; 0x20d6 <GPIO_writePin+0x1c>
    20d4:	d5 c0       	rjmp	.+426    	; 0x2280 <GPIO_writePin+0x1c6>
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	84 30       	cpi	r24, 0x04	; 4
    20da:	08 f0       	brcs	.+2      	; 0x20de <GPIO_writePin+0x24>
    20dc:	d1 c0       	rjmp	.+418    	; 0x2280 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	3d 83       	std	Y+5, r19	; 0x05
    20e6:	2c 83       	std	Y+4, r18	; 0x04
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	91 05       	cpc	r25, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <GPIO_writePin+0x3a>
    20f2:	43 c0       	rjmp	.+134    	; 0x217a <GPIO_writePin+0xc0>
    20f4:	2c 81       	ldd	r18, Y+4	; 0x04
    20f6:	3d 81       	ldd	r19, Y+5	; 0x05
    20f8:	22 30       	cpi	r18, 0x02	; 2
    20fa:	31 05       	cpc	r19, r1
    20fc:	2c f4       	brge	.+10     	; 0x2108 <GPIO_writePin+0x4e>
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	9d 81       	ldd	r25, Y+5	; 0x05
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	71 f0       	breq	.+28     	; 0x2122 <GPIO_writePin+0x68>
    2106:	bc c0       	rjmp	.+376    	; 0x2280 <GPIO_writePin+0x1c6>
    2108:	2c 81       	ldd	r18, Y+4	; 0x04
    210a:	3d 81       	ldd	r19, Y+5	; 0x05
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	31 05       	cpc	r19, r1
    2110:	09 f4       	brne	.+2      	; 0x2114 <GPIO_writePin+0x5a>
    2112:	5f c0       	rjmp	.+190    	; 0x21d2 <GPIO_writePin+0x118>
    2114:	8c 81       	ldd	r24, Y+4	; 0x04
    2116:	9d 81       	ldd	r25, Y+5	; 0x05
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	91 05       	cpc	r25, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <GPIO_writePin+0x66>
    211e:	85 c0       	rjmp	.+266    	; 0x222a <GPIO_writePin+0x170>
    2120:	af c0       	rjmp	.+350    	; 0x2280 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	a1 f4       	brne	.+40     	; 0x2150 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2128:	ab e3       	ldi	r26, 0x3B	; 59
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	eb e3       	ldi	r30, 0x3B	; 59
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	48 2f       	mov	r20, r24
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	02 2e       	mov	r0, r18
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <GPIO_writePin+0x8c>
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	0a 94       	dec	r0
    2148:	e2 f7       	brpl	.-8      	; 0x2142 <GPIO_writePin+0x88>
    214a:	84 2b       	or	r24, r20
    214c:	8c 93       	st	X, r24
    214e:	98 c0       	rjmp	.+304    	; 0x2280 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2150:	ab e3       	ldi	r26, 0x3B	; 59
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	eb e3       	ldi	r30, 0x3B	; 59
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	48 2f       	mov	r20, r24
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 2e       	mov	r0, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <GPIO_writePin+0xb4>
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	0a 94       	dec	r0
    2170:	e2 f7       	brpl	.-8      	; 0x216a <GPIO_writePin+0xb0>
    2172:	80 95       	com	r24
    2174:	84 23       	and	r24, r20
    2176:	8c 93       	st	X, r24
    2178:	83 c0       	rjmp	.+262    	; 0x2280 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	a1 f4       	brne	.+40     	; 0x21a8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2180:	a8 e3       	ldi	r26, 0x38	; 56
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e8 e3       	ldi	r30, 0x38	; 56
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 2e       	mov	r0, r18
    2198:	02 c0       	rjmp	.+4      	; 0x219e <GPIO_writePin+0xe4>
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <GPIO_writePin+0xe0>
    21a2:	84 2b       	or	r24, r20
    21a4:	8c 93       	st	X, r24
    21a6:	6c c0       	rjmp	.+216    	; 0x2280 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    21a8:	a8 e3       	ldi	r26, 0x38	; 56
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e8 e3       	ldi	r30, 0x38	; 56
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	48 2f       	mov	r20, r24
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 2e       	mov	r0, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <GPIO_writePin+0x10c>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <GPIO_writePin+0x108>
    21ca:	80 95       	com	r24
    21cc:	84 23       	and	r24, r20
    21ce:	8c 93       	st	X, r24
    21d0:	57 c0       	rjmp	.+174    	; 0x2280 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	a1 f4       	brne	.+40     	; 0x2200 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    21d8:	a5 e3       	ldi	r26, 0x35	; 53
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e5 e3       	ldi	r30, 0x35	; 53
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	48 2f       	mov	r20, r24
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	02 2e       	mov	r0, r18
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <GPIO_writePin+0x13c>
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <GPIO_writePin+0x138>
    21fa:	84 2b       	or	r24, r20
    21fc:	8c 93       	st	X, r24
    21fe:	40 c0       	rjmp	.+128    	; 0x2280 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2200:	a5 e3       	ldi	r26, 0x35	; 53
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e5 e3       	ldi	r30, 0x35	; 53
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	48 2f       	mov	r20, r24
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	02 2e       	mov	r0, r18
    2218:	02 c0       	rjmp	.+4      	; 0x221e <GPIO_writePin+0x164>
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	0a 94       	dec	r0
    2220:	e2 f7       	brpl	.-8      	; 0x221a <GPIO_writePin+0x160>
    2222:	80 95       	com	r24
    2224:	84 23       	and	r24, r20
    2226:	8c 93       	st	X, r24
    2228:	2b c0       	rjmp	.+86     	; 0x2280 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	a1 f4       	brne	.+40     	; 0x2258 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2230:	a2 e3       	ldi	r26, 0x32	; 50
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e2 e3       	ldi	r30, 0x32	; 50
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	48 2f       	mov	r20, r24
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	02 2e       	mov	r0, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <GPIO_writePin+0x194>
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	0a 94       	dec	r0
    2250:	e2 f7       	brpl	.-8      	; 0x224a <GPIO_writePin+0x190>
    2252:	84 2b       	or	r24, r20
    2254:	8c 93       	st	X, r24
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2258:	a2 e3       	ldi	r26, 0x32	; 50
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e2 e3       	ldi	r30, 0x32	; 50
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	48 2f       	mov	r20, r24
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	02 2e       	mov	r0, r18
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <GPIO_writePin+0x1bc>
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	0a 94       	dec	r0
    2278:	e2 f7       	brpl	.-8      	; 0x2272 <GPIO_writePin+0x1b8>
    227a:	80 95       	com	r24
    227c:	84 23       	and	r24, r20
    227e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <GPIO_readPin+0x6>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <GPIO_readPin+0x8>
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	8a 83       	std	Y+2, r24	; 0x02
    22a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    22a2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	88 30       	cpi	r24, 0x08	; 8
    22a8:	08 f0       	brcs	.+2      	; 0x22ac <GPIO_readPin+0x1c>
    22aa:	84 c0       	rjmp	.+264    	; 0x23b4 <GPIO_readPin+0x124>
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	84 30       	cpi	r24, 0x04	; 4
    22b0:	08 f0       	brcs	.+2      	; 0x22b4 <GPIO_readPin+0x24>
    22b2:	80 c0       	rjmp	.+256    	; 0x23b4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	3d 83       	std	Y+5, r19	; 0x05
    22bc:	2c 83       	std	Y+4, r18	; 0x04
    22be:	4c 81       	ldd	r20, Y+4	; 0x04
    22c0:	5d 81       	ldd	r21, Y+5	; 0x05
    22c2:	41 30       	cpi	r20, 0x01	; 1
    22c4:	51 05       	cpc	r21, r1
    22c6:	79 f1       	breq	.+94     	; 0x2326 <GPIO_readPin+0x96>
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	9d 81       	ldd	r25, Y+5	; 0x05
    22cc:	82 30       	cpi	r24, 0x02	; 2
    22ce:	91 05       	cpc	r25, r1
    22d0:	34 f4       	brge	.+12     	; 0x22de <GPIO_readPin+0x4e>
    22d2:	2c 81       	ldd	r18, Y+4	; 0x04
    22d4:	3d 81       	ldd	r19, Y+5	; 0x05
    22d6:	21 15       	cp	r18, r1
    22d8:	31 05       	cpc	r19, r1
    22da:	69 f0       	breq	.+26     	; 0x22f6 <GPIO_readPin+0x66>
    22dc:	6b c0       	rjmp	.+214    	; 0x23b4 <GPIO_readPin+0x124>
    22de:	4c 81       	ldd	r20, Y+4	; 0x04
    22e0:	5d 81       	ldd	r21, Y+5	; 0x05
    22e2:	42 30       	cpi	r20, 0x02	; 2
    22e4:	51 05       	cpc	r21, r1
    22e6:	b9 f1       	breq	.+110    	; 0x2356 <GPIO_readPin+0xc6>
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	9d 81       	ldd	r25, Y+5	; 0x05
    22ec:	83 30       	cpi	r24, 0x03	; 3
    22ee:	91 05       	cpc	r25, r1
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <GPIO_readPin+0x64>
    22f2:	49 c0       	rjmp	.+146    	; 0x2386 <GPIO_readPin+0xf6>
    22f4:	5f c0       	rjmp	.+190    	; 0x23b4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    22f6:	e9 e3       	ldi	r30, 0x39	; 57
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	88 2f       	mov	r24, r24
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	a9 01       	movw	r20, r18
    2308:	02 c0       	rjmp	.+4      	; 0x230e <GPIO_readPin+0x7e>
    230a:	55 95       	asr	r21
    230c:	47 95       	ror	r20
    230e:	8a 95       	dec	r24
    2310:	e2 f7       	brpl	.-8      	; 0x230a <GPIO_readPin+0x7a>
    2312:	ca 01       	movw	r24, r20
    2314:	81 70       	andi	r24, 0x01	; 1
    2316:	90 70       	andi	r25, 0x00	; 0
    2318:	88 23       	and	r24, r24
    231a:	19 f0       	breq	.+6      	; 0x2322 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	49 c0       	rjmp	.+146    	; 0x23b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2322:	19 82       	std	Y+1, r1	; 0x01
    2324:	47 c0       	rjmp	.+142    	; 0x23b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2326:	e6 e3       	ldi	r30, 0x36	; 54
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a9 01       	movw	r20, r18
    2338:	02 c0       	rjmp	.+4      	; 0x233e <GPIO_readPin+0xae>
    233a:	55 95       	asr	r21
    233c:	47 95       	ror	r20
    233e:	8a 95       	dec	r24
    2340:	e2 f7       	brpl	.-8      	; 0x233a <GPIO_readPin+0xaa>
    2342:	ca 01       	movw	r24, r20
    2344:	81 70       	andi	r24, 0x01	; 1
    2346:	90 70       	andi	r25, 0x00	; 0
    2348:	88 23       	and	r24, r24
    234a:	19 f0       	breq	.+6      	; 0x2352 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	31 c0       	rjmp	.+98     	; 0x23b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2352:	19 82       	std	Y+1, r1	; 0x01
    2354:	2f c0       	rjmp	.+94     	; 0x23b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2356:	e3 e3       	ldi	r30, 0x33	; 51
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a9 01       	movw	r20, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <GPIO_readPin+0xde>
    236a:	55 95       	asr	r21
    236c:	47 95       	ror	r20
    236e:	8a 95       	dec	r24
    2370:	e2 f7       	brpl	.-8      	; 0x236a <GPIO_readPin+0xda>
    2372:	ca 01       	movw	r24, r20
    2374:	81 70       	andi	r24, 0x01	; 1
    2376:	90 70       	andi	r25, 0x00	; 0
    2378:	88 23       	and	r24, r24
    237a:	19 f0       	breq	.+6      	; 0x2382 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	19 c0       	rjmp	.+50     	; 0x23b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2382:	19 82       	std	Y+1, r1	; 0x01
    2384:	17 c0       	rjmp	.+46     	; 0x23b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2386:	e0 e3       	ldi	r30, 0x30	; 48
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a9 01       	movw	r20, r18
    2398:	02 c0       	rjmp	.+4      	; 0x239e <GPIO_readPin+0x10e>
    239a:	55 95       	asr	r21
    239c:	47 95       	ror	r20
    239e:	8a 95       	dec	r24
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <GPIO_readPin+0x10a>
    23a2:	ca 01       	movw	r24, r20
    23a4:	81 70       	andi	r24, 0x01	; 1
    23a6:	90 70       	andi	r25, 0x00	; 0
    23a8:	88 23       	and	r24, r24
    23aa:	19 f0       	breq	.+6      	; 0x23b2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23b2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <GPIO_setupPortDirection+0x6>
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <GPIO_setupPortDirection+0x8>
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	84 30       	cpi	r24, 0x04	; 4
    23da:	90 f5       	brcc	.+100    	; 0x2440 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	3c 83       	std	Y+4, r19	; 0x04
    23e4:	2b 83       	std	Y+3, r18	; 0x03
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	91 05       	cpc	r25, r1
    23ee:	d1 f0       	breq	.+52     	; 0x2424 <GPIO_setupPortDirection+0x5e>
    23f0:	2b 81       	ldd	r18, Y+3	; 0x03
    23f2:	3c 81       	ldd	r19, Y+4	; 0x04
    23f4:	22 30       	cpi	r18, 0x02	; 2
    23f6:	31 05       	cpc	r19, r1
    23f8:	2c f4       	brge	.+10     	; 0x2404 <GPIO_setupPortDirection+0x3e>
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	61 f0       	breq	.+24     	; 0x241a <GPIO_setupPortDirection+0x54>
    2402:	1e c0       	rjmp	.+60     	; 0x2440 <GPIO_setupPortDirection+0x7a>
    2404:	2b 81       	ldd	r18, Y+3	; 0x03
    2406:	3c 81       	ldd	r19, Y+4	; 0x04
    2408:	22 30       	cpi	r18, 0x02	; 2
    240a:	31 05       	cpc	r19, r1
    240c:	81 f0       	breq	.+32     	; 0x242e <GPIO_setupPortDirection+0x68>
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	83 30       	cpi	r24, 0x03	; 3
    2414:	91 05       	cpc	r25, r1
    2416:	81 f0       	breq	.+32     	; 0x2438 <GPIO_setupPortDirection+0x72>
    2418:	13 c0       	rjmp	.+38     	; 0x2440 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    241a:	ea e3       	ldi	r30, 0x3A	; 58
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	80 83       	st	Z, r24
    2422:	0e c0       	rjmp	.+28     	; 0x2440 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2424:	e7 e3       	ldi	r30, 0x37	; 55
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	80 83       	st	Z, r24
    242c:	09 c0       	rjmp	.+18     	; 0x2440 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    242e:	e4 e3       	ldi	r30, 0x34	; 52
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	80 83       	st	Z, r24
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2438:	e1 e3       	ldi	r30, 0x31	; 49
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <GPIO_writePort+0x6>
    2454:	00 d0       	rcall	.+0      	; 0x2456 <GPIO_writePort+0x8>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	84 30       	cpi	r24, 0x04	; 4
    2462:	90 f5       	brcc	.+100    	; 0x24c8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	3c 83       	std	Y+4, r19	; 0x04
    246c:	2b 83       	std	Y+3, r18	; 0x03
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	91 05       	cpc	r25, r1
    2476:	d1 f0       	breq	.+52     	; 0x24ac <GPIO_writePort+0x5e>
    2478:	2b 81       	ldd	r18, Y+3	; 0x03
    247a:	3c 81       	ldd	r19, Y+4	; 0x04
    247c:	22 30       	cpi	r18, 0x02	; 2
    247e:	31 05       	cpc	r19, r1
    2480:	2c f4       	brge	.+10     	; 0x248c <GPIO_writePort+0x3e>
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	61 f0       	breq	.+24     	; 0x24a2 <GPIO_writePort+0x54>
    248a:	1e c0       	rjmp	.+60     	; 0x24c8 <GPIO_writePort+0x7a>
    248c:	2b 81       	ldd	r18, Y+3	; 0x03
    248e:	3c 81       	ldd	r19, Y+4	; 0x04
    2490:	22 30       	cpi	r18, 0x02	; 2
    2492:	31 05       	cpc	r19, r1
    2494:	81 f0       	breq	.+32     	; 0x24b6 <GPIO_writePort+0x68>
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	83 30       	cpi	r24, 0x03	; 3
    249c:	91 05       	cpc	r25, r1
    249e:	81 f0       	breq	.+32     	; 0x24c0 <GPIO_writePort+0x72>
    24a0:	13 c0       	rjmp	.+38     	; 0x24c8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    24a2:	eb e3       	ldi	r30, 0x3B	; 59
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	80 83       	st	Z, r24
    24aa:	0e c0       	rjmp	.+28     	; 0x24c8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    24ac:	e8 e3       	ldi	r30, 0x38	; 56
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	80 83       	st	Z, r24
    24b4:	09 c0       	rjmp	.+18     	; 0x24c8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    24b6:	e5 e3       	ldi	r30, 0x35	; 53
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	80 83       	st	Z, r24
    24be:	04 c0       	rjmp	.+8      	; 0x24c8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    24c0:	e2 e3       	ldi	r30, 0x32	; 50
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <GPIO_readPort+0x6>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <GPIO_readPort+0x8>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    24e4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	84 30       	cpi	r24, 0x04	; 4
    24ea:	90 f5       	brcc	.+100    	; 0x2550 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	3c 83       	std	Y+4, r19	; 0x04
    24f4:	2b 83       	std	Y+3, r18	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	91 05       	cpc	r25, r1
    24fe:	d1 f0       	breq	.+52     	; 0x2534 <GPIO_readPort+0x5e>
    2500:	2b 81       	ldd	r18, Y+3	; 0x03
    2502:	3c 81       	ldd	r19, Y+4	; 0x04
    2504:	22 30       	cpi	r18, 0x02	; 2
    2506:	31 05       	cpc	r19, r1
    2508:	2c f4       	brge	.+10     	; 0x2514 <GPIO_readPort+0x3e>
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	61 f0       	breq	.+24     	; 0x252a <GPIO_readPort+0x54>
    2512:	1e c0       	rjmp	.+60     	; 0x2550 <GPIO_readPort+0x7a>
    2514:	2b 81       	ldd	r18, Y+3	; 0x03
    2516:	3c 81       	ldd	r19, Y+4	; 0x04
    2518:	22 30       	cpi	r18, 0x02	; 2
    251a:	31 05       	cpc	r19, r1
    251c:	81 f0       	breq	.+32     	; 0x253e <GPIO_readPort+0x68>
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	83 30       	cpi	r24, 0x03	; 3
    2524:	91 05       	cpc	r25, r1
    2526:	81 f0       	breq	.+32     	; 0x2548 <GPIO_readPort+0x72>
    2528:	13 c0       	rjmp	.+38     	; 0x2550 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    252a:	e9 e3       	ldi	r30, 0x39	; 57
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	0e c0       	rjmp	.+28     	; 0x2550 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2534:	e6 e3       	ldi	r30, 0x36	; 54
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    253e:	e3 e3       	ldi	r30, 0x33	; 51
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2548:	e0 e3       	ldi	r30, 0x30	; 48
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2550:	89 81       	ldd	r24, Y+1	; 0x01
}
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <KEYPAD_getPressedKey>:


/*
 *to get the key pressed on the keypad
 */
uint8 KEYPAD_getPressedKey(){
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	62 97       	sbiw	r28, 0x12	; 18
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
	/* to initialize the rows pins as input*/
	for(char i=0;i<KEYPAD_NUM_OF_ROWS;i++){
    2574:	1a 8a       	std	Y+18, r1	; 0x12
    2576:	08 c0       	rjmp	.+16     	; 0x2588 <KEYPAD_getPressedKey+0x28>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+i,PIN_INPUT);
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	6a 89       	ldd	r22, Y+18	; 0x12
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_setupPinDirection>
/*
 *to get the key pressed on the keypad
 */
uint8 KEYPAD_getPressedKey(){
	/* to initialize the rows pins as input*/
	for(char i=0;i<KEYPAD_NUM_OF_ROWS;i++){
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	8a 8b       	std	Y+18, r24	; 0x12
    2588:	8a 89       	ldd	r24, Y+18	; 0x12
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	a8 f3       	brcs	.-22     	; 0x2578 <KEYPAD_getPressedKey+0x18>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+i,PIN_INPUT);
	}
	/*to initialize the columns as input pins*/
	for(char i=0;i<KEYPAD_NUM_OF_COLUMNS;i++){
    258e:	19 8a       	std	Y+17, r1	; 0x11
    2590:	0b c0       	rjmp	.+22     	; 0x25a8 <KEYPAD_getPressedKey+0x48>
		GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_COL_FIRST_PIN+i,PIN_INPUT);
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	98 2f       	mov	r25, r24
    2596:	9c 5f       	subi	r25, 0xFC	; 252
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	69 2f       	mov	r22, r25
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_setupPinDirection>
	/* to initialize the rows pins as input*/
	for(char i=0;i<KEYPAD_NUM_OF_ROWS;i++){
		GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+i,PIN_INPUT);
	}
	/*to initialize the columns as input pins*/
	for(char i=0;i<KEYPAD_NUM_OF_COLUMNS;i++){
    25a2:	89 89       	ldd	r24, Y+17	; 0x11
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
    25a6:	89 8b       	std	Y+17, r24	; 0x11
    25a8:	89 89       	ldd	r24, Y+17	; 0x11
    25aa:	84 30       	cpi	r24, 0x04	; 4
    25ac:	90 f3       	brcs	.-28     	; 0x2592 <KEYPAD_getPressedKey+0x32>
	}
	while(1){
		/* loop through the rows pins one by one each time setting the current one only
		 * as output and setting it with logic_high and other as input
		 */
		for(char row=0;row<KEYPAD_NUM_OF_ROWS;row++){
    25ae:	18 8a       	std	Y+16, r1	; 0x10
    25b0:	ab c0       	rjmp	.+342    	; 0x2708 <KEYPAD_getPressedKey+0x1a8>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+row,PIN_OUTPUT);
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	68 89       	ldd	r22, Y+16	; 0x10
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+row,KEYPRESSED);
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	68 89       	ldd	r22, Y+16	; 0x10
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	0e 94 5d 10 	call	0x20ba	; 0x20ba <GPIO_writePin>
			/*loop through the columns pins and check if any pin is logic_low then the corresponding
			 * key is pressed return the number for that key
			 */
			for(char col=0;col<KEYPAD_NUM_OF_COLUMNS;col++){
    25c6:	1f 86       	std	Y+15, r1	; 0x0f
    25c8:	22 c0       	rjmp	.+68     	; 0x260e <KEYPAD_getPressedKey+0xae>
				if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_COL_FIRST_PIN+col)==KEYPRESSED)
    25ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    25cc:	98 2f       	mov	r25, r24
    25ce:	9c 5f       	subi	r25, 0xFC	; 252
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	69 2f       	mov	r22, r25
    25d4:	0e 94 48 11 	call	0x2290	; 0x2290 <GPIO_readPin>
    25d8:	88 23       	and	r24, r24
    25da:	b1 f4       	brne	.+44     	; 0x2608 <KEYPAD_getPressedKey+0xa8>
									return g_keys[(row*KEYPAD_NUM_OF_COLUMNS)+col+1];
#endif
					#elif(KEYPAD_NUM_OF_COLUMNS==4)
							#ifndef CUSTOM_KEYPAD
								#ifndef STANDARD_KEYPAD
										return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_OF_COLUMNS)+col+1);
    25dc:	88 89       	ldd	r24, Y+16	; 0x10
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	98 2f       	mov	r25, r24
    25ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ee:	89 0f       	add	r24, r25
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	0e 94 89 13 	call	0x2712	; 0x2712 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+row,PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    25f6:	62 96       	adiw	r28, 0x12	; 18
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+row,KEYPRESSED);
			/*loop through the columns pins and check if any pin is logic_low then the corresponding
			 * key is pressed return the number for that key
			 */
			for(char col=0;col<KEYPAD_NUM_OF_COLUMNS;col++){
    2608:	8f 85       	ldd	r24, Y+15	; 0x0f
    260a:	8f 5f       	subi	r24, 0xFF	; 255
    260c:	8f 87       	std	Y+15, r24	; 0x0f
    260e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	d8 f2       	brcs	.-74     	; 0x25ca <KEYPAD_getPressedKey+0x6a>
							#else
									return g_keys[(row*KEYPAD_NUM_OF_COLUMNS)+col];
							#endif
					#endif
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_FIRST_PIN+row,PIN_INPUT);
    2614:	82 e0       	ldi	r24, 0x02	; 2
    2616:	68 89       	ldd	r22, Y+16	; 0x10
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_setupPinDirection>
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 ea       	ldi	r26, 0xA0	; 160
    2624:	b0 e4       	ldi	r27, 0x40	; 64
    2626:	8b 87       	std	Y+11, r24	; 0x0b
    2628:	9c 87       	std	Y+12, r25	; 0x0c
    262a:	ad 87       	std	Y+13, r26	; 0x0d
    262c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2630:	7c 85       	ldd	r23, Y+12	; 0x0c
    2632:	8d 85       	ldd	r24, Y+13	; 0x0d
    2634:	9e 85       	ldd	r25, Y+14	; 0x0e
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a ef       	ldi	r20, 0xFA	; 250
    263c:	54 e4       	ldi	r21, 0x44	; 68
    263e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	8f 83       	std	Y+7, r24	; 0x07
    2648:	98 87       	std	Y+8, r25	; 0x08
    264a:	a9 87       	std	Y+9, r26	; 0x09
    264c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    264e:	6f 81       	ldd	r22, Y+7	; 0x07
    2650:	78 85       	ldd	r23, Y+8	; 0x08
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	2c f4       	brge	.+10     	; 0x2670 <KEYPAD_getPressedKey+0x110>
		__ticks = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	3f c0       	rjmp	.+126    	; 0x26ee <KEYPAD_getPressedKey+0x18e>
	else if (__tmp > 65535)
    2670:	6f 81       	ldd	r22, Y+7	; 0x07
    2672:	78 85       	ldd	r23, Y+8	; 0x08
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	9a 85       	ldd	r25, Y+10	; 0x0a
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	3f ef       	ldi	r19, 0xFF	; 255
    267c:	4f e7       	ldi	r20, 0x7F	; 127
    267e:	57 e4       	ldi	r21, 0x47	; 71
    2680:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2684:	18 16       	cp	r1, r24
    2686:	4c f5       	brge	.+82     	; 0x26da <KEYPAD_getPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	6b 85       	ldd	r22, Y+11	; 0x0b
    268a:	7c 85       	ldd	r23, Y+12	; 0x0c
    268c:	8d 85       	ldd	r24, Y+13	; 0x0d
    268e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e2       	ldi	r20, 0x20	; 32
    2696:	51 e4       	ldi	r21, 0x41	; 65
    2698:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	8d 83       	std	Y+5, r24	; 0x05
    26b0:	0f c0       	rjmp	.+30     	; 0x26d0 <KEYPAD_getPressedKey+0x170>
    26b2:	88 ec       	ldi	r24, 0xC8	; 200
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	8b 83       	std	Y+3, r24	; 0x03
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <KEYPAD_getPressedKey+0x15e>
    26c2:	9c 83       	std	Y+4, r25	; 0x04
    26c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	9e 83       	std	Y+6, r25	; 0x06
    26ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	9e 81       	ldd	r25, Y+6	; 0x06
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	69 f7       	brne	.-38     	; 0x26b2 <KEYPAD_getPressedKey+0x152>
    26d8:	14 c0       	rjmp	.+40     	; 0x2702 <KEYPAD_getPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	6f 81       	ldd	r22, Y+7	; 0x07
    26dc:	78 85       	ldd	r23, Y+8	; 0x08
    26de:	89 85       	ldd	r24, Y+9	; 0x09
    26e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9e 83       	std	Y+6, r25	; 0x06
    26ec:	8d 83       	std	Y+5, r24	; 0x05
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <KEYPAD_getPressedKey+0x19a>
    26fe:	9a 83       	std	Y+2, r25	; 0x02
    2700:	89 83       	std	Y+1, r24	; 0x01
	}
	while(1){
		/* loop through the rows pins one by one each time setting the current one only
		 * as output and setting it with logic_high and other as input
		 */
		for(char row=0;row<KEYPAD_NUM_OF_ROWS;row++){
    2702:	88 89       	ldd	r24, Y+16	; 0x10
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	88 8b       	std	Y+16, r24	; 0x10
    2708:	88 89       	ldd	r24, Y+16	; 0x10
    270a:	84 30       	cpi	r24, 0x04	; 4
    270c:	08 f4       	brcc	.+2      	; 0x2710 <KEYPAD_getPressedKey+0x1b0>
    270e:	51 cf       	rjmp	.-350    	; 0x25b2 <KEYPAD_getPressedKey+0x52>
    2710:	4e cf       	rjmp	.-356    	; 0x25ae <KEYPAD_getPressedKey+0x4e>

00002712 <KEYPAD_4x4_adjustKeyNumber>:
		break;
	}
	return key_pressed;
}
#elif(KEYPAD_NUM_OF_COLUMNS==4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 key_number){
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	00 d0       	rcall	.+0      	; 0x2718 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2718:	00 d0       	rcall	.+0      	; 0x271a <KEYPAD_4x4_adjustKeyNumber+0x8>
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key_pressed=key_number;
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
	switch(key_number){
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	3c 83       	std	Y+4, r19	; 0x04
    272c:	2b 83       	std	Y+3, r18	; 0x03
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	88 30       	cpi	r24, 0x08	; 8
    2734:	91 05       	cpc	r25, r1
    2736:	09 f4       	brne	.+2      	; 0x273a <KEYPAD_4x4_adjustKeyNumber+0x28>
    2738:	70 c0       	rjmp	.+224    	; 0x281a <KEYPAD_4x4_adjustKeyNumber+0x108>
    273a:	2b 81       	ldd	r18, Y+3	; 0x03
    273c:	3c 81       	ldd	r19, Y+4	; 0x04
    273e:	29 30       	cpi	r18, 0x09	; 9
    2740:	31 05       	cpc	r19, r1
    2742:	5c f5       	brge	.+86     	; 0x279a <KEYPAD_4x4_adjustKeyNumber+0x88>
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	84 30       	cpi	r24, 0x04	; 4
    274a:	91 05       	cpc	r25, r1
    274c:	09 f4       	brne	.+2      	; 0x2750 <KEYPAD_4x4_adjustKeyNumber+0x3e>
    274e:	59 c0       	rjmp	.+178    	; 0x2802 <KEYPAD_4x4_adjustKeyNumber+0xf0>
    2750:	2b 81       	ldd	r18, Y+3	; 0x03
    2752:	3c 81       	ldd	r19, Y+4	; 0x04
    2754:	25 30       	cpi	r18, 0x05	; 5
    2756:	31 05       	cpc	r19, r1
    2758:	9c f4       	brge	.+38     	; 0x2780 <KEYPAD_4x4_adjustKeyNumber+0x6e>
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	82 30       	cpi	r24, 0x02	; 2
    2760:	91 05       	cpc	r25, r1
    2762:	09 f4       	brne	.+2      	; 0x2766 <KEYPAD_4x4_adjustKeyNumber+0x54>
    2764:	48 c0       	rjmp	.+144    	; 0x27f6 <KEYPAD_4x4_adjustKeyNumber+0xe4>
    2766:	2b 81       	ldd	r18, Y+3	; 0x03
    2768:	3c 81       	ldd	r19, Y+4	; 0x04
    276a:	23 30       	cpi	r18, 0x03	; 3
    276c:	31 05       	cpc	r19, r1
    276e:	0c f0       	brlt	.+2      	; 0x2772 <KEYPAD_4x4_adjustKeyNumber+0x60>
    2770:	45 c0       	rjmp	.+138    	; 0x27fc <KEYPAD_4x4_adjustKeyNumber+0xea>
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	81 30       	cpi	r24, 0x01	; 1
    2778:	91 05       	cpc	r25, r1
    277a:	09 f4       	brne	.+2      	; 0x277e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    277c:	39 c0       	rjmp	.+114    	; 0x27f0 <KEYPAD_4x4_adjustKeyNumber+0xde>
    277e:	66 c0       	rjmp	.+204    	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2780:	2b 81       	ldd	r18, Y+3	; 0x03
    2782:	3c 81       	ldd	r19, Y+4	; 0x04
    2784:	26 30       	cpi	r18, 0x06	; 6
    2786:	31 05       	cpc	r19, r1
    2788:	09 f4       	brne	.+2      	; 0x278c <KEYPAD_4x4_adjustKeyNumber+0x7a>
    278a:	41 c0       	rjmp	.+130    	; 0x280e <KEYPAD_4x4_adjustKeyNumber+0xfc>
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	9c 81       	ldd	r25, Y+4	; 0x04
    2790:	87 30       	cpi	r24, 0x07	; 7
    2792:	91 05       	cpc	r25, r1
    2794:	0c f0       	brlt	.+2      	; 0x2798 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2796:	3e c0       	rjmp	.+124    	; 0x2814 <KEYPAD_4x4_adjustKeyNumber+0x102>
    2798:	37 c0       	rjmp	.+110    	; 0x2808 <KEYPAD_4x4_adjustKeyNumber+0xf6>
    279a:	2b 81       	ldd	r18, Y+3	; 0x03
    279c:	3c 81       	ldd	r19, Y+4	; 0x04
    279e:	2c 30       	cpi	r18, 0x0C	; 12
    27a0:	31 05       	cpc	r19, r1
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <KEYPAD_4x4_adjustKeyNumber+0x94>
    27a4:	46 c0       	rjmp	.+140    	; 0x2832 <KEYPAD_4x4_adjustKeyNumber+0x120>
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	8d 30       	cpi	r24, 0x0D	; 13
    27ac:	91 05       	cpc	r25, r1
    27ae:	5c f4       	brge	.+22     	; 0x27c6 <KEYPAD_4x4_adjustKeyNumber+0xb4>
    27b0:	2b 81       	ldd	r18, Y+3	; 0x03
    27b2:	3c 81       	ldd	r19, Y+4	; 0x04
    27b4:	2a 30       	cpi	r18, 0x0A	; 10
    27b6:	31 05       	cpc	r19, r1
    27b8:	b1 f1       	breq	.+108    	; 0x2826 <KEYPAD_4x4_adjustKeyNumber+0x114>
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	8b 30       	cpi	r24, 0x0B	; 11
    27c0:	91 05       	cpc	r25, r1
    27c2:	a4 f5       	brge	.+104    	; 0x282c <KEYPAD_4x4_adjustKeyNumber+0x11a>
    27c4:	2d c0       	rjmp	.+90     	; 0x2820 <KEYPAD_4x4_adjustKeyNumber+0x10e>
    27c6:	2b 81       	ldd	r18, Y+3	; 0x03
    27c8:	3c 81       	ldd	r19, Y+4	; 0x04
    27ca:	2e 30       	cpi	r18, 0x0E	; 14
    27cc:	31 05       	cpc	r19, r1
    27ce:	b9 f1       	breq	.+110    	; 0x283e <KEYPAD_4x4_adjustKeyNumber+0x12c>
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	8e 30       	cpi	r24, 0x0E	; 14
    27d6:	91 05       	cpc	r25, r1
    27d8:	7c f1       	brlt	.+94     	; 0x2838 <KEYPAD_4x4_adjustKeyNumber+0x126>
    27da:	2b 81       	ldd	r18, Y+3	; 0x03
    27dc:	3c 81       	ldd	r19, Y+4	; 0x04
    27de:	2f 30       	cpi	r18, 0x0F	; 15
    27e0:	31 05       	cpc	r19, r1
    27e2:	79 f1       	breq	.+94     	; 0x2842 <KEYPAD_4x4_adjustKeyNumber+0x130>
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	80 31       	cpi	r24, 0x10	; 16
    27ea:	91 05       	cpc	r25, r1
    27ec:	69 f1       	breq	.+90     	; 0x2848 <KEYPAD_4x4_adjustKeyNumber+0x136>
    27ee:	2e c0       	rjmp	.+92     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case 1:
		key_pressed=7;
    27f0:	87 e0       	ldi	r24, 0x07	; 7
    27f2:	89 83       	std	Y+1, r24	; 0x01
    27f4:	2b c0       	rjmp	.+86     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 2:
		key_pressed=8;
    27f6:	88 e0       	ldi	r24, 0x08	; 8
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	28 c0       	rjmp	.+80     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 3:
		key_pressed=9;
    27fc:	89 e0       	ldi	r24, 0x09	; 9
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	25 c0       	rjmp	.+74     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 4:
		key_pressed='%';
    2802:	85 e2       	ldi	r24, 0x25	; 37
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	22 c0       	rjmp	.+68     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 5:
		key_pressed=4;
    2808:	84 e0       	ldi	r24, 0x04	; 4
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	1f c0       	rjmp	.+62     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 6:
		key_pressed=5;
    280e:	85 e0       	ldi	r24, 0x05	; 5
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	1c c0       	rjmp	.+56     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 7:
		key_pressed=6;
    2814:	86 e0       	ldi	r24, 0x06	; 6
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	19 c0       	rjmp	.+50     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 8:
		key_pressed='*';
    281a:	8a e2       	ldi	r24, 0x2A	; 42
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	16 c0       	rjmp	.+44     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 9:
		key_pressed=1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	13 c0       	rjmp	.+38     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 10:
		key_pressed=2;
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	10 c0       	rjmp	.+32     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 11:
		key_pressed=3;
    282c:	83 e0       	ldi	r24, 0x03	; 3
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	0d c0       	rjmp	.+26     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 12:
		key_pressed='-';
    2832:	8d e2       	ldi	r24, 0x2D	; 45
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	0a c0       	rjmp	.+20     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 13:
		key_pressed=13;
    2838:	8d e0       	ldi	r24, 0x0D	; 13
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	07 c0       	rjmp	.+14     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 14:
		key_pressed=0;
    283e:	19 82       	std	Y+1, r1	; 0x01
    2840:	05 c0       	rjmp	.+10     	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 15:
		key_pressed='=';
    2842:	8d e3       	ldi	r24, 0x3D	; 61
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	02 c0       	rjmp	.+4      	; 0x284c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		break;
	case 16:
		key_pressed='+';
    2848:	8b e2       	ldi	r24, 0x2B	; 43
    284a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return key_pressed;
    284c:	89 81       	ldd	r24, Y+1	; 0x01
}
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <LCD_sendCommand>:


/*
 * send command to lcd
 */
void LCD_sendCommand(uint8 command){
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	cd 54       	subi	r28, 0x4D	; 77
    286a:	d0 40       	sbci	r29, 0x00	; 0
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	fe 01       	movw	r30, r28
    2878:	e3 5b       	subi	r30, 0xB3	; 179
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT,LCD_RS,0);
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	0e 94 5d 10 	call	0x20ba	; 0x20ba <GPIO_writePin>
    2888:	fe 01       	movw	r30, r28
    288a:	e7 5b       	subi	r30, 0xB7	; 183
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e8       	ldi	r26, 0x80	; 128
    2894:	bf e3       	ldi	r27, 0x3F	; 63
    2896:	80 83       	st	Z, r24
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	a2 83       	std	Z+2, r26	; 0x02
    289c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	8e 01       	movw	r16, r28
    28a0:	0b 5b       	subi	r16, 0xBB	; 187
    28a2:	1f 4f       	sbci	r17, 0xFF	; 255
    28a4:	fe 01       	movw	r30, r28
    28a6:	e7 5b       	subi	r30, 0xB7	; 183
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a ef       	ldi	r20, 0xFA	; 250
    28b8:	54 e4       	ldi	r21, 0x44	; 68
    28ba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	f8 01       	movw	r30, r16
    28c4:	80 83       	st	Z, r24
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	a2 83       	std	Z+2, r26	; 0x02
    28ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28cc:	fe 01       	movw	r30, r28
    28ce:	eb 5b       	subi	r30, 0xBB	; 187
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	44 f4       	brge	.+16     	; 0x28fa <LCD_sendCommand+0x9e>
		__ticks = 1;
    28ea:	fe 01       	movw	r30, r28
    28ec:	ed 5b       	subi	r30, 0xBD	; 189
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
    28f8:	64 c0       	rjmp	.+200    	; 0x29c2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    28fa:	fe 01       	movw	r30, r28
    28fc:	eb 5b       	subi	r30, 0xBB	; 187
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	3f ef       	ldi	r19, 0xFF	; 255
    290c:	4f e7       	ldi	r20, 0x7F	; 127
    290e:	57 e4       	ldi	r21, 0x47	; 71
    2910:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2914:	18 16       	cp	r1, r24
    2916:	0c f0       	brlt	.+2      	; 0x291a <LCD_sendCommand+0xbe>
    2918:	43 c0       	rjmp	.+134    	; 0x29a0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	fe 01       	movw	r30, r28
    291c:	e7 5b       	subi	r30, 0xB7	; 183
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e2       	ldi	r20, 0x20	; 32
    292e:	51 e4       	ldi	r21, 0x41	; 65
    2930:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8e 01       	movw	r16, r28
    293a:	0d 5b       	subi	r16, 0xBD	; 189
    293c:	1f 4f       	sbci	r17, 0xFF	; 255
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	f8 01       	movw	r30, r16
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	1f c0       	rjmp	.+62     	; 0x2990 <LCD_sendCommand+0x134>
    2952:	fe 01       	movw	r30, r28
    2954:	ef 5b       	subi	r30, 0xBF	; 191
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	88 ec       	ldi	r24, 0xC8	; 200
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	91 83       	std	Z+1, r25	; 0x01
    295e:	80 83       	st	Z, r24
    2960:	fe 01       	movw	r30, r28
    2962:	ef 5b       	subi	r30, 0xBF	; 191
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_sendCommand+0x10e>
    296e:	fe 01       	movw	r30, r28
    2970:	ef 5b       	subi	r30, 0xBF	; 191
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2978:	de 01       	movw	r26, r28
    297a:	ad 5b       	subi	r26, 0xBD	; 189
    297c:	bf 4f       	sbci	r27, 0xFF	; 255
    297e:	fe 01       	movw	r30, r28
    2980:	ed 5b       	subi	r30, 0xBD	; 189
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	91 81       	ldd	r25, Z+1	; 0x01
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	11 96       	adiw	r26, 0x01	; 1
    298c:	9c 93       	st	X, r25
    298e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2990:	fe 01       	movw	r30, r28
    2992:	ed 5b       	subi	r30, 0xBD	; 189
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	d1 f6       	brne	.-76     	; 0x2952 <LCD_sendCommand+0xf6>
    299e:	24 c0       	rjmp	.+72     	; 0x29e8 <LCD_sendCommand+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a0:	8e 01       	movw	r16, r28
    29a2:	0d 5b       	subi	r16, 0xBD	; 189
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	fe 01       	movw	r30, r28
    29a8:	eb 5b       	subi	r30, 0xBB	; 187
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	f8 01       	movw	r30, r16
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	fe 01       	movw	r30, r28
    29c4:	ed 5b       	subi	r30, 0xBD	; 189
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	fe 01       	movw	r30, r28
    29ce:	ff 96       	adiw	r30, 0x3f	; 63
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	fe 01       	movw	r30, r28
    29d6:	ff 96       	adiw	r30, 0x3f	; 63
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <LCD_sendCommand+0x180>
    29e0:	fe 01       	movw	r30, r28
    29e2:	ff 96       	adiw	r30, 0x3f	; 63
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,1);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	61 e0       	ldi	r22, 0x01	; 1
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 5d 10 	call	0x20ba	; 0x20ba <GPIO_writePin>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e8       	ldi	r26, 0x80	; 128
    29f8:	bf e3       	ldi	r27, 0x3F	; 63
    29fa:	8b af       	std	Y+59, r24	; 0x3b
    29fc:	9c af       	std	Y+60, r25	; 0x3c
    29fe:	ad af       	std	Y+61, r26	; 0x3d
    2a00:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a02:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a04:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	4a ef       	ldi	r20, 0xFA	; 250
    2a10:	54 e4       	ldi	r21, 0x44	; 68
    2a12:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	8f ab       	std	Y+55, r24	; 0x37
    2a1c:	98 af       	std	Y+56, r25	; 0x38
    2a1e:	a9 af       	std	Y+57, r26	; 0x39
    2a20:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2a22:	6f a9       	ldd	r22, Y+55	; 0x37
    2a24:	78 ad       	ldd	r23, Y+56	; 0x38
    2a26:	89 ad       	ldd	r24, Y+57	; 0x39
    2a28:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e8       	ldi	r20, 0x80	; 128
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2a36:	88 23       	and	r24, r24
    2a38:	2c f4       	brge	.+10     	; 0x2a44 <LCD_sendCommand+0x1e8>
		__ticks = 1;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9e ab       	std	Y+54, r25	; 0x36
    2a40:	8d ab       	std	Y+53, r24	; 0x35
    2a42:	3f c0       	rjmp	.+126    	; 0x2ac2 <LCD_sendCommand+0x266>
	else if (__tmp > 65535)
    2a44:	6f a9       	ldd	r22, Y+55	; 0x37
    2a46:	78 ad       	ldd	r23, Y+56	; 0x38
    2a48:	89 ad       	ldd	r24, Y+57	; 0x39
    2a4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	3f ef       	ldi	r19, 0xFF	; 255
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	57 e4       	ldi	r21, 0x47	; 71
    2a54:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	4c f5       	brge	.+82     	; 0x2aae <LCD_sendCommand+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a5e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a60:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a62:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9e ab       	std	Y+54, r25	; 0x36
    2a82:	8d ab       	std	Y+53, r24	; 0x35
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <LCD_sendCommand+0x248>
    2a86:	88 ec       	ldi	r24, 0xC8	; 200
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	9c ab       	std	Y+52, r25	; 0x34
    2a8c:	8b ab       	std	Y+51, r24	; 0x33
    2a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a90:	9c a9       	ldd	r25, Y+52	; 0x34
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <LCD_sendCommand+0x236>
    2a96:	9c ab       	std	Y+52, r25	; 0x34
    2a98:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	8d a9       	ldd	r24, Y+53	; 0x35
    2a9c:	9e a9       	ldd	r25, Y+54	; 0x36
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	9e ab       	std	Y+54, r25	; 0x36
    2aa2:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa4:	8d a9       	ldd	r24, Y+53	; 0x35
    2aa6:	9e a9       	ldd	r25, Y+54	; 0x36
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	69 f7       	brne	.-38     	; 0x2a86 <LCD_sendCommand+0x22a>
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <LCD_sendCommand+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aae:	6f a9       	ldd	r22, Y+55	; 0x37
    2ab0:	78 ad       	ldd	r23, Y+56	; 0x38
    2ab2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ab4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ab6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e ab       	std	Y+54, r25	; 0x36
    2ac0:	8d ab       	std	Y+53, r24	; 0x35
    2ac2:	8d a9       	ldd	r24, Y+53	; 0x35
    2ac4:	9e a9       	ldd	r25, Y+54	; 0x36
    2ac6:	9a ab       	std	Y+50, r25	; 0x32
    2ac8:	89 ab       	std	Y+49, r24	; 0x31
    2aca:	89 a9       	ldd	r24, Y+49	; 0x31
    2acc:	9a a9       	ldd	r25, Y+50	; 0x32
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <LCD_sendCommand+0x272>
    2ad2:	9a ab       	std	Y+50, r25	; 0x32
    2ad4:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);
#if(LCD_BIT_MODE==8)

	GPIO_writePort(LCD_DATA_PORT,command);
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e3 5b       	subi	r30, 0xB3	; 179
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	60 81       	ld	r22, Z
    2ae0:	0e 94 27 12 	call	0x244e	; 0x244e <GPIO_writePort>
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	a0 e8       	ldi	r26, 0x80	; 128
    2aea:	bf e3       	ldi	r27, 0x3F	; 63
    2aec:	8d a7       	std	Y+45, r24	; 0x2d
    2aee:	9e a7       	std	Y+46, r25	; 0x2e
    2af0:	af a7       	std	Y+47, r26	; 0x2f
    2af2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2af4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2af6:	7e a5       	ldd	r23, Y+46	; 0x2e
    2af8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afa:	98 a9       	ldd	r25, Y+48	; 0x30
    2afc:	2b ea       	ldi	r18, 0xAB	; 171
    2afe:	3a ea       	ldi	r19, 0xAA	; 170
    2b00:	4a e2       	ldi	r20, 0x2A	; 42
    2b02:	50 e4       	ldi	r21, 0x40	; 64
    2b04:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	89 a7       	std	Y+41, r24	; 0x29
    2b0e:	9a a7       	std	Y+42, r25	; 0x2a
    2b10:	ab a7       	std	Y+43, r26	; 0x2b
    2b12:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2b14:	69 a5       	ldd	r22, Y+41	; 0x29
    2b16:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e8       	ldi	r20, 0x80	; 128
    2b22:	5f e3       	ldi	r21, 0x3F	; 63
    2b24:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2b28:	88 23       	and	r24, r24
    2b2a:	1c f4       	brge	.+6      	; 0x2b32 <LCD_sendCommand+0x2d6>
		__ticks = 1;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	88 a7       	std	Y+40, r24	; 0x28
    2b30:	91 c0       	rjmp	.+290    	; 0x2c54 <LCD_sendCommand+0x3f8>
	else if (__tmp > 255)
    2b32:	69 a5       	ldd	r22, Y+41	; 0x29
    2b34:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b38:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	53 e4       	ldi	r21, 0x43	; 67
    2b42:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	0c f0       	brlt	.+2      	; 0x2b4c <LCD_sendCommand+0x2f0>
    2b4a:	7b c0       	rjmp	.+246    	; 0x2c42 <LCD_sendCommand+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    2b4c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b4e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b52:	98 a9       	ldd	r25, Y+48	; 0x30
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	4a e7       	ldi	r20, 0x7A	; 122
    2b5a:	54 e4       	ldi	r21, 0x44	; 68
    2b5c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	8c a3       	std	Y+36, r24	; 0x24
    2b66:	9d a3       	std	Y+37, r25	; 0x25
    2b68:	ae a3       	std	Y+38, r26	; 0x26
    2b6a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	6c a1       	ldd	r22, Y+36	; 0x24
    2b6e:	7d a1       	ldd	r23, Y+37	; 0x25
    2b70:	8e a1       	ldd	r24, Y+38	; 0x26
    2b72:	9f a1       	ldd	r25, Y+39	; 0x27
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a ef       	ldi	r20, 0xFA	; 250
    2b7a:	54 e4       	ldi	r21, 0x44	; 68
    2b7c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	88 a3       	std	Y+32, r24	; 0x20
    2b86:	99 a3       	std	Y+33, r25	; 0x21
    2b88:	aa a3       	std	Y+34, r26	; 0x22
    2b8a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b8c:	68 a1       	ldd	r22, Y+32	; 0x20
    2b8e:	79 a1       	ldd	r23, Y+33	; 0x21
    2b90:	8a a1       	ldd	r24, Y+34	; 0x22
    2b92:	9b a1       	ldd	r25, Y+35	; 0x23
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <LCD_sendCommand+0x352>
		__ticks = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9f 8f       	std	Y+31, r25	; 0x1f
    2baa:	8e 8f       	std	Y+30, r24	; 0x1e
    2bac:	3f c0       	rjmp	.+126    	; 0x2c2c <LCD_sendCommand+0x3d0>
	else if (__tmp > 65535)
    2bae:	68 a1       	ldd	r22, Y+32	; 0x20
    2bb0:	79 a1       	ldd	r23, Y+33	; 0x21
    2bb2:	8a a1       	ldd	r24, Y+34	; 0x22
    2bb4:	9b a1       	ldd	r25, Y+35	; 0x23
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	4c f5       	brge	.+82     	; 0x2c18 <LCD_sendCommand+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc6:	6c a1       	ldd	r22, Y+36	; 0x24
    2bc8:	7d a1       	ldd	r23, Y+37	; 0x25
    2bca:	8e a1       	ldd	r24, Y+38	; 0x26
    2bcc:	9f a1       	ldd	r25, Y+39	; 0x27
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e2       	ldi	r20, 0x20	; 32
    2bd4:	51 e4       	ldi	r21, 0x41	; 65
    2bd6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9f 8f       	std	Y+31, r25	; 0x1f
    2bec:	8e 8f       	std	Y+30, r24	; 0x1e
    2bee:	0f c0       	rjmp	.+30     	; 0x2c0e <LCD_sendCommand+0x3b2>
    2bf0:	88 ec       	ldi	r24, 0xC8	; 200
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9d 8f       	std	Y+29, r25	; 0x1d
    2bf6:	8c 8f       	std	Y+28, r24	; 0x1c
    2bf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_sendCommand+0x3a0>
    2c00:	9d 8f       	std	Y+29, r25	; 0x1d
    2c02:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	9f 8f       	std	Y+31, r25	; 0x1f
    2c0c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <LCD_sendCommand+0x394>
    2c16:	24 c0       	rjmp	.+72     	; 0x2c60 <LCD_sendCommand+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c18:	68 a1       	ldd	r22, Y+32	; 0x20
    2c1a:	79 a1       	ldd	r23, Y+33	; 0x21
    2c1c:	8a a1       	ldd	r24, Y+34	; 0x22
    2c1e:	9b a1       	ldd	r25, Y+35	; 0x23
    2c20:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9f 8f       	std	Y+31, r25	; 0x1f
    2c2a:	8e 8f       	std	Y+30, r24	; 0x1e
    2c2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c30:	9b 8f       	std	Y+27, r25	; 0x1b
    2c32:	8a 8f       	std	Y+26, r24	; 0x1a
    2c34:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c36:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <LCD_sendCommand+0x3dc>
    2c3c:	9b 8f       	std	Y+27, r25	; 0x1b
    2c3e:	8a 8f       	std	Y+26, r24	; 0x1a
    2c40:	0f c0       	rjmp	.+30     	; 0x2c60 <LCD_sendCommand+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c42:	69 a5       	ldd	r22, Y+41	; 0x29
    2c44:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c48:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c4a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	88 a7       	std	Y+40, r24	; 0x28
    2c54:	88 a5       	ldd	r24, Y+40	; 0x28
    2c56:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c58:	89 8d       	ldd	r24, Y+25	; 0x19
    2c5a:	8a 95       	dec	r24
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_sendCommand+0x3fe>
    2c5e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	0e 94 5d 10 	call	0x20ba	; 0x20ba <GPIO_writePin>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a0 e8       	ldi	r26, 0x80	; 128
    2c70:	bf e3       	ldi	r27, 0x3F	; 63
    2c72:	8d 8b       	std	Y+21, r24	; 0x15
    2c74:	9e 8b       	std	Y+22, r25	; 0x16
    2c76:	af 8b       	std	Y+23, r26	; 0x17
    2c78:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c80:	98 8d       	ldd	r25, Y+24	; 0x18
    2c82:	2b ea       	ldi	r18, 0xAB	; 171
    2c84:	3a ea       	ldi	r19, 0xAA	; 170
    2c86:	4a e2       	ldi	r20, 0x2A	; 42
    2c88:	50 e4       	ldi	r21, 0x40	; 64
    2c8a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	89 8b       	std	Y+17, r24	; 0x11
    2c94:	9a 8b       	std	Y+18, r25	; 0x12
    2c96:	ab 8b       	std	Y+19, r26	; 0x13
    2c98:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c9a:	69 89       	ldd	r22, Y+17	; 0x11
    2c9c:	7a 89       	ldd	r23, Y+18	; 0x12
    2c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e8       	ldi	r20, 0x80	; 128
    2ca8:	5f e3       	ldi	r21, 0x3F	; 63
    2caa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	1c f4       	brge	.+6      	; 0x2cb8 <LCD_sendCommand+0x45c>
		__ticks = 1;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	88 8b       	std	Y+16, r24	; 0x10
    2cb6:	91 c0       	rjmp	.+290    	; 0x2dda <LCD_sendCommand+0x57e>
	else if (__tmp > 255)
    2cb8:	69 89       	ldd	r22, Y+17	; 0x11
    2cba:	7a 89       	ldd	r23, Y+18	; 0x12
    2cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4f e7       	ldi	r20, 0x7F	; 127
    2cc6:	53 e4       	ldi	r21, 0x43	; 67
    2cc8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	0c f0       	brlt	.+2      	; 0x2cd2 <LCD_sendCommand+0x476>
    2cd0:	7b c0       	rjmp	.+246    	; 0x2dc8 <LCD_sendCommand+0x56c>
	{
		_delay_ms(__us / 1000.0);
    2cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	4a e7       	ldi	r20, 0x7A	; 122
    2ce0:	54 e4       	ldi	r21, 0x44	; 68
    2ce2:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8c 87       	std	Y+12, r24	; 0x0c
    2cec:	9d 87       	std	Y+13, r25	; 0x0d
    2cee:	ae 87       	std	Y+14, r26	; 0x0e
    2cf0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cf4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	4a ef       	ldi	r20, 0xFA	; 250
    2d00:	54 e4       	ldi	r21, 0x44	; 68
    2d02:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	88 87       	std	Y+8, r24	; 0x08
    2d0c:	99 87       	std	Y+9, r25	; 0x09
    2d0e:	aa 87       	std	Y+10, r26	; 0x0a
    2d10:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d12:	68 85       	ldd	r22, Y+8	; 0x08
    2d14:	79 85       	ldd	r23, Y+9	; 0x09
    2d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e8       	ldi	r20, 0x80	; 128
    2d20:	5f e3       	ldi	r21, 0x3F	; 63
    2d22:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d26:	88 23       	and	r24, r24
    2d28:	2c f4       	brge	.+10     	; 0x2d34 <LCD_sendCommand+0x4d8>
		__ticks = 1;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	9f 83       	std	Y+7, r25	; 0x07
    2d30:	8e 83       	std	Y+6, r24	; 0x06
    2d32:	3f c0       	rjmp	.+126    	; 0x2db2 <LCD_sendCommand+0x556>
	else if (__tmp > 65535)
    2d34:	68 85       	ldd	r22, Y+8	; 0x08
    2d36:	79 85       	ldd	r23, Y+9	; 0x09
    2d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	3f ef       	ldi	r19, 0xFF	; 255
    2d40:	4f e7       	ldi	r20, 0x7F	; 127
    2d42:	57 e4       	ldi	r21, 0x47	; 71
    2d44:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d48:	18 16       	cp	r1, r24
    2d4a:	4c f5       	brge	.+82     	; 0x2d9e <LCD_sendCommand+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d50:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d52:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e2       	ldi	r20, 0x20	; 32
    2d5a:	51 e4       	ldi	r21, 0x41	; 65
    2d5c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	bc 01       	movw	r22, r24
    2d66:	cd 01       	movw	r24, r26
    2d68:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	9f 83       	std	Y+7, r25	; 0x07
    2d72:	8e 83       	std	Y+6, r24	; 0x06
    2d74:	0f c0       	rjmp	.+30     	; 0x2d94 <LCD_sendCommand+0x538>
    2d76:	88 ec       	ldi	r24, 0xC8	; 200
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9d 83       	std	Y+5, r25	; 0x05
    2d7c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d80:	9d 81       	ldd	r25, Y+5	; 0x05
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <LCD_sendCommand+0x526>
    2d86:	9d 83       	std	Y+5, r25	; 0x05
    2d88:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	9f 83       	std	Y+7, r25	; 0x07
    2d92:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d94:	8e 81       	ldd	r24, Y+6	; 0x06
    2d96:	9f 81       	ldd	r25, Y+7	; 0x07
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	69 f7       	brne	.-38     	; 0x2d76 <LCD_sendCommand+0x51a>
    2d9c:	24 c0       	rjmp	.+72     	; 0x2de6 <LCD_sendCommand+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9e:	68 85       	ldd	r22, Y+8	; 0x08
    2da0:	79 85       	ldd	r23, Y+9	; 0x09
    2da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2da6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	9f 83       	std	Y+7, r25	; 0x07
    2db0:	8e 83       	std	Y+6, r24	; 0x06
    2db2:	8e 81       	ldd	r24, Y+6	; 0x06
    2db4:	9f 81       	ldd	r25, Y+7	; 0x07
    2db6:	9b 83       	std	Y+3, r25	; 0x03
    2db8:	8a 83       	std	Y+2, r24	; 0x02
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <LCD_sendCommand+0x562>
    2dc2:	9b 83       	std	Y+3, r25	; 0x03
    2dc4:	8a 83       	std	Y+2, r24	; 0x02
    2dc6:	0f c0       	rjmp	.+30     	; 0x2de6 <LCD_sendCommand+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dc8:	69 89       	ldd	r22, Y+17	; 0x11
    2dca:	7a 89       	ldd	r23, Y+18	; 0x12
    2dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dce:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	88 8b       	std	Y+16, r24	; 0x10
    2dda:	88 89       	ldd	r24, Y+16	; 0x10
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	8a 95       	dec	r24
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <LCD_sendCommand+0x584>
    2de4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(command,3));
	_delay_ms(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
	_delay_ms(1);
#endif
}
    2de6:	c3 5b       	subi	r28, 0xB3	; 179
    2de8:	df 4f       	sbci	r29, 0xFF	; 255
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	08 95       	ret

00002dfe <LCD_displayChar>:
/*
 * To Write Character on lcd
 */
void LCD_displayChar(uint8 character){
    2dfe:	0f 93       	push	r16
    2e00:	1f 93       	push	r17
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	cd 54       	subi	r28, 0x4D	; 77
    2e0c:	d0 40       	sbci	r29, 0x00	; 0
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e3 5b       	subi	r30, 0xB3	; 179
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_EN_PORT,LCD_RS,1);
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	41 e0       	ldi	r20, 0x01	; 1
    2e26:	0e 94 5d 10 	call	0x20ba	; 0x20ba <GPIO_writePin>
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e7 5b       	subi	r30, 0xB7	; 183
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a0 e8       	ldi	r26, 0x80	; 128
    2e36:	bf e3       	ldi	r27, 0x3F	; 63
    2e38:	80 83       	st	Z, r24
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	a2 83       	std	Z+2, r26	; 0x02
    2e3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e40:	8e 01       	movw	r16, r28
    2e42:	0b 5b       	subi	r16, 0xBB	; 187
    2e44:	1f 4f       	sbci	r17, 0xFF	; 255
    2e46:	fe 01       	movw	r30, r28
    2e48:	e7 5b       	subi	r30, 0xB7	; 183
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	60 81       	ld	r22, Z
    2e4e:	71 81       	ldd	r23, Z+1	; 0x01
    2e50:	82 81       	ldd	r24, Z+2	; 0x02
    2e52:	93 81       	ldd	r25, Z+3	; 0x03
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a ef       	ldi	r20, 0xFA	; 250
    2e5a:	54 e4       	ldi	r21, 0x44	; 68
    2e5c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	f8 01       	movw	r30, r16
    2e66:	80 83       	st	Z, r24
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	a2 83       	std	Z+2, r26	; 0x02
    2e6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e6e:	fe 01       	movw	r30, r28
    2e70:	eb 5b       	subi	r30, 0xBB	; 187
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e8       	ldi	r20, 0x80	; 128
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2e88:	88 23       	and	r24, r24
    2e8a:	44 f4       	brge	.+16     	; 0x2e9c <LCD_displayChar+0x9e>
		__ticks = 1;
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ed 5b       	subi	r30, 0xBD	; 189
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	80 83       	st	Z, r24
    2e9a:	64 c0       	rjmp	.+200    	; 0x2f64 <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	eb 5b       	subi	r30, 0xBB	; 187
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	3f ef       	ldi	r19, 0xFF	; 255
    2eae:	4f e7       	ldi	r20, 0x7F	; 127
    2eb0:	57 e4       	ldi	r21, 0x47	; 71
    2eb2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2eb6:	18 16       	cp	r1, r24
    2eb8:	0c f0       	brlt	.+2      	; 0x2ebc <LCD_displayChar+0xbe>
    2eba:	43 c0       	rjmp	.+134    	; 0x2f42 <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e7 5b       	subi	r30, 0xB7	; 183
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	8e 01       	movw	r16, r28
    2edc:	0d 5b       	subi	r16, 0xBD	; 189
    2ede:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	f8 01       	movw	r30, r16
    2eee:	91 83       	std	Z+1, r25	; 0x01
    2ef0:	80 83       	st	Z, r24
    2ef2:	1f c0       	rjmp	.+62     	; 0x2f32 <LCD_displayChar+0x134>
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ef 5b       	subi	r30, 0xBF	; 191
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	88 ec       	ldi	r24, 0xC8	; 200
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f02:	fe 01       	movw	r30, r28
    2f04:	ef 5b       	subi	r30, 0xBF	; 191
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 81       	ld	r24, Z
    2f0a:	91 81       	ldd	r25, Z+1	; 0x01
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <LCD_displayChar+0x10e>
    2f10:	fe 01       	movw	r30, r28
    2f12:	ef 5b       	subi	r30, 0xBF	; 191
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1a:	de 01       	movw	r26, r28
    2f1c:	ad 5b       	subi	r26, 0xBD	; 189
    2f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f20:	fe 01       	movw	r30, r28
    2f22:	ed 5b       	subi	r30, 0xBD	; 189
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	11 96       	adiw	r26, 0x01	; 1
    2f2e:	9c 93       	st	X, r25
    2f30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f32:	fe 01       	movw	r30, r28
    2f34:	ed 5b       	subi	r30, 0xBD	; 189
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	d1 f6       	brne	.-76     	; 0x2ef4 <LCD_displayChar+0xf6>
    2f40:	24 c0       	rjmp	.+72     	; 0x2f8a <LCD_displayChar+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f42:	8e 01       	movw	r16, r28
    2f44:	0d 5b       	subi	r16, 0xBD	; 189
    2f46:	1f 4f       	sbci	r17, 0xFF	; 255
    2f48:	fe 01       	movw	r30, r28
    2f4a:	eb 5b       	subi	r30, 0xBB	; 187
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	f8 01       	movw	r30, r16
    2f60:	91 83       	std	Z+1, r25	; 0x01
    2f62:	80 83       	st	Z, r24
    2f64:	fe 01       	movw	r30, r28
    2f66:	ed 5b       	subi	r30, 0xBD	; 189
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ff 96       	adiw	r30, 0x3f	; 63
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	80 83       	st	Z, r24
    2f76:	fe 01       	movw	r30, r28
    2f78:	ff 96       	adiw	r30, 0x3f	; 63
    2f7a:	80 81       	ld	r24, Z
    2f7c:	91 81       	ldd	r25, Z+1	; 0x01
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <LCD_displayChar+0x180>
    2f82:	fe 01       	movw	r30, r28
    2f84:	ff 96       	adiw	r30, 0x3f	; 63
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,1);
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	61 e0       	ldi	r22, 0x01	; 1
    2f8e:	41 e0       	ldi	r20, 0x01	; 1
    2f90:	0e 94 5d 10 	call	0x20ba	; 0x20ba <GPIO_writePin>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	a0 e8       	ldi	r26, 0x80	; 128
    2f9a:	bf e3       	ldi	r27, 0x3F	; 63
    2f9c:	8b af       	std	Y+59, r24	; 0x3b
    2f9e:	9c af       	std	Y+60, r25	; 0x3c
    2fa0:	ad af       	std	Y+61, r26	; 0x3d
    2fa2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa4:	6b ad       	ldd	r22, Y+59	; 0x3b
    2fa6:	7c ad       	ldd	r23, Y+60	; 0x3c
    2fa8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2faa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	4a ef       	ldi	r20, 0xFA	; 250
    2fb2:	54 e4       	ldi	r21, 0x44	; 68
    2fb4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	8f ab       	std	Y+55, r24	; 0x37
    2fbe:	98 af       	std	Y+56, r25	; 0x38
    2fc0:	a9 af       	std	Y+57, r26	; 0x39
    2fc2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2fc4:	6f a9       	ldd	r22, Y+55	; 0x37
    2fc6:	78 ad       	ldd	r23, Y+56	; 0x38
    2fc8:	89 ad       	ldd	r24, Y+57	; 0x39
    2fca:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e8       	ldi	r20, 0x80	; 128
    2fd2:	5f e3       	ldi	r21, 0x3F	; 63
    2fd4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2fd8:	88 23       	and	r24, r24
    2fda:	2c f4       	brge	.+10     	; 0x2fe6 <LCD_displayChar+0x1e8>
		__ticks = 1;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9e ab       	std	Y+54, r25	; 0x36
    2fe2:	8d ab       	std	Y+53, r24	; 0x35
    2fe4:	3f c0       	rjmp	.+126    	; 0x3064 <LCD_displayChar+0x266>
	else if (__tmp > 65535)
    2fe6:	6f a9       	ldd	r22, Y+55	; 0x37
    2fe8:	78 ad       	ldd	r23, Y+56	; 0x38
    2fea:	89 ad       	ldd	r24, Y+57	; 0x39
    2fec:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	3f ef       	ldi	r19, 0xFF	; 255
    2ff2:	4f e7       	ldi	r20, 0x7F	; 127
    2ff4:	57 e4       	ldi	r21, 0x47	; 71
    2ff6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ffa:	18 16       	cp	r1, r24
    2ffc:	4c f5       	brge	.+82     	; 0x3050 <LCD_displayChar+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffe:	6b ad       	ldd	r22, Y+59	; 0x3b
    3000:	7c ad       	ldd	r23, Y+60	; 0x3c
    3002:	8d ad       	ldd	r24, Y+61	; 0x3d
    3004:	9e ad       	ldd	r25, Y+62	; 0x3e
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e2       	ldi	r20, 0x20	; 32
    300c:	51 e4       	ldi	r21, 0x41	; 65
    300e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	9e ab       	std	Y+54, r25	; 0x36
    3024:	8d ab       	std	Y+53, r24	; 0x35
    3026:	0f c0       	rjmp	.+30     	; 0x3046 <LCD_displayChar+0x248>
    3028:	88 ec       	ldi	r24, 0xC8	; 200
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9c ab       	std	Y+52, r25	; 0x34
    302e:	8b ab       	std	Y+51, r24	; 0x33
    3030:	8b a9       	ldd	r24, Y+51	; 0x33
    3032:	9c a9       	ldd	r25, Y+52	; 0x34
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <LCD_displayChar+0x236>
    3038:	9c ab       	std	Y+52, r25	; 0x34
    303a:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303c:	8d a9       	ldd	r24, Y+53	; 0x35
    303e:	9e a9       	ldd	r25, Y+54	; 0x36
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	9e ab       	std	Y+54, r25	; 0x36
    3044:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3046:	8d a9       	ldd	r24, Y+53	; 0x35
    3048:	9e a9       	ldd	r25, Y+54	; 0x36
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	69 f7       	brne	.-38     	; 0x3028 <LCD_displayChar+0x22a>
    304e:	14 c0       	rjmp	.+40     	; 0x3078 <LCD_displayChar+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3050:	6f a9       	ldd	r22, Y+55	; 0x37
    3052:	78 ad       	ldd	r23, Y+56	; 0x38
    3054:	89 ad       	ldd	r24, Y+57	; 0x39
    3056:	9a ad       	ldd	r25, Y+58	; 0x3a
    3058:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	9e ab       	std	Y+54, r25	; 0x36
    3062:	8d ab       	std	Y+53, r24	; 0x35
    3064:	8d a9       	ldd	r24, Y+53	; 0x35
    3066:	9e a9       	ldd	r25, Y+54	; 0x36
    3068:	9a ab       	std	Y+50, r25	; 0x32
    306a:	89 ab       	std	Y+49, r24	; 0x31
    306c:	89 a9       	ldd	r24, Y+49	; 0x31
    306e:	9a a9       	ldd	r25, Y+50	; 0x32
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <LCD_displayChar+0x272>
    3074:	9a ab       	std	Y+50, r25	; 0x32
    3076:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);
#if(LCD_BIT_MODE==8)
	GPIO_writePort(LCD_DATA_PORT,character);
    3078:	fe 01       	movw	r30, r28
    307a:	e3 5b       	subi	r30, 0xB3	; 179
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	60 81       	ld	r22, Z
    3082:	0e 94 27 12 	call	0x244e	; 0x244e <GPIO_writePort>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	a0 e8       	ldi	r26, 0x80	; 128
    308c:	bf e3       	ldi	r27, 0x3F	; 63
    308e:	8d a7       	std	Y+45, r24	; 0x2d
    3090:	9e a7       	std	Y+46, r25	; 0x2e
    3092:	af a7       	std	Y+47, r26	; 0x2f
    3094:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3096:	6d a5       	ldd	r22, Y+45	; 0x2d
    3098:	7e a5       	ldd	r23, Y+46	; 0x2e
    309a:	8f a5       	ldd	r24, Y+47	; 0x2f
    309c:	98 a9       	ldd	r25, Y+48	; 0x30
    309e:	2b ea       	ldi	r18, 0xAB	; 171
    30a0:	3a ea       	ldi	r19, 0xAA	; 170
    30a2:	4a e2       	ldi	r20, 0x2A	; 42
    30a4:	50 e4       	ldi	r21, 0x40	; 64
    30a6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	89 a7       	std	Y+41, r24	; 0x29
    30b0:	9a a7       	std	Y+42, r25	; 0x2a
    30b2:	ab a7       	std	Y+43, r26	; 0x2b
    30b4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    30b6:	69 a5       	ldd	r22, Y+41	; 0x29
    30b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    30ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    30bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e8       	ldi	r20, 0x80	; 128
    30c4:	5f e3       	ldi	r21, 0x3F	; 63
    30c6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	1c f4       	brge	.+6      	; 0x30d4 <LCD_displayChar+0x2d6>
		__ticks = 1;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	88 a7       	std	Y+40, r24	; 0x28
    30d2:	91 c0       	rjmp	.+290    	; 0x31f6 <LCD_displayChar+0x3f8>
	else if (__tmp > 255)
    30d4:	69 a5       	ldd	r22, Y+41	; 0x29
    30d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    30d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30da:	9c a5       	ldd	r25, Y+44	; 0x2c
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4f e7       	ldi	r20, 0x7F	; 127
    30e2:	53 e4       	ldi	r21, 0x43	; 67
    30e4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    30e8:	18 16       	cp	r1, r24
    30ea:	0c f0       	brlt	.+2      	; 0x30ee <LCD_displayChar+0x2f0>
    30ec:	7b c0       	rjmp	.+246    	; 0x31e4 <LCD_displayChar+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    30ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    30f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    30f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f4:	98 a9       	ldd	r25, Y+48	; 0x30
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	4a e7       	ldi	r20, 0x7A	; 122
    30fc:	54 e4       	ldi	r21, 0x44	; 68
    30fe:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	8c a3       	std	Y+36, r24	; 0x24
    3108:	9d a3       	std	Y+37, r25	; 0x25
    310a:	ae a3       	std	Y+38, r26	; 0x26
    310c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	6c a1       	ldd	r22, Y+36	; 0x24
    3110:	7d a1       	ldd	r23, Y+37	; 0x25
    3112:	8e a1       	ldd	r24, Y+38	; 0x26
    3114:	9f a1       	ldd	r25, Y+39	; 0x27
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a ef       	ldi	r20, 0xFA	; 250
    311c:	54 e4       	ldi	r21, 0x44	; 68
    311e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	88 a3       	std	Y+32, r24	; 0x20
    3128:	99 a3       	std	Y+33, r25	; 0x21
    312a:	aa a3       	std	Y+34, r26	; 0x22
    312c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    312e:	68 a1       	ldd	r22, Y+32	; 0x20
    3130:	79 a1       	ldd	r23, Y+33	; 0x21
    3132:	8a a1       	ldd	r24, Y+34	; 0x22
    3134:	9b a1       	ldd	r25, Y+35	; 0x23
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <LCD_displayChar+0x352>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9f 8f       	std	Y+31, r25	; 0x1f
    314c:	8e 8f       	std	Y+30, r24	; 0x1e
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <LCD_displayChar+0x3d0>
	else if (__tmp > 65535)
    3150:	68 a1       	ldd	r22, Y+32	; 0x20
    3152:	79 a1       	ldd	r23, Y+33	; 0x21
    3154:	8a a1       	ldd	r24, Y+34	; 0x22
    3156:	9b a1       	ldd	r25, Y+35	; 0x23
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <LCD_displayChar+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	6c a1       	ldd	r22, Y+36	; 0x24
    316a:	7d a1       	ldd	r23, Y+37	; 0x25
    316c:	8e a1       	ldd	r24, Y+38	; 0x26
    316e:	9f a1       	ldd	r25, Y+39	; 0x27
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9f 8f       	std	Y+31, r25	; 0x1f
    318e:	8e 8f       	std	Y+30, r24	; 0x1e
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <LCD_displayChar+0x3b2>
    3192:	88 ec       	ldi	r24, 0xC8	; 200
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9d 8f       	std	Y+29, r25	; 0x1d
    3198:	8c 8f       	std	Y+28, r24	; 0x1c
    319a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    319c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <LCD_displayChar+0x3a0>
    31a2:	9d 8f       	std	Y+29, r25	; 0x1d
    31a4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	9f 8f       	std	Y+31, r25	; 0x1f
    31ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <LCD_displayChar+0x394>
    31b8:	24 c0       	rjmp	.+72     	; 0x3202 <LCD_displayChar+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	68 a1       	ldd	r22, Y+32	; 0x20
    31bc:	79 a1       	ldd	r23, Y+33	; 0x21
    31be:	8a a1       	ldd	r24, Y+34	; 0x22
    31c0:	9b a1       	ldd	r25, Y+35	; 0x23
    31c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9f 8f       	std	Y+31, r25	; 0x1f
    31cc:	8e 8f       	std	Y+30, r24	; 0x1e
    31ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31d2:	9b 8f       	std	Y+27, r25	; 0x1b
    31d4:	8a 8f       	std	Y+26, r24	; 0x1a
    31d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <LCD_displayChar+0x3dc>
    31de:	9b 8f       	std	Y+27, r25	; 0x1b
    31e0:	8a 8f       	std	Y+26, r24	; 0x1a
    31e2:	0f c0       	rjmp	.+30     	; 0x3202 <LCD_displayChar+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31e4:	69 a5       	ldd	r22, Y+41	; 0x29
    31e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    31e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	88 a7       	std	Y+40, r24	; 0x28
    31f6:	88 a5       	ldd	r24, Y+40	; 0x28
    31f8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31fa:	89 8d       	ldd	r24, Y+25	; 0x19
    31fc:	8a 95       	dec	r24
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <LCD_displayChar+0x3fe>
    3200:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,0);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	61 e0       	ldi	r22, 0x01	; 1
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 5d 10 	call	0x20ba	; 0x20ba <GPIO_writePin>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e8       	ldi	r26, 0x80	; 128
    3212:	bf e3       	ldi	r27, 0x3F	; 63
    3214:	8d 8b       	std	Y+21, r24	; 0x15
    3216:	9e 8b       	std	Y+22, r25	; 0x16
    3218:	af 8b       	std	Y+23, r26	; 0x17
    321a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    321c:	6d 89       	ldd	r22, Y+21	; 0x15
    321e:	7e 89       	ldd	r23, Y+22	; 0x16
    3220:	8f 89       	ldd	r24, Y+23	; 0x17
    3222:	98 8d       	ldd	r25, Y+24	; 0x18
    3224:	2b ea       	ldi	r18, 0xAB	; 171
    3226:	3a ea       	ldi	r19, 0xAA	; 170
    3228:	4a e2       	ldi	r20, 0x2A	; 42
    322a:	50 e4       	ldi	r21, 0x40	; 64
    322c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	89 8b       	std	Y+17, r24	; 0x11
    3236:	9a 8b       	std	Y+18, r25	; 0x12
    3238:	ab 8b       	std	Y+19, r26	; 0x13
    323a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    323c:	69 89       	ldd	r22, Y+17	; 0x11
    323e:	7a 89       	ldd	r23, Y+18	; 0x12
    3240:	8b 89       	ldd	r24, Y+19	; 0x13
    3242:	9c 89       	ldd	r25, Y+20	; 0x14
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5f e3       	ldi	r21, 0x3F	; 63
    324c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3250:	88 23       	and	r24, r24
    3252:	1c f4       	brge	.+6      	; 0x325a <LCD_displayChar+0x45c>
		__ticks = 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	88 8b       	std	Y+16, r24	; 0x10
    3258:	91 c0       	rjmp	.+290    	; 0x337c <LCD_displayChar+0x57e>
	else if (__tmp > 255)
    325a:	69 89       	ldd	r22, Y+17	; 0x11
    325c:	7a 89       	ldd	r23, Y+18	; 0x12
    325e:	8b 89       	ldd	r24, Y+19	; 0x13
    3260:	9c 89       	ldd	r25, Y+20	; 0x14
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	53 e4       	ldi	r21, 0x43	; 67
    326a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	0c f0       	brlt	.+2      	; 0x3274 <LCD_displayChar+0x476>
    3272:	7b c0       	rjmp	.+246    	; 0x336a <LCD_displayChar+0x56c>
	{
		_delay_ms(__us / 1000.0);
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	4a e7       	ldi	r20, 0x7A	; 122
    3282:	54 e4       	ldi	r21, 0x44	; 68
    3284:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	8c 87       	std	Y+12, r24	; 0x0c
    328e:	9d 87       	std	Y+13, r25	; 0x0d
    3290:	ae 87       	std	Y+14, r26	; 0x0e
    3292:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	6c 85       	ldd	r22, Y+12	; 0x0c
    3296:	7d 85       	ldd	r23, Y+13	; 0x0d
    3298:	8e 85       	ldd	r24, Y+14	; 0x0e
    329a:	9f 85       	ldd	r25, Y+15	; 0x0f
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	4a ef       	ldi	r20, 0xFA	; 250
    32a2:	54 e4       	ldi	r21, 0x44	; 68
    32a4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	88 87       	std	Y+8, r24	; 0x08
    32ae:	99 87       	std	Y+9, r25	; 0x09
    32b0:	aa 87       	std	Y+10, r26	; 0x0a
    32b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32b4:	68 85       	ldd	r22, Y+8	; 0x08
    32b6:	79 85       	ldd	r23, Y+9	; 0x09
    32b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	2c f4       	brge	.+10     	; 0x32d6 <LCD_displayChar+0x4d8>
		__ticks = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9f 83       	std	Y+7, r25	; 0x07
    32d2:	8e 83       	std	Y+6, r24	; 0x06
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <LCD_displayChar+0x556>
	else if (__tmp > 65535)
    32d6:	68 85       	ldd	r22, Y+8	; 0x08
    32d8:	79 85       	ldd	r23, Y+9	; 0x09
    32da:	8a 85       	ldd	r24, Y+10	; 0x0a
    32dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	4f e7       	ldi	r20, 0x7F	; 127
    32e4:	57 e4       	ldi	r21, 0x47	; 71
    32e6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	4c f5       	brge	.+82     	; 0x3340 <LCD_displayChar+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    32f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    32f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9f 83       	std	Y+7, r25	; 0x07
    3314:	8e 83       	std	Y+6, r24	; 0x06
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <LCD_displayChar+0x538>
    3318:	88 ec       	ldi	r24, 0xC8	; 200
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9d 83       	std	Y+5, r25	; 0x05
    331e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3320:	8c 81       	ldd	r24, Y+4	; 0x04
    3322:	9d 81       	ldd	r25, Y+5	; 0x05
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <LCD_displayChar+0x526>
    3328:	9d 83       	std	Y+5, r25	; 0x05
    332a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	8e 81       	ldd	r24, Y+6	; 0x06
    332e:	9f 81       	ldd	r25, Y+7	; 0x07
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	9f 83       	std	Y+7, r25	; 0x07
    3334:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3336:	8e 81       	ldd	r24, Y+6	; 0x06
    3338:	9f 81       	ldd	r25, Y+7	; 0x07
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	69 f7       	brne	.-38     	; 0x3318 <LCD_displayChar+0x51a>
    333e:	24 c0       	rjmp	.+72     	; 0x3388 <LCD_displayChar+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	68 85       	ldd	r22, Y+8	; 0x08
    3342:	79 85       	ldd	r23, Y+9	; 0x09
    3344:	8a 85       	ldd	r24, Y+10	; 0x0a
    3346:	9b 85       	ldd	r25, Y+11	; 0x0b
    3348:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9f 83       	std	Y+7, r25	; 0x07
    3352:	8e 83       	std	Y+6, r24	; 0x06
    3354:	8e 81       	ldd	r24, Y+6	; 0x06
    3356:	9f 81       	ldd	r25, Y+7	; 0x07
    3358:	9b 83       	std	Y+3, r25	; 0x03
    335a:	8a 83       	std	Y+2, r24	; 0x02
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <LCD_displayChar+0x562>
    3364:	9b 83       	std	Y+3, r25	; 0x03
    3366:	8a 83       	std	Y+2, r24	; 0x02
    3368:	0f c0       	rjmp	.+30     	; 0x3388 <LCD_displayChar+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    336a:	69 89       	ldd	r22, Y+17	; 0x11
    336c:	7a 89       	ldd	r23, Y+18	; 0x12
    336e:	8b 89       	ldd	r24, Y+19	; 0x13
    3370:	9c 89       	ldd	r25, Y+20	; 0x14
    3372:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	88 8b       	std	Y+16, r24	; 0x10
    337c:	88 89       	ldd	r24, Y+16	; 0x10
    337e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	8a 95       	dec	r24
    3384:	f1 f7       	brne	.-4      	; 0x3382 <LCD_displayChar+0x584>
    3386:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(character,3));
	_delay_ms(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
	_delay_ms(1);
#endif
}
    3388:	c3 5b       	subi	r28, 0xB3	; 179
    338a:	df 4f       	sbci	r29, 0xFF	; 255
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	cf 91       	pop	r28
    3398:	df 91       	pop	r29
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	08 95       	ret

000033a0 <LCD_init>:
/*
 * TO initialize lcd
 */
void LCD_init(void){
    33a0:	df 93       	push	r29
    33a2:	cf 93       	push	r28
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	2e 97       	sbiw	r28, 0x0e	; 14
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS,PIN_OUTPUT);
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT,LCD_ENABLE,PIN_OUTPUT);
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_setupPinDirection>
#if(LCD_BIT_MODE==8)
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	6f ef       	ldi	r22, 0xFF	; 255
    33cc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <GPIO_setupPortDirection>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	a0 ea       	ldi	r26, 0xA0	; 160
    33d6:	b1 e4       	ldi	r27, 0x41	; 65
    33d8:	8b 87       	std	Y+11, r24	; 0x0b
    33da:	9c 87       	std	Y+12, r25	; 0x0c
    33dc:	ad 87       	std	Y+13, r26	; 0x0d
    33de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	4a ef       	ldi	r20, 0xFA	; 250
    33ee:	54 e4       	ldi	r21, 0x44	; 68
    33f0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	8f 83       	std	Y+7, r24	; 0x07
    33fa:	98 87       	std	Y+8, r25	; 0x08
    33fc:	a9 87       	std	Y+9, r26	; 0x09
    33fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3400:	6f 81       	ldd	r22, Y+7	; 0x07
    3402:	78 85       	ldd	r23, Y+8	; 0x08
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	9a 85       	ldd	r25, Y+10	; 0x0a
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	40 e8       	ldi	r20, 0x80	; 128
    340e:	5f e3       	ldi	r21, 0x3F	; 63
    3410:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3414:	88 23       	and	r24, r24
    3416:	2c f4       	brge	.+10     	; 0x3422 <LCD_init+0x82>
		__ticks = 1;
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	8d 83       	std	Y+5, r24	; 0x05
    3420:	3f c0       	rjmp	.+126    	; 0x34a0 <LCD_init+0x100>
	else if (__tmp > 65535)
    3422:	6f 81       	ldd	r22, Y+7	; 0x07
    3424:	78 85       	ldd	r23, Y+8	; 0x08
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	3f ef       	ldi	r19, 0xFF	; 255
    342e:	4f e7       	ldi	r20, 0x7F	; 127
    3430:	57 e4       	ldi	r21, 0x47	; 71
    3432:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3436:	18 16       	cp	r1, r24
    3438:	4c f5       	brge	.+82     	; 0x348c <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343a:	6b 85       	ldd	r22, Y+11	; 0x0b
    343c:	7c 85       	ldd	r23, Y+12	; 0x0c
    343e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3440:	9e 85       	ldd	r25, Y+14	; 0x0e
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e2       	ldi	r20, 0x20	; 32
    3448:	51 e4       	ldi	r21, 0x41	; 65
    344a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	9e 83       	std	Y+6, r25	; 0x06
    3460:	8d 83       	std	Y+5, r24	; 0x05
    3462:	0f c0       	rjmp	.+30     	; 0x3482 <LCD_init+0xe2>
    3464:	88 ec       	ldi	r24, 0xC8	; 200
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	9c 83       	std	Y+4, r25	; 0x04
    346a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	9c 81       	ldd	r25, Y+4	; 0x04
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	f1 f7       	brne	.-4      	; 0x3470 <LCD_init+0xd0>
    3474:	9c 83       	std	Y+4, r25	; 0x04
    3476:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3478:	8d 81       	ldd	r24, Y+5	; 0x05
    347a:	9e 81       	ldd	r25, Y+6	; 0x06
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	9e 83       	std	Y+6, r25	; 0x06
    3480:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3482:	8d 81       	ldd	r24, Y+5	; 0x05
    3484:	9e 81       	ldd	r25, Y+6	; 0x06
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	69 f7       	brne	.-38     	; 0x3464 <LCD_init+0xc4>
    348a:	14 c0       	rjmp	.+40     	; 0x34b4 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348c:	6f 81       	ldd	r22, Y+7	; 0x07
    348e:	78 85       	ldd	r23, Y+8	; 0x08
    3490:	89 85       	ldd	r24, Y+9	; 0x09
    3492:	9a 85       	ldd	r25, Y+10	; 0x0a
    3494:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	9e 83       	std	Y+6, r25	; 0x06
    349e:	8d 83       	std	Y+5, r24	; 0x05
    34a0:	8d 81       	ldd	r24, Y+5	; 0x05
    34a2:	9e 81       	ldd	r25, Y+6	; 0x06
    34a4:	9a 83       	std	Y+2, r25	; 0x02
    34a6:	89 83       	std	Y+1, r24	; 0x01
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	9a 81       	ldd	r25, Y+2	; 0x02
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <LCD_init+0x10c>
    34b0:	9a 83       	std	Y+2, r25	; 0x02
    34b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_sendCommand(LCD_8BIT_MODE);
    34b4:	88 e3       	ldi	r24, 0x38	; 56
    34b6:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_sendCommand>
	_delay_ms(20);
	LCD_sendCommand(LCD_4BIT_MODE_FIRST_COMMAND);
	LCD_sendCommand(LCD_4BIT_MODE_SECOND_COMMAND);
	LCD_sendCommand(LCD_4BIT_MODE);
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    34ba:	8c e0       	ldi	r24, 0x0C	; 12
    34bc:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_sendCommand>

}
    34c6:	2e 96       	adiw	r28, 0x0e	; 14
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <LCD_displayString>:
/*
 * to display string on lcd
 */
void LCD_displayString(const char *str){
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	00 d0       	rcall	.+0      	; 0x34de <LCD_displayString+0x6>
    34de:	00 d0       	rcall	.+0      	; 0x34e0 <LCD_displayString+0x8>
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	9c 83       	std	Y+4, r25	; 0x04
    34e6:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;str[i]!='\0';i++){
    34e8:	1a 82       	std	Y+2, r1	; 0x02
    34ea:	19 82       	std	Y+1, r1	; 0x01
    34ec:	0f c0       	rjmp	.+30     	; 0x350c <LCD_displayString+0x34>
		LCD_displayChar(str[i]);
    34ee:	29 81       	ldd	r18, Y+1	; 0x01
    34f0:	3a 81       	ldd	r19, Y+2	; 0x02
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	9c 81       	ldd	r25, Y+4	; 0x04
    34f6:	fc 01       	movw	r30, r24
    34f8:	e2 0f       	add	r30, r18
    34fa:	f3 1f       	adc	r31, r19
    34fc:	80 81       	ld	r24, Z
    34fe:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayChar>
}
/*
 * to display string on lcd
 */
void LCD_displayString(const char *str){
	for(int i=0;str[i]!='\0';i++){
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	9a 81       	ldd	r25, Y+2	; 0x02
    3506:	01 96       	adiw	r24, 0x01	; 1
    3508:	9a 83       	std	Y+2, r25	; 0x02
    350a:	89 83       	std	Y+1, r24	; 0x01
    350c:	29 81       	ldd	r18, Y+1	; 0x01
    350e:	3a 81       	ldd	r19, Y+2	; 0x02
    3510:	8b 81       	ldd	r24, Y+3	; 0x03
    3512:	9c 81       	ldd	r25, Y+4	; 0x04
    3514:	fc 01       	movw	r30, r24
    3516:	e2 0f       	add	r30, r18
    3518:	f3 1f       	adc	r31, r19
    351a:	80 81       	ld	r24, Z
    351c:	88 23       	and	r24, r24
    351e:	39 f7       	brne	.-50     	; 0x34ee <LCD_displayString+0x16>
		LCD_displayChar(str[i]);
	}
}
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	08 95       	ret

0000352e <LCD_moveCursor>:
/*
 * to change the position of the cursor on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	00 d0       	rcall	.+0      	; 0x3534 <LCD_moveCursor+0x6>
    3534:	00 d0       	rcall	.+0      	; 0x3536 <LCD_moveCursor+0x8>
    3536:	0f 92       	push	r0
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
    353c:	8a 83       	std	Y+2, r24	; 0x02
    353e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_address;
	switch(row){
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	3d 83       	std	Y+5, r19	; 0x05
    3548:	2c 83       	std	Y+4, r18	; 0x04
    354a:	8c 81       	ldd	r24, Y+4	; 0x04
    354c:	9d 81       	ldd	r25, Y+5	; 0x05
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	91 05       	cpc	r25, r1
    3552:	c1 f0       	breq	.+48     	; 0x3584 <LCD_moveCursor+0x56>
    3554:	2c 81       	ldd	r18, Y+4	; 0x04
    3556:	3d 81       	ldd	r19, Y+5	; 0x05
    3558:	22 30       	cpi	r18, 0x02	; 2
    355a:	31 05       	cpc	r19, r1
    355c:	2c f4       	brge	.+10     	; 0x3568 <LCD_moveCursor+0x3a>
    355e:	8c 81       	ldd	r24, Y+4	; 0x04
    3560:	9d 81       	ldd	r25, Y+5	; 0x05
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	61 f0       	breq	.+24     	; 0x357e <LCD_moveCursor+0x50>
    3566:	19 c0       	rjmp	.+50     	; 0x359a <LCD_moveCursor+0x6c>
    3568:	2c 81       	ldd	r18, Y+4	; 0x04
    356a:	3d 81       	ldd	r19, Y+5	; 0x05
    356c:	22 30       	cpi	r18, 0x02	; 2
    356e:	31 05       	cpc	r19, r1
    3570:	69 f0       	breq	.+26     	; 0x358c <LCD_moveCursor+0x5e>
    3572:	8c 81       	ldd	r24, Y+4	; 0x04
    3574:	9d 81       	ldd	r25, Y+5	; 0x05
    3576:	83 30       	cpi	r24, 0x03	; 3
    3578:	91 05       	cpc	r25, r1
    357a:	61 f0       	breq	.+24     	; 0x3594 <LCD_moveCursor+0x66>
    357c:	0e c0       	rjmp	.+28     	; 0x359a <LCD_moveCursor+0x6c>
	case 0:
		LCD_address=col;
    357e:	8b 81       	ldd	r24, Y+3	; 0x03
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	0b c0       	rjmp	.+22     	; 0x359a <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_address=col+0x40;
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	80 5c       	subi	r24, 0xC0	; 192
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	07 c0       	rjmp	.+14     	; 0x359a <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_address=col+0x10;
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	80 5f       	subi	r24, 0xF0	; 240
    3590:	89 83       	std	Y+1, r24	; 0x01
    3592:	03 c0       	rjmp	.+6      	; 0x359a <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_address=col+0x50;
    3594:	8b 81       	ldd	r24, Y+3	; 0x03
    3596:	80 5b       	subi	r24, 0xB0	; 176
    3598:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_CURSOR_TO_FIRST_LINE|LCD_address);
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	80 68       	ori	r24, 0x80	; 128
    359e:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_sendCommand>

}
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <LCD_displayStringRowColumn>:
/*
 * to display string in the desired position
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char* str){
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <LCD_displayStringRowColumn+0x6>
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <LCD_displayStringRowColumn+0x8>
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	89 83       	std	Y+1, r24	; 0x01
    35c0:	6a 83       	std	Y+2, r22	; 0x02
    35c2:	5c 83       	std	Y+4, r21	; 0x04
    35c4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	6a 81       	ldd	r22, Y+2	; 0x02
    35ca:	0e 94 97 1a 	call	0x352e	; 0x352e <LCD_moveCursor>
	LCD_displayString(str);
    35ce:	8b 81       	ldd	r24, Y+3	; 0x03
    35d0:	9c 81       	ldd	r25, Y+4	; 0x04
    35d2:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
}
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	0f 90       	pop	r0
    35de:	cf 91       	pop	r28
    35e0:	df 91       	pop	r29
    35e2:	08 95       	ret

000035e4 <LCD_clearScreen>:
/*
 * to clear display
 */
void LCD_clearScreen(){
    35e4:	df 93       	push	r29
    35e6:	cf 93       	push	r28
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_sendCommand>
}
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <LCD_integerToString>:
/*
 * to display integers
 */
void LCD_integerToString(int num){
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	2c 97       	sbiw	r28, 0x0c	; 12
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	9c 87       	std	Y+12, r25	; 0x0c
    360e:	8b 87       	std	Y+11, r24	; 0x0b
	char buffer[10];
	itoa(num,buffer,10);
    3610:	8b 85       	ldd	r24, Y+11	; 0x0b
    3612:	9c 85       	ldd	r25, Y+12	; 0x0c
    3614:	9e 01       	movw	r18, r28
    3616:	2f 5f       	subi	r18, 0xFF	; 255
    3618:	3f 4f       	sbci	r19, 0xFF	; 255
    361a:	b9 01       	movw	r22, r18
    361c:	4a e0       	ldi	r20, 0x0A	; 10
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <itoa>
	LCD_displayString(buffer);
    3624:	ce 01       	movw	r24, r28
    3626:	01 96       	adiw	r24, 0x01	; 1
    3628:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>
}
    362c:	2c 96       	adiw	r28, 0x0c	; 12
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	cd bf       	out	0x3d, r28	; 61
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	08 95       	ret

0000363e <LCD_floatToString>:
/*
 * to display float numbers
 */
void LCD_floatToString(double num){
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	68 97       	sbiw	r28, 0x18	; 24
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	6d 8b       	std	Y+21, r22	; 0x15
    3658:	7e 8b       	std	Y+22, r23	; 0x16
    365a:	8f 8b       	std	Y+23, r24	; 0x17
    365c:	98 8f       	std	Y+24, r25	; 0x18
	char buffer[20];
	dtostrf(num,5,3,buffer);
    365e:	8d 89       	ldd	r24, Y+21	; 0x15
    3660:	9e 89       	ldd	r25, Y+22	; 0x16
    3662:	af 89       	ldd	r26, Y+23	; 0x17
    3664:	b8 8d       	ldd	r27, Y+24	; 0x18
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	45 e0       	ldi	r20, 0x05	; 5
    366c:	23 e0       	ldi	r18, 0x03	; 3
    366e:	fe 01       	movw	r30, r28
    3670:	31 96       	adiw	r30, 0x01	; 1
    3672:	8f 01       	movw	r16, r30
    3674:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <dtostrf>
	LCD_displayString(buffer);
    3678:	ce 01       	movw	r24, r28
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <LCD_displayString>

}
    3680:	68 96       	adiw	r28, 0x18	; 24
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	1f 91       	pop	r17
    3692:	0f 91       	pop	r16
    3694:	08 95       	ret

00003696 <Timer1_init>:

/**************************************************************************************
 *                                Functions Definition                                *
 **************************************************************************************/

void Timer1_init(const Timer1_ConfigType *Config_Ptr){
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	00 d0       	rcall	.+0      	; 0x369c <Timer1_init+0x6>
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	9a 83       	std	Y+2, r25	; 0x02
    36a2:	89 83       	std	Y+1, r24	; 0x01
	/*configuring WGM10 and WGM11  bits in TCCR1A Register */
	TCCR1A=(TCCR1A&0xFC)|((Config_Ptr->mode)&(0x3));
    36a4:	af e4       	ldi	r26, 0x4F	; 79
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	ef e4       	ldi	r30, 0x4F	; 79
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	98 2f       	mov	r25, r24
    36b0:	9c 7f       	andi	r25, 0xFC	; 252
    36b2:	e9 81       	ldd	r30, Y+1	; 0x01
    36b4:	fa 81       	ldd	r31, Y+2	; 0x02
    36b6:	85 81       	ldd	r24, Z+5	; 0x05
    36b8:	83 70       	andi	r24, 0x03	; 3
    36ba:	89 2b       	or	r24, r25
    36bc:	8c 93       	st	X, r24
	/*configuring WGM12 and WGM13 bits in TCCR1B Register*/
	TCCR1B=(TCCR1B&0xE7)|((((Config_Ptr->mode)&(0xC))>>2)<<WGM12);
    36be:	ae e4       	ldi	r26, 0x4E	; 78
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	ee e4       	ldi	r30, 0x4E	; 78
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 81       	ld	r24, Z
    36c8:	28 2f       	mov	r18, r24
    36ca:	27 7e       	andi	r18, 0xE7	; 231
    36cc:	e9 81       	ldd	r30, Y+1	; 0x01
    36ce:	fa 81       	ldd	r31, Y+2	; 0x02
    36d0:	85 81       	ldd	r24, Z+5	; 0x05
    36d2:	88 2f       	mov	r24, r24
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	8c 70       	andi	r24, 0x0C	; 12
    36d8:	90 70       	andi	r25, 0x00	; 0
    36da:	95 95       	asr	r25
    36dc:	87 95       	ror	r24
    36de:	95 95       	asr	r25
    36e0:	87 95       	ror	r24
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	82 2b       	or	r24, r18
    36f0:	8c 93       	st	X, r24


	TCNT1=Config_Ptr->initial_vlaue; /*Adding the timer initial value*/
    36f2:	ac e4       	ldi	r26, 0x4C	; 76
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	e9 81       	ldd	r30, Y+1	; 0x01
    36f8:	fa 81       	ldd	r31, Y+2	; 0x02
    36fa:	80 81       	ld	r24, Z
    36fc:	91 81       	ldd	r25, Z+1	; 0x01
    36fe:	11 96       	adiw	r26, 0x01	; 1
    3700:	9c 93       	st	X, r25
    3702:	8e 93       	st	-X, r24


	/*configuring the compare register value according to the mode selected*/
	if(Config_Ptr->mode==CTC_OCR1A){
    3704:	e9 81       	ldd	r30, Y+1	; 0x01
    3706:	fa 81       	ldd	r31, Y+2	; 0x02
    3708:	85 81       	ldd	r24, Z+5	; 0x05
    370a:	84 30       	cpi	r24, 0x04	; 4
    370c:	59 f4       	brne	.+22     	; 0x3724 <Timer1_init+0x8e>
		OCR1A=Config_Ptr->compare_value;
    370e:	ea e4       	ldi	r30, 0x4A	; 74
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	a9 81       	ldd	r26, Y+1	; 0x01
    3714:	ba 81       	ldd	r27, Y+2	; 0x02
    3716:	12 96       	adiw	r26, 0x02	; 2
    3718:	8d 91       	ld	r24, X+
    371a:	9c 91       	ld	r25, X
    371c:	13 97       	sbiw	r26, 0x03	; 3
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	0f c0       	rjmp	.+30     	; 0x3742 <Timer1_init+0xac>
	}
	else if(Config_Ptr->mode==CTC_ICR1){
    3724:	e9 81       	ldd	r30, Y+1	; 0x01
    3726:	fa 81       	ldd	r31, Y+2	; 0x02
    3728:	85 81       	ldd	r24, Z+5	; 0x05
    372a:	8a 30       	cpi	r24, 0x0A	; 10
    372c:	51 f4       	brne	.+20     	; 0x3742 <Timer1_init+0xac>
		OCR1B=Config_Ptr->compare_value;
    372e:	e8 e4       	ldi	r30, 0x48	; 72
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	a9 81       	ldd	r26, Y+1	; 0x01
    3734:	ba 81       	ldd	r27, Y+2	; 0x02
    3736:	12 96       	adiw	r26, 0x02	; 2
    3738:	8d 91       	ld	r24, X+
    373a:	9c 91       	ld	r25, X
    373c:	13 97       	sbiw	r26, 0x03	; 3
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
	}


	/*setting FOC1A and FOC1B as we are using non pwm mode*/
	TCCR1A|=(1<<FOC1A)|(1<<FOC1B);
    3742:	af e4       	ldi	r26, 0x4F	; 79
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	ef e4       	ldi	r30, 0x4F	; 79
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	80 81       	ld	r24, Z
    374c:	8c 60       	ori	r24, 0x0C	; 12
    374e:	8c 93       	st	X, r24

	/*setting the prescaler configured by the user */
	TCCR1B=(TCCR1B&0xF8)|((Config_Ptr->prescaler)&0x7);
    3750:	ae e4       	ldi	r26, 0x4E	; 78
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	ee e4       	ldi	r30, 0x4E	; 78
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 81       	ld	r24, Z
    375a:	98 2f       	mov	r25, r24
    375c:	98 7f       	andi	r25, 0xF8	; 248
    375e:	e9 81       	ldd	r30, Y+1	; 0x01
    3760:	fa 81       	ldd	r31, Y+2	; 0x02
    3762:	84 81       	ldd	r24, Z+4	; 0x04
    3764:	87 70       	andi	r24, 0x07	; 7
    3766:	89 2b       	or	r24, r25
    3768:	8c 93       	st	X, r24

	/*enabling the interrupt of the mode selected*/
	if(Config_Ptr->mode==NORMAL){
    376a:	e9 81       	ldd	r30, Y+1	; 0x01
    376c:	fa 81       	ldd	r31, Y+2	; 0x02
    376e:	85 81       	ldd	r24, Z+5	; 0x05
    3770:	88 23       	and	r24, r24
    3772:	29 f4       	brne	.+10     	; 0x377e <Timer1_init+0xe8>
		TIMSK=(1<<TOIE1);
    3774:	e9 e5       	ldi	r30, 0x59	; 89
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	84 e0       	ldi	r24, 0x04	; 4
    377a:	80 83       	st	Z, r24
    377c:	13 c0       	rjmp	.+38     	; 0x37a4 <Timer1_init+0x10e>
	}
	else if(Config_Ptr->mode==CTC_OCR1A){
    377e:	e9 81       	ldd	r30, Y+1	; 0x01
    3780:	fa 81       	ldd	r31, Y+2	; 0x02
    3782:	85 81       	ldd	r24, Z+5	; 0x05
    3784:	84 30       	cpi	r24, 0x04	; 4
    3786:	29 f4       	brne	.+10     	; 0x3792 <Timer1_init+0xfc>
		TIMSK=(1<<OCIE1A);
    3788:	e9 e5       	ldi	r30, 0x59	; 89
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 e1       	ldi	r24, 0x10	; 16
    378e:	80 83       	st	Z, r24
    3790:	09 c0       	rjmp	.+18     	; 0x37a4 <Timer1_init+0x10e>
	}
	else if(Config_Ptr->mode==CTC_ICR1){
    3792:	e9 81       	ldd	r30, Y+1	; 0x01
    3794:	fa 81       	ldd	r31, Y+2	; 0x02
    3796:	85 81       	ldd	r24, Z+5	; 0x05
    3798:	8a 30       	cpi	r24, 0x0A	; 10
    379a:	21 f4       	brne	.+8      	; 0x37a4 <Timer1_init+0x10e>
		TIMSK=(1<<OCIE1B);
    379c:	e9 e5       	ldi	r30, 0x59	; 89
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	88 e0       	ldi	r24, 0x08	; 8
    37a2:	80 83       	st	Z, r24
	}
}
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	08 95       	ret

000037ae <Timer1_deInit>:

void Timer1_deInit(void){
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
	/*resetting all the registers of the timer*/
	TCCR1A=0;
    37b6:	ef e4       	ldi	r30, 0x4F	; 79
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	10 82       	st	Z, r1
	TCCR1B=0;
    37bc:	ee e4       	ldi	r30, 0x4E	; 78
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	10 82       	st	Z, r1
	TCNT1=0;
    37c2:	ec e4       	ldi	r30, 0x4C	; 76
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	11 82       	std	Z+1, r1	; 0x01
    37c8:	10 82       	st	Z, r1
	OCR1A=0;
    37ca:	ea e4       	ldi	r30, 0x4A	; 74
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	11 82       	std	Z+1, r1	; 0x01
    37d0:	10 82       	st	Z, r1
	OCR1B=0;
    37d2:	e8 e4       	ldi	r30, 0x48	; 72
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	11 82       	std	Z+1, r1	; 0x01
    37d8:	10 82       	st	Z, r1
	TIMSK=0;
    37da:	e9 e5       	ldi	r30, 0x59	; 89
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	10 82       	st	Z, r1
}
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void)){
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	00 d0       	rcall	.+0      	; 0x37ec <Timer1_setCallBack+0x6>
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
	/*setting the call back function to be executed by the timer */
	g_callBack_ptr=a_ptr;
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	9a 81       	ldd	r25, Y+2	; 0x02
    37f8:	90 93 48 01 	sts	0x0148, r25
    37fc:	80 93 47 01 	sts	0x0147, r24
}
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <__vector_9>:
/**************************************************************************************
 *                            Interrupt Handling Routines                             *
 **************************************************************************************/

/*Interrupt handling routines call the call back function */
ISR(TIMER1_OVF_vect){
    380a:	1f 92       	push	r1
    380c:	0f 92       	push	r0
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	0f 92       	push	r0
    3812:	11 24       	eor	r1, r1
    3814:	2f 93       	push	r18
    3816:	3f 93       	push	r19
    3818:	4f 93       	push	r20
    381a:	5f 93       	push	r21
    381c:	6f 93       	push	r22
    381e:	7f 93       	push	r23
    3820:	8f 93       	push	r24
    3822:	9f 93       	push	r25
    3824:	af 93       	push	r26
    3826:	bf 93       	push	r27
    3828:	ef 93       	push	r30
    382a:	ff 93       	push	r31
    382c:	df 93       	push	r29
    382e:	cf 93       	push	r28
    3830:	cd b7       	in	r28, 0x3d	; 61
    3832:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr!=NULL_PTR){
    3834:	80 91 47 01 	lds	r24, 0x0147
    3838:	90 91 48 01 	lds	r25, 0x0148
    383c:	00 97       	sbiw	r24, 0x00	; 0
    383e:	29 f0       	breq	.+10     	; 0x384a <__vector_9+0x40>
		(*g_callBack_ptr)();
    3840:	e0 91 47 01 	lds	r30, 0x0147
    3844:	f0 91 48 01 	lds	r31, 0x0148
    3848:	09 95       	icall
	}
}
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	ff 91       	pop	r31
    3850:	ef 91       	pop	r30
    3852:	bf 91       	pop	r27
    3854:	af 91       	pop	r26
    3856:	9f 91       	pop	r25
    3858:	8f 91       	pop	r24
    385a:	7f 91       	pop	r23
    385c:	6f 91       	pop	r22
    385e:	5f 91       	pop	r21
    3860:	4f 91       	pop	r20
    3862:	3f 91       	pop	r19
    3864:	2f 91       	pop	r18
    3866:	0f 90       	pop	r0
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	0f 90       	pop	r0
    386c:	1f 90       	pop	r1
    386e:	18 95       	reti

00003870 <__vector_7>:
ISR(TIMER1_COMPA_vect){
    3870:	1f 92       	push	r1
    3872:	0f 92       	push	r0
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	0f 92       	push	r0
    3878:	11 24       	eor	r1, r1
    387a:	2f 93       	push	r18
    387c:	3f 93       	push	r19
    387e:	4f 93       	push	r20
    3880:	5f 93       	push	r21
    3882:	6f 93       	push	r22
    3884:	7f 93       	push	r23
    3886:	8f 93       	push	r24
    3888:	9f 93       	push	r25
    388a:	af 93       	push	r26
    388c:	bf 93       	push	r27
    388e:	ef 93       	push	r30
    3890:	ff 93       	push	r31
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr!=NULL_PTR){
    389a:	80 91 47 01 	lds	r24, 0x0147
    389e:	90 91 48 01 	lds	r25, 0x0148
    38a2:	00 97       	sbiw	r24, 0x00	; 0
    38a4:	29 f0       	breq	.+10     	; 0x38b0 <__vector_7+0x40>
		(*g_callBack_ptr)();
    38a6:	e0 91 47 01 	lds	r30, 0x0147
    38aa:	f0 91 48 01 	lds	r31, 0x0148
    38ae:	09 95       	icall
	}
}
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	ff 91       	pop	r31
    38b6:	ef 91       	pop	r30
    38b8:	bf 91       	pop	r27
    38ba:	af 91       	pop	r26
    38bc:	9f 91       	pop	r25
    38be:	8f 91       	pop	r24
    38c0:	7f 91       	pop	r23
    38c2:	6f 91       	pop	r22
    38c4:	5f 91       	pop	r21
    38c6:	4f 91       	pop	r20
    38c8:	3f 91       	pop	r19
    38ca:	2f 91       	pop	r18
    38cc:	0f 90       	pop	r0
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	0f 90       	pop	r0
    38d2:	1f 90       	pop	r1
    38d4:	18 95       	reti

000038d6 <__vector_8>:
ISR(TIMER1_COMPB_vect){
    38d6:	1f 92       	push	r1
    38d8:	0f 92       	push	r0
    38da:	0f b6       	in	r0, 0x3f	; 63
    38dc:	0f 92       	push	r0
    38de:	11 24       	eor	r1, r1
    38e0:	2f 93       	push	r18
    38e2:	3f 93       	push	r19
    38e4:	4f 93       	push	r20
    38e6:	5f 93       	push	r21
    38e8:	6f 93       	push	r22
    38ea:	7f 93       	push	r23
    38ec:	8f 93       	push	r24
    38ee:	9f 93       	push	r25
    38f0:	af 93       	push	r26
    38f2:	bf 93       	push	r27
    38f4:	ef 93       	push	r30
    38f6:	ff 93       	push	r31
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr!=NULL_PTR){
    3900:	80 91 47 01 	lds	r24, 0x0147
    3904:	90 91 48 01 	lds	r25, 0x0148
    3908:	00 97       	sbiw	r24, 0x00	; 0
    390a:	29 f0       	breq	.+10     	; 0x3916 <__vector_8+0x40>
		(*g_callBack_ptr)();
    390c:	e0 91 47 01 	lds	r30, 0x0147
    3910:	f0 91 48 01 	lds	r31, 0x0148
    3914:	09 95       	icall
	}
}
    3916:	cf 91       	pop	r28
    3918:	df 91       	pop	r29
    391a:	ff 91       	pop	r31
    391c:	ef 91       	pop	r30
    391e:	bf 91       	pop	r27
    3920:	af 91       	pop	r26
    3922:	9f 91       	pop	r25
    3924:	8f 91       	pop	r24
    3926:	7f 91       	pop	r23
    3928:	6f 91       	pop	r22
    392a:	5f 91       	pop	r21
    392c:	4f 91       	pop	r20
    392e:	3f 91       	pop	r19
    3930:	2f 91       	pop	r18
    3932:	0f 90       	pop	r0
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	0f 90       	pop	r0
    3938:	1f 90       	pop	r1
    393a:	18 95       	reti

0000393c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_Ptr)
{
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	00 d0       	rcall	.+0      	; 0x3942 <UART_init+0x6>
    3942:	00 d0       	rcall	.+0      	; 0x3944 <UART_init+0x8>
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	9c 83       	std	Y+4, r25	; 0x04
    394a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    394c:	1a 82       	std	Y+2, r1	; 0x02
    394e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3950:	eb e2       	ldi	r30, 0x2B	; 43
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	82 e0       	ldi	r24, 0x02	; 2
    3956:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used as we are not using 9-bit mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3958:	ea e2       	ldi	r30, 0x2A	; 42
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	88 e1       	ldi	r24, 0x18	; 24
    395e:	80 83       	st	Z, r24
	 * UPM1:0  = configure parity as desired
	 * USBS    = configure stop bits as desired
	 * UCSZ1:0 = configure bit data as desired
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) ;
    3960:	e0 e4       	ldi	r30, 0x40	; 64
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 e8       	ldi	r24, 0x80	; 128
    3966:	80 83       	st	Z, r24
	UCSRC = (UCSRC&0xCF)|((config_Ptr->parity)<<UPM0);
    3968:	a0 e4       	ldi	r26, 0x40	; 64
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	e0 e4       	ldi	r30, 0x40	; 64
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	28 2f       	mov	r18, r24
    3974:	2f 7c       	andi	r18, 0xCF	; 207
    3976:	eb 81       	ldd	r30, Y+3	; 0x03
    3978:	fc 81       	ldd	r31, Y+4	; 0x04
    397a:	81 81       	ldd	r24, Z+1	; 0x01
    397c:	88 2f       	mov	r24, r24
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	82 95       	swap	r24
    3982:	92 95       	swap	r25
    3984:	90 7f       	andi	r25, 0xF0	; 240
    3986:	98 27       	eor	r25, r24
    3988:	80 7f       	andi	r24, 0xF0	; 240
    398a:	98 27       	eor	r25, r24
    398c:	82 2b       	or	r24, r18
    398e:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF7)|((config_Ptr->stop_bit)<<USBS);
    3990:	a0 e4       	ldi	r26, 0x40	; 64
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e0 e4       	ldi	r30, 0x40	; 64
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	28 2f       	mov	r18, r24
    399c:	27 7f       	andi	r18, 0xF7	; 247
    399e:	eb 81       	ldd	r30, Y+3	; 0x03
    39a0:	fc 81       	ldd	r31, Y+4	; 0x04
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	88 2f       	mov	r24, r24
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	88 0f       	add	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	82 2b       	or	r24, r18
    39b6:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF9)|((config_Ptr->bit_data)<<UCSZ0);
    39b8:	a0 e4       	ldi	r26, 0x40	; 64
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	e0 e4       	ldi	r30, 0x40	; 64
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	28 2f       	mov	r18, r24
    39c4:	29 7f       	andi	r18, 0xF9	; 249
    39c6:	eb 81       	ldd	r30, Y+3	; 0x03
    39c8:	fc 81       	ldd	r31, Y+4	; 0x04
    39ca:	80 81       	ld	r24, Z
    39cc:	88 2f       	mov	r24, r24
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	82 2b       	or	r24, r18
    39d6:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config_Ptr->baud_rate * 8UL))) - 1);
    39d8:	eb 81       	ldd	r30, Y+3	; 0x03
    39da:	fc 81       	ldd	r31, Y+4	; 0x04
    39dc:	83 81       	ldd	r24, Z+3	; 0x03
    39de:	94 81       	ldd	r25, Z+4	; 0x04
    39e0:	a5 81       	ldd	r26, Z+5	; 0x05
    39e2:	b6 81       	ldd	r27, Z+6	; 0x06
    39e4:	88 0f       	add	r24, r24
    39e6:	99 1f       	adc	r25, r25
    39e8:	aa 1f       	adc	r26, r26
    39ea:	bb 1f       	adc	r27, r27
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	aa 1f       	adc	r26, r26
    39f2:	bb 1f       	adc	r27, r27
    39f4:	88 0f       	add	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	aa 1f       	adc	r26, r26
    39fa:	bb 1f       	adc	r27, r27
    39fc:	9c 01       	movw	r18, r24
    39fe:	ad 01       	movw	r20, r26
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	92 e1       	ldi	r25, 0x12	; 18
    3a04:	aa e7       	ldi	r26, 0x7A	; 122
    3a06:	b0 e0       	ldi	r27, 0x00	; 0
    3a08:	bc 01       	movw	r22, r24
    3a0a:	cd 01       	movw	r24, r26
    3a0c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__udivmodsi4>
    3a10:	da 01       	movw	r26, r20
    3a12:	c9 01       	movw	r24, r18
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	9a 83       	std	Y+2, r25	; 0x02
    3a18:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3a1a:	e0 e4       	ldi	r30, 0x40	; 64
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	9a 81       	ldd	r25, Y+2	; 0x02
    3a22:	89 2f       	mov	r24, r25
    3a24:	99 27       	eor	r25, r25
    3a26:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3a28:	e9 e2       	ldi	r30, 0x29	; 41
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	80 83       	st	Z, r24


}
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	cf 91       	pop	r28
    3a3a:	df 91       	pop	r29
    3a3c:	08 95       	ret

00003a3e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3a3e:	df 93       	push	r29
    3a40:	cf 93       	push	r28
    3a42:	0f 92       	push	r0
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3a4a:	eb e2       	ldi	r30, 0x2B	; 43
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	80 81       	ld	r24, Z
    3a50:	88 2f       	mov	r24, r24
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	80 72       	andi	r24, 0x20	; 32
    3a56:	90 70       	andi	r25, 0x00	; 0
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	b9 f3       	breq	.-18     	; 0x3a4a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3a5c:	ec e2       	ldi	r30, 0x2C	; 44
    3a5e:	f0 e0       	ldi	r31, 0x00	; 0
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3a64:	0f 90       	pop	r0
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	08 95       	ret

00003a6c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3a6c:	df 93       	push	r29
    3a6e:	cf 93       	push	r28
    3a70:	cd b7       	in	r28, 0x3d	; 61
    3a72:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3a74:	eb e2       	ldi	r30, 0x2B	; 43
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	80 81       	ld	r24, Z
    3a7a:	88 23       	and	r24, r24
    3a7c:	dc f7       	brge	.-10     	; 0x3a74 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3a7e:	ec e2       	ldi	r30, 0x2C	; 44
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	80 81       	ld	r24, Z
}
    3a84:	cf 91       	pop	r28
    3a86:	df 91       	pop	r29
    3a88:	08 95       	ret

00003a8a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	00 d0       	rcall	.+0      	; 0x3a90 <UART_sendString+0x6>
    3a90:	0f 92       	push	r0
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
    3a96:	9b 83       	std	Y+3, r25	; 0x03
    3a98:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a9a:	19 82       	std	Y+1, r1	; 0x01
    3a9c:	0e c0       	rjmp	.+28     	; 0x3aba <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	28 2f       	mov	r18, r24
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	e2 0f       	add	r30, r18
    3aac:	f3 1f       	adc	r31, r19
    3aae:	80 81       	ld	r24, Z
    3ab0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_sendByte>
		i++;
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	8f 5f       	subi	r24, 0xFF	; 255
    3ab8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	28 2f       	mov	r18, r24
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	e2 0f       	add	r30, r18
    3ac8:	f3 1f       	adc	r31, r19
    3aca:	80 81       	ld	r24, Z
    3acc:	88 23       	and	r24, r24
    3ace:	39 f7       	brne	.-50     	; 0x3a9e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	cf 91       	pop	r28
    3ad8:	df 91       	pop	r29
    3ada:	08 95       	ret

00003adc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3adc:	0f 93       	push	r16
    3ade:	1f 93       	push	r17
    3ae0:	df 93       	push	r29
    3ae2:	cf 93       	push	r28
    3ae4:	00 d0       	rcall	.+0      	; 0x3ae6 <UART_receiveString+0xa>
    3ae6:	0f 92       	push	r0
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	9b 83       	std	Y+3, r25	; 0x03
    3aee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3af0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	28 2f       	mov	r18, r24
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	9b 81       	ldd	r25, Y+3	; 0x03
    3afc:	8c 01       	movw	r16, r24
    3afe:	02 0f       	add	r16, r18
    3b00:	13 1f       	adc	r17, r19
    3b02:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    3b06:	f8 01       	movw	r30, r16
    3b08:	80 83       	st	Z, r24
    3b0a:	0f c0       	rjmp	.+30     	; 0x3b2a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	8f 5f       	subi	r24, 0xFF	; 255
    3b10:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	28 2f       	mov	r18, r24
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b1c:	8c 01       	movw	r16, r24
    3b1e:	02 0f       	add	r16, r18
    3b20:	13 1f       	adc	r17, r19
    3b22:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <UART_recieveByte>
    3b26:	f8 01       	movw	r30, r16
    3b28:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	28 2f       	mov	r18, r24
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	9b 81       	ldd	r25, Y+3	; 0x03
    3b34:	fc 01       	movw	r30, r24
    3b36:	e2 0f       	add	r30, r18
    3b38:	f3 1f       	adc	r31, r19
    3b3a:	80 81       	ld	r24, Z
    3b3c:	83 32       	cpi	r24, 0x23	; 35
    3b3e:	31 f7       	brne	.-52     	; 0x3b0c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	28 2f       	mov	r18, r24
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	e2 0f       	add	r30, r18
    3b4e:	f3 1f       	adc	r31, r19
    3b50:	10 82       	st	Z, r1
}
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
    3b58:	cf 91       	pop	r28
    3b5a:	df 91       	pop	r29
    3b5c:	1f 91       	pop	r17
    3b5e:	0f 91       	pop	r16
    3b60:	08 95       	ret

00003b62 <__udivmodsi4>:
    3b62:	a1 e2       	ldi	r26, 0x21	; 33
    3b64:	1a 2e       	mov	r1, r26
    3b66:	aa 1b       	sub	r26, r26
    3b68:	bb 1b       	sub	r27, r27
    3b6a:	fd 01       	movw	r30, r26
    3b6c:	0d c0       	rjmp	.+26     	; 0x3b88 <__udivmodsi4_ep>

00003b6e <__udivmodsi4_loop>:
    3b6e:	aa 1f       	adc	r26, r26
    3b70:	bb 1f       	adc	r27, r27
    3b72:	ee 1f       	adc	r30, r30
    3b74:	ff 1f       	adc	r31, r31
    3b76:	a2 17       	cp	r26, r18
    3b78:	b3 07       	cpc	r27, r19
    3b7a:	e4 07       	cpc	r30, r20
    3b7c:	f5 07       	cpc	r31, r21
    3b7e:	20 f0       	brcs	.+8      	; 0x3b88 <__udivmodsi4_ep>
    3b80:	a2 1b       	sub	r26, r18
    3b82:	b3 0b       	sbc	r27, r19
    3b84:	e4 0b       	sbc	r30, r20
    3b86:	f5 0b       	sbc	r31, r21

00003b88 <__udivmodsi4_ep>:
    3b88:	66 1f       	adc	r22, r22
    3b8a:	77 1f       	adc	r23, r23
    3b8c:	88 1f       	adc	r24, r24
    3b8e:	99 1f       	adc	r25, r25
    3b90:	1a 94       	dec	r1
    3b92:	69 f7       	brne	.-38     	; 0x3b6e <__udivmodsi4_loop>
    3b94:	60 95       	com	r22
    3b96:	70 95       	com	r23
    3b98:	80 95       	com	r24
    3b9a:	90 95       	com	r25
    3b9c:	9b 01       	movw	r18, r22
    3b9e:	ac 01       	movw	r20, r24
    3ba0:	bd 01       	movw	r22, r26
    3ba2:	cf 01       	movw	r24, r30
    3ba4:	08 95       	ret

00003ba6 <__prologue_saves__>:
    3ba6:	2f 92       	push	r2
    3ba8:	3f 92       	push	r3
    3baa:	4f 92       	push	r4
    3bac:	5f 92       	push	r5
    3bae:	6f 92       	push	r6
    3bb0:	7f 92       	push	r7
    3bb2:	8f 92       	push	r8
    3bb4:	9f 92       	push	r9
    3bb6:	af 92       	push	r10
    3bb8:	bf 92       	push	r11
    3bba:	cf 92       	push	r12
    3bbc:	df 92       	push	r13
    3bbe:	ef 92       	push	r14
    3bc0:	ff 92       	push	r15
    3bc2:	0f 93       	push	r16
    3bc4:	1f 93       	push	r17
    3bc6:	cf 93       	push	r28
    3bc8:	df 93       	push	r29
    3bca:	cd b7       	in	r28, 0x3d	; 61
    3bcc:	de b7       	in	r29, 0x3e	; 62
    3bce:	ca 1b       	sub	r28, r26
    3bd0:	db 0b       	sbc	r29, r27
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	f8 94       	cli
    3bd6:	de bf       	out	0x3e, r29	; 62
    3bd8:	0f be       	out	0x3f, r0	; 63
    3bda:	cd bf       	out	0x3d, r28	; 61
    3bdc:	09 94       	ijmp

00003bde <__epilogue_restores__>:
    3bde:	2a 88       	ldd	r2, Y+18	; 0x12
    3be0:	39 88       	ldd	r3, Y+17	; 0x11
    3be2:	48 88       	ldd	r4, Y+16	; 0x10
    3be4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3be6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3be8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bea:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bec:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bee:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bf0:	b9 84       	ldd	r11, Y+9	; 0x09
    3bf2:	c8 84       	ldd	r12, Y+8	; 0x08
    3bf4:	df 80       	ldd	r13, Y+7	; 0x07
    3bf6:	ee 80       	ldd	r14, Y+6	; 0x06
    3bf8:	fd 80       	ldd	r15, Y+5	; 0x05
    3bfa:	0c 81       	ldd	r16, Y+4	; 0x04
    3bfc:	1b 81       	ldd	r17, Y+3	; 0x03
    3bfe:	aa 81       	ldd	r26, Y+2	; 0x02
    3c00:	b9 81       	ldd	r27, Y+1	; 0x01
    3c02:	ce 0f       	add	r28, r30
    3c04:	d1 1d       	adc	r29, r1
    3c06:	0f b6       	in	r0, 0x3f	; 63
    3c08:	f8 94       	cli
    3c0a:	de bf       	out	0x3e, r29	; 62
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	cd bf       	out	0x3d, r28	; 61
    3c10:	ed 01       	movw	r28, r26
    3c12:	08 95       	ret

00003c14 <dtostrf>:
    3c14:	ef 92       	push	r14
    3c16:	ff 92       	push	r15
    3c18:	0f 93       	push	r16
    3c1a:	1f 93       	push	r17
    3c1c:	f2 2f       	mov	r31, r18
    3c1e:	f0 2e       	mov	r15, r16
    3c20:	47 fd       	sbrc	r20, 7
    3c22:	02 c0       	rjmp	.+4      	; 0x3c28 <dtostrf+0x14>
    3c24:	e4 e0       	ldi	r30, 0x04	; 4
    3c26:	01 c0       	rjmp	.+2      	; 0x3c2a <dtostrf+0x16>
    3c28:	e4 e1       	ldi	r30, 0x14	; 20
    3c2a:	24 2f       	mov	r18, r20
    3c2c:	33 27       	eor	r19, r19
    3c2e:	27 fd       	sbrc	r18, 7
    3c30:	30 95       	com	r19
    3c32:	37 ff       	sbrs	r19, 7
    3c34:	03 c0       	rjmp	.+6      	; 0x3c3c <dtostrf+0x28>
    3c36:	30 95       	com	r19
    3c38:	21 95       	neg	r18
    3c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3c:	4f 2d       	mov	r20, r15
    3c3e:	51 2f       	mov	r21, r17
    3c40:	0f 2f       	mov	r16, r31
    3c42:	ee 2e       	mov	r14, r30
    3c44:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <dtoa_prf>
    3c48:	8f 2d       	mov	r24, r15
    3c4a:	91 2f       	mov	r25, r17
    3c4c:	1f 91       	pop	r17
    3c4e:	0f 91       	pop	r16
    3c50:	ff 90       	pop	r15
    3c52:	ef 90       	pop	r14
    3c54:	08 95       	ret

00003c56 <itoa>:
    3c56:	fb 01       	movw	r30, r22
    3c58:	9f 01       	movw	r18, r30
    3c5a:	e8 94       	clt
    3c5c:	42 30       	cpi	r20, 0x02	; 2
    3c5e:	c4 f0       	brlt	.+48     	; 0x3c90 <itoa+0x3a>
    3c60:	45 32       	cpi	r20, 0x25	; 37
    3c62:	b4 f4       	brge	.+44     	; 0x3c90 <itoa+0x3a>
    3c64:	4a 30       	cpi	r20, 0x0A	; 10
    3c66:	29 f4       	brne	.+10     	; 0x3c72 <itoa+0x1c>
    3c68:	97 fb       	bst	r25, 7
    3c6a:	1e f4       	brtc	.+6      	; 0x3c72 <itoa+0x1c>
    3c6c:	90 95       	com	r25
    3c6e:	81 95       	neg	r24
    3c70:	9f 4f       	sbci	r25, 0xFF	; 255
    3c72:	64 2f       	mov	r22, r20
    3c74:	77 27       	eor	r23, r23
    3c76:	0e 94 96 20 	call	0x412c	; 0x412c <__udivmodhi4>
    3c7a:	80 5d       	subi	r24, 0xD0	; 208
    3c7c:	8a 33       	cpi	r24, 0x3A	; 58
    3c7e:	0c f0       	brlt	.+2      	; 0x3c82 <itoa+0x2c>
    3c80:	89 5d       	subi	r24, 0xD9	; 217
    3c82:	81 93       	st	Z+, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	00 97       	sbiw	r24, 0x00	; 0
    3c88:	a1 f7       	brne	.-24     	; 0x3c72 <itoa+0x1c>
    3c8a:	16 f4       	brtc	.+4      	; 0x3c90 <itoa+0x3a>
    3c8c:	5d e2       	ldi	r21, 0x2D	; 45
    3c8e:	51 93       	st	Z+, r21
    3c90:	10 82       	st	Z, r1
    3c92:	c9 01       	movw	r24, r18
    3c94:	0c 94 86 20 	jmp	0x410c	; 0x410c <strrev>

00003c98 <dtoa_prf>:
    3c98:	a9 e0       	ldi	r26, 0x09	; 9
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	e2 e5       	ldi	r30, 0x52	; 82
    3c9e:	fe e1       	ldi	r31, 0x1E	; 30
    3ca0:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__prologue_saves__+0x8>
    3ca4:	6a 01       	movw	r12, r20
    3ca6:	12 2f       	mov	r17, r18
    3ca8:	a0 2e       	mov	r10, r16
    3caa:	be 2c       	mov	r11, r14
    3cac:	2b e3       	ldi	r18, 0x3B	; 59
    3cae:	20 17       	cp	r18, r16
    3cb0:	18 f4       	brcc	.+6      	; 0x3cb8 <dtoa_prf+0x20>
    3cb2:	2c e3       	ldi	r18, 0x3C	; 60
    3cb4:	92 2e       	mov	r9, r18
    3cb6:	02 c0       	rjmp	.+4      	; 0x3cbc <dtoa_prf+0x24>
    3cb8:	90 2e       	mov	r9, r16
    3cba:	93 94       	inc	r9
    3cbc:	ae 01       	movw	r20, r28
    3cbe:	4f 5f       	subi	r20, 0xFF	; 255
    3cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc2:	27 e0       	ldi	r18, 0x07	; 7
    3cc4:	09 2d       	mov	r16, r9
    3cc6:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__ftoa_engine>
    3cca:	bc 01       	movw	r22, r24
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	e8 2e       	mov	r14, r24
    3cd0:	ff 24       	eor	r15, r15
    3cd2:	c7 01       	movw	r24, r14
    3cd4:	89 70       	andi	r24, 0x09	; 9
    3cd6:	90 70       	andi	r25, 0x00	; 0
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	11 f4       	brne	.+4      	; 0x3ce0 <dtoa_prf+0x48>
    3cdc:	ad e2       	ldi	r26, 0x2D	; 45
    3cde:	09 c0       	rjmp	.+18     	; 0x3cf2 <dtoa_prf+0x5a>
    3ce0:	b1 fe       	sbrs	r11, 1
    3ce2:	02 c0       	rjmp	.+4      	; 0x3ce8 <dtoa_prf+0x50>
    3ce4:	ab e2       	ldi	r26, 0x2B	; 43
    3ce6:	05 c0       	rjmp	.+10     	; 0x3cf2 <dtoa_prf+0x5a>
    3ce8:	b0 fc       	sbrc	r11, 0
    3cea:	02 c0       	rjmp	.+4      	; 0x3cf0 <dtoa_prf+0x58>
    3cec:	a0 e0       	ldi	r26, 0x00	; 0
    3cee:	01 c0       	rjmp	.+2      	; 0x3cf2 <dtoa_prf+0x5a>
    3cf0:	a0 e2       	ldi	r26, 0x20	; 32
    3cf2:	e3 fe       	sbrs	r14, 3
    3cf4:	3b c0       	rjmp	.+118    	; 0x3d6c <dtoa_prf+0xd4>
    3cf6:	aa 23       	and	r26, r26
    3cf8:	11 f4       	brne	.+4      	; 0x3cfe <dtoa_prf+0x66>
    3cfa:	23 e0       	ldi	r18, 0x03	; 3
    3cfc:	01 c0       	rjmp	.+2      	; 0x3d00 <dtoa_prf+0x68>
    3cfe:	24 e0       	ldi	r18, 0x04	; 4
    3d00:	21 17       	cp	r18, r17
    3d02:	10 f0       	brcs	.+4      	; 0x3d08 <dtoa_prf+0x70>
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	02 c0       	rjmp	.+4      	; 0x3d0c <dtoa_prf+0x74>
    3d08:	12 1b       	sub	r17, r18
    3d0a:	21 2f       	mov	r18, r17
    3d0c:	eb 2c       	mov	r14, r11
    3d0e:	b4 fe       	sbrs	r11, 4
    3d10:	02 c0       	rjmp	.+4      	; 0x3d16 <dtoa_prf+0x7e>
    3d12:	32 2f       	mov	r19, r18
    3d14:	0a c0       	rjmp	.+20     	; 0x3d2a <dtoa_prf+0x92>
    3d16:	f6 01       	movw	r30, r12
    3d18:	32 2f       	mov	r19, r18
    3d1a:	80 e2       	ldi	r24, 0x20	; 32
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <dtoa_prf+0x8a>
    3d1e:	81 93       	st	Z+, r24
    3d20:	31 50       	subi	r19, 0x01	; 1
    3d22:	33 23       	and	r19, r19
    3d24:	e1 f7       	brne	.-8      	; 0x3d1e <dtoa_prf+0x86>
    3d26:	c2 0e       	add	r12, r18
    3d28:	d1 1c       	adc	r13, r1
    3d2a:	aa 23       	and	r26, r26
    3d2c:	19 f0       	breq	.+6      	; 0x3d34 <dtoa_prf+0x9c>
    3d2e:	f6 01       	movw	r30, r12
    3d30:	a1 93       	st	Z+, r26
    3d32:	6f 01       	movw	r12, r30
    3d34:	f6 01       	movw	r30, r12
    3d36:	31 96       	adiw	r30, 0x01	; 1
    3d38:	e2 fe       	sbrs	r14, 2
    3d3a:	05 c0       	rjmp	.+10     	; 0x3d46 <dtoa_prf+0xae>
    3d3c:	9e e4       	ldi	r25, 0x4E	; 78
    3d3e:	d6 01       	movw	r26, r12
    3d40:	9c 93       	st	X, r25
    3d42:	81 e4       	ldi	r24, 0x41	; 65
    3d44:	04 c0       	rjmp	.+8      	; 0x3d4e <dtoa_prf+0xb6>
    3d46:	9e e6       	ldi	r25, 0x6E	; 110
    3d48:	d6 01       	movw	r26, r12
    3d4a:	9c 93       	st	X, r25
    3d4c:	81 e6       	ldi	r24, 0x61	; 97
    3d4e:	11 96       	adiw	r26, 0x01	; 1
    3d50:	8c 93       	st	X, r24
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	32 96       	adiw	r30, 0x02	; 2
    3d56:	df 01       	movw	r26, r30
    3d58:	83 2f       	mov	r24, r19
    3d5a:	90 e2       	ldi	r25, 0x20	; 32
    3d5c:	02 c0       	rjmp	.+4      	; 0x3d62 <dtoa_prf+0xca>
    3d5e:	9d 93       	st	X+, r25
    3d60:	81 50       	subi	r24, 0x01	; 1
    3d62:	88 23       	and	r24, r24
    3d64:	e1 f7       	brne	.-8      	; 0x3d5e <dtoa_prf+0xc6>
    3d66:	e3 0f       	add	r30, r19
    3d68:	f1 1d       	adc	r31, r1
    3d6a:	40 c0       	rjmp	.+128    	; 0x3dec <dtoa_prf+0x154>
    3d6c:	e2 fe       	sbrs	r14, 2
    3d6e:	42 c0       	rjmp	.+132    	; 0x3df4 <dtoa_prf+0x15c>
    3d70:	aa 23       	and	r26, r26
    3d72:	11 f4       	brne	.+4      	; 0x3d78 <dtoa_prf+0xe0>
    3d74:	23 e0       	ldi	r18, 0x03	; 3
    3d76:	01 c0       	rjmp	.+2      	; 0x3d7a <dtoa_prf+0xe2>
    3d78:	24 e0       	ldi	r18, 0x04	; 4
    3d7a:	21 17       	cp	r18, r17
    3d7c:	10 f0       	brcs	.+4      	; 0x3d82 <dtoa_prf+0xea>
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	02 c0       	rjmp	.+4      	; 0x3d86 <dtoa_prf+0xee>
    3d82:	12 1b       	sub	r17, r18
    3d84:	21 2f       	mov	r18, r17
    3d86:	eb 2c       	mov	r14, r11
    3d88:	b4 fe       	sbrs	r11, 4
    3d8a:	02 c0       	rjmp	.+4      	; 0x3d90 <dtoa_prf+0xf8>
    3d8c:	92 2f       	mov	r25, r18
    3d8e:	0a c0       	rjmp	.+20     	; 0x3da4 <dtoa_prf+0x10c>
    3d90:	f6 01       	movw	r30, r12
    3d92:	92 2f       	mov	r25, r18
    3d94:	80 e2       	ldi	r24, 0x20	; 32
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <dtoa_prf+0x104>
    3d98:	81 93       	st	Z+, r24
    3d9a:	91 50       	subi	r25, 0x01	; 1
    3d9c:	99 23       	and	r25, r25
    3d9e:	e1 f7       	brne	.-8      	; 0x3d98 <dtoa_prf+0x100>
    3da0:	c2 0e       	add	r12, r18
    3da2:	d1 1c       	adc	r13, r1
    3da4:	aa 23       	and	r26, r26
    3da6:	19 f0       	breq	.+6      	; 0x3dae <dtoa_prf+0x116>
    3da8:	f6 01       	movw	r30, r12
    3daa:	a1 93       	st	Z+, r26
    3dac:	6f 01       	movw	r12, r30
    3dae:	f6 01       	movw	r30, r12
    3db0:	31 96       	adiw	r30, 0x01	; 1
    3db2:	e2 fe       	sbrs	r14, 2
    3db4:	08 c0       	rjmp	.+16     	; 0x3dc6 <dtoa_prf+0x12e>
    3db6:	89 e4       	ldi	r24, 0x49	; 73
    3db8:	d6 01       	movw	r26, r12
    3dba:	8c 93       	st	X, r24
    3dbc:	8e e4       	ldi	r24, 0x4E	; 78
    3dbe:	11 96       	adiw	r26, 0x01	; 1
    3dc0:	8c 93       	st	X, r24
    3dc2:	86 e4       	ldi	r24, 0x46	; 70
    3dc4:	07 c0       	rjmp	.+14     	; 0x3dd4 <dtoa_prf+0x13c>
    3dc6:	89 e6       	ldi	r24, 0x69	; 105
    3dc8:	d6 01       	movw	r26, r12
    3dca:	8c 93       	st	X, r24
    3dcc:	8e e6       	ldi	r24, 0x6E	; 110
    3dce:	11 96       	adiw	r26, 0x01	; 1
    3dd0:	8c 93       	st	X, r24
    3dd2:	86 e6       	ldi	r24, 0x66	; 102
    3dd4:	81 83       	std	Z+1, r24	; 0x01
    3dd6:	32 96       	adiw	r30, 0x02	; 2
    3dd8:	df 01       	movw	r26, r30
    3dda:	89 2f       	mov	r24, r25
    3ddc:	20 e2       	ldi	r18, 0x20	; 32
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <dtoa_prf+0x14c>
    3de0:	2d 93       	st	X+, r18
    3de2:	81 50       	subi	r24, 0x01	; 1
    3de4:	88 23       	and	r24, r24
    3de6:	e1 f7       	brne	.-8      	; 0x3de0 <dtoa_prf+0x148>
    3de8:	e9 0f       	add	r30, r25
    3dea:	f1 1d       	adc	r31, r1
    3dec:	10 82       	st	Z, r1
    3dee:	2e ef       	ldi	r18, 0xFE	; 254
    3df0:	3f ef       	ldi	r19, 0xFF	; 255
    3df2:	af c0       	rjmp	.+350    	; 0x3f52 <dtoa_prf+0x2ba>
    3df4:	16 16       	cp	r1, r22
    3df6:	17 06       	cpc	r1, r23
    3df8:	1c f0       	brlt	.+6      	; 0x3e00 <dtoa_prf+0x168>
    3dfa:	41 e0       	ldi	r20, 0x01	; 1
    3dfc:	50 e0       	ldi	r21, 0x00	; 0
    3dfe:	03 c0       	rjmp	.+6      	; 0x3e06 <dtoa_prf+0x16e>
    3e00:	ab 01       	movw	r20, r22
    3e02:	4f 5f       	subi	r20, 0xFF	; 255
    3e04:	5f 4f       	sbci	r21, 0xFF	; 255
    3e06:	aa 20       	and	r10, r10
    3e08:	19 f4       	brne	.+6      	; 0x3e10 <dtoa_prf+0x178>
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	03 c0       	rjmp	.+6      	; 0x3e16 <dtoa_prf+0x17e>
    3e10:	8a 2d       	mov	r24, r10
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	01 96       	adiw	r24, 0x01	; 1
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	aa 23       	and	r26, r26
    3e1c:	11 f0       	breq	.+4      	; 0x3e22 <dtoa_prf+0x18a>
    3e1e:	21 e0       	ldi	r18, 0x01	; 1
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	24 0f       	add	r18, r20
    3e24:	35 1f       	adc	r19, r21
    3e26:	28 0f       	add	r18, r24
    3e28:	39 1f       	adc	r19, r25
    3e2a:	81 2f       	mov	r24, r17
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	28 17       	cp	r18, r24
    3e30:	39 07       	cpc	r19, r25
    3e32:	14 f0       	brlt	.+4      	; 0x3e38 <dtoa_prf+0x1a0>
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	02 c0       	rjmp	.+4      	; 0x3e3c <dtoa_prf+0x1a4>
    3e38:	12 1b       	sub	r17, r18
    3e3a:	21 2f       	mov	r18, r17
    3e3c:	4b 2d       	mov	r20, r11
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	ca 01       	movw	r24, r20
    3e42:	80 71       	andi	r24, 0x10	; 16
    3e44:	90 70       	andi	r25, 0x00	; 0
    3e46:	b4 fc       	sbrc	r11, 4
    3e48:	0d c0       	rjmp	.+26     	; 0x3e64 <dtoa_prf+0x1cc>
    3e4a:	b3 fc       	sbrc	r11, 3
    3e4c:	0b c0       	rjmp	.+22     	; 0x3e64 <dtoa_prf+0x1cc>
    3e4e:	f6 01       	movw	r30, r12
    3e50:	32 2f       	mov	r19, r18
    3e52:	40 e2       	ldi	r20, 0x20	; 32
    3e54:	02 c0       	rjmp	.+4      	; 0x3e5a <dtoa_prf+0x1c2>
    3e56:	41 93       	st	Z+, r20
    3e58:	31 50       	subi	r19, 0x01	; 1
    3e5a:	33 23       	and	r19, r19
    3e5c:	e1 f7       	brne	.-8      	; 0x3e56 <dtoa_prf+0x1be>
    3e5e:	c2 0e       	add	r12, r18
    3e60:	d1 1c       	adc	r13, r1
    3e62:	01 c0       	rjmp	.+2      	; 0x3e66 <dtoa_prf+0x1ce>
    3e64:	32 2f       	mov	r19, r18
    3e66:	aa 23       	and	r26, r26
    3e68:	19 f0       	breq	.+6      	; 0x3e70 <dtoa_prf+0x1d8>
    3e6a:	f6 01       	movw	r30, r12
    3e6c:	a1 93       	st	Z+, r26
    3e6e:	6f 01       	movw	r12, r30
    3e70:	89 2b       	or	r24, r25
    3e72:	11 f0       	breq	.+4      	; 0x3e78 <dtoa_prf+0x1e0>
    3e74:	13 2f       	mov	r17, r19
    3e76:	0a c0       	rjmp	.+20     	; 0x3e8c <dtoa_prf+0x1f4>
    3e78:	f6 01       	movw	r30, r12
    3e7a:	13 2f       	mov	r17, r19
    3e7c:	80 e3       	ldi	r24, 0x30	; 48
    3e7e:	02 c0       	rjmp	.+4      	; 0x3e84 <dtoa_prf+0x1ec>
    3e80:	81 93       	st	Z+, r24
    3e82:	11 50       	subi	r17, 0x01	; 1
    3e84:	11 23       	and	r17, r17
    3e86:	e1 f7       	brne	.-8      	; 0x3e80 <dtoa_prf+0x1e8>
    3e88:	c3 0e       	add	r12, r19
    3e8a:	d1 1c       	adc	r13, r1
    3e8c:	09 2d       	mov	r16, r9
    3e8e:	06 0f       	add	r16, r22
    3e90:	ba 80       	ldd	r11, Y+2	; 0x02
    3e92:	90 e1       	ldi	r25, 0x10	; 16
    3e94:	89 2e       	mov	r8, r25
    3e96:	91 2c       	mov	r9, r1
    3e98:	8e 20       	and	r8, r14
    3e9a:	9f 20       	and	r9, r15
    3e9c:	e4 fe       	sbrs	r14, 4
    3e9e:	04 c0       	rjmp	.+8      	; 0x3ea8 <dtoa_prf+0x210>
    3ea0:	f1 e3       	ldi	r31, 0x31	; 49
    3ea2:	bf 16       	cp	r11, r31
    3ea4:	09 f4       	brne	.+2      	; 0x3ea8 <dtoa_prf+0x210>
    3ea6:	01 50       	subi	r16, 0x01	; 1
    3ea8:	10 16       	cp	r1, r16
    3eaa:	14 f0       	brlt	.+4      	; 0x3eb0 <dtoa_prf+0x218>
    3eac:	01 e0       	ldi	r16, 0x01	; 1
    3eae:	03 c0       	rjmp	.+6      	; 0x3eb6 <dtoa_prf+0x21e>
    3eb0:	09 30       	cpi	r16, 0x09	; 9
    3eb2:	08 f0       	brcs	.+2      	; 0x3eb6 <dtoa_prf+0x21e>
    3eb4:	08 e0       	ldi	r16, 0x08	; 8
    3eb6:	9b 01       	movw	r18, r22
    3eb8:	77 ff       	sbrs	r23, 7
    3eba:	02 c0       	rjmp	.+4      	; 0x3ec0 <dtoa_prf+0x228>
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	01 96       	adiw	r24, 0x01	; 1
    3ec4:	82 1b       	sub	r24, r18
    3ec6:	93 0b       	sbc	r25, r19
    3ec8:	fe 01       	movw	r30, r28
    3eca:	31 96       	adiw	r30, 0x01	; 1
    3ecc:	e8 0f       	add	r30, r24
    3ece:	f9 1f       	adc	r31, r25
    3ed0:	8e e2       	ldi	r24, 0x2E	; 46
    3ed2:	f8 2e       	mov	r15, r24
    3ed4:	3b 01       	movw	r6, r22
    3ed6:	60 1a       	sub	r6, r16
    3ed8:	71 08       	sbc	r7, r1
    3eda:	8a 2d       	mov	r24, r10
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	44 27       	eor	r20, r20
    3ee0:	55 27       	eor	r21, r21
    3ee2:	48 1b       	sub	r20, r24
    3ee4:	59 0b       	sbc	r21, r25
    3ee6:	8f ef       	ldi	r24, 0xFF	; 255
    3ee8:	2f 3f       	cpi	r18, 0xFF	; 255
    3eea:	38 07       	cpc	r19, r24
    3eec:	19 f4       	brne	.+6      	; 0x3ef4 <dtoa_prf+0x25c>
    3eee:	d6 01       	movw	r26, r12
    3ef0:	fd 92       	st	X+, r15
    3ef2:	6d 01       	movw	r12, r26
    3ef4:	62 17       	cp	r22, r18
    3ef6:	73 07       	cpc	r23, r19
    3ef8:	2c f0       	brlt	.+10     	; 0x3f04 <dtoa_prf+0x26c>
    3efa:	62 16       	cp	r6, r18
    3efc:	73 06       	cpc	r7, r19
    3efe:	14 f4       	brge	.+4      	; 0x3f04 <dtoa_prf+0x26c>
    3f00:	80 81       	ld	r24, Z
    3f02:	01 c0       	rjmp	.+2      	; 0x3f06 <dtoa_prf+0x26e>
    3f04:	80 e3       	ldi	r24, 0x30	; 48
    3f06:	21 50       	subi	r18, 0x01	; 1
    3f08:	30 40       	sbci	r19, 0x00	; 0
    3f0a:	31 96       	adiw	r30, 0x01	; 1
    3f0c:	24 17       	cp	r18, r20
    3f0e:	35 07       	cpc	r19, r21
    3f10:	24 f0       	brlt	.+8      	; 0x3f1a <dtoa_prf+0x282>
    3f12:	d6 01       	movw	r26, r12
    3f14:	8d 93       	st	X+, r24
    3f16:	6d 01       	movw	r12, r26
    3f18:	e6 cf       	rjmp	.-52     	; 0x3ee6 <dtoa_prf+0x24e>
    3f1a:	26 17       	cp	r18, r22
    3f1c:	37 07       	cpc	r19, r23
    3f1e:	49 f4       	brne	.+18     	; 0x3f32 <dtoa_prf+0x29a>
    3f20:	b5 e3       	ldi	r27, 0x35	; 53
    3f22:	bb 15       	cp	r27, r11
    3f24:	28 f0       	brcs	.+10     	; 0x3f30 <dtoa_prf+0x298>
    3f26:	bb 16       	cp	r11, r27
    3f28:	21 f4       	brne	.+8      	; 0x3f32 <dtoa_prf+0x29a>
    3f2a:	81 14       	cp	r8, r1
    3f2c:	91 04       	cpc	r9, r1
    3f2e:	09 f4       	brne	.+2      	; 0x3f32 <dtoa_prf+0x29a>
    3f30:	81 e3       	ldi	r24, 0x31	; 49
    3f32:	f6 01       	movw	r30, r12
    3f34:	81 93       	st	Z+, r24
    3f36:	d6 01       	movw	r26, r12
    3f38:	81 2f       	mov	r24, r17
    3f3a:	90 e2       	ldi	r25, 0x20	; 32
    3f3c:	02 c0       	rjmp	.+4      	; 0x3f42 <dtoa_prf+0x2aa>
    3f3e:	9c 93       	st	X, r25
    3f40:	81 50       	subi	r24, 0x01	; 1
    3f42:	11 96       	adiw	r26, 0x01	; 1
    3f44:	88 23       	and	r24, r24
    3f46:	d9 f7       	brne	.-10     	; 0x3f3e <dtoa_prf+0x2a6>
    3f48:	e1 0f       	add	r30, r17
    3f4a:	f1 1d       	adc	r31, r1
    3f4c:	10 82       	st	Z, r1
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	c9 01       	movw	r24, r18
    3f54:	29 96       	adiw	r28, 0x09	; 9
    3f56:	ee e0       	ldi	r30, 0x0E	; 14
    3f58:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__epilogue_restores__+0x8>

00003f5c <__ftoa_engine>:
    3f5c:	28 30       	cpi	r18, 0x08	; 8
    3f5e:	08 f0       	brcs	.+2      	; 0x3f62 <__ftoa_engine+0x6>
    3f60:	27 e0       	ldi	r18, 0x07	; 7
    3f62:	33 27       	eor	r19, r19
    3f64:	da 01       	movw	r26, r20
    3f66:	99 0f       	add	r25, r25
    3f68:	31 1d       	adc	r19, r1
    3f6a:	87 fd       	sbrc	r24, 7
    3f6c:	91 60       	ori	r25, 0x01	; 1
    3f6e:	00 96       	adiw	r24, 0x00	; 0
    3f70:	61 05       	cpc	r22, r1
    3f72:	71 05       	cpc	r23, r1
    3f74:	39 f4       	brne	.+14     	; 0x3f84 <__ftoa_engine+0x28>
    3f76:	32 60       	ori	r19, 0x02	; 2
    3f78:	2e 5f       	subi	r18, 0xFE	; 254
    3f7a:	3d 93       	st	X+, r19
    3f7c:	30 e3       	ldi	r19, 0x30	; 48
    3f7e:	2a 95       	dec	r18
    3f80:	e1 f7       	brne	.-8      	; 0x3f7a <__ftoa_engine+0x1e>
    3f82:	08 95       	ret
    3f84:	9f 3f       	cpi	r25, 0xFF	; 255
    3f86:	30 f0       	brcs	.+12     	; 0x3f94 <__ftoa_engine+0x38>
    3f88:	80 38       	cpi	r24, 0x80	; 128
    3f8a:	71 05       	cpc	r23, r1
    3f8c:	61 05       	cpc	r22, r1
    3f8e:	09 f0       	breq	.+2      	; 0x3f92 <__ftoa_engine+0x36>
    3f90:	3c 5f       	subi	r19, 0xFC	; 252
    3f92:	3c 5f       	subi	r19, 0xFC	; 252
    3f94:	3d 93       	st	X+, r19
    3f96:	91 30       	cpi	r25, 0x01	; 1
    3f98:	08 f0       	brcs	.+2      	; 0x3f9c <__ftoa_engine+0x40>
    3f9a:	80 68       	ori	r24, 0x80	; 128
    3f9c:	91 1d       	adc	r25, r1
    3f9e:	df 93       	push	r29
    3fa0:	cf 93       	push	r28
    3fa2:	1f 93       	push	r17
    3fa4:	0f 93       	push	r16
    3fa6:	ff 92       	push	r15
    3fa8:	ef 92       	push	r14
    3faa:	19 2f       	mov	r17, r25
    3fac:	98 7f       	andi	r25, 0xF8	; 248
    3fae:	96 95       	lsr	r25
    3fb0:	e9 2f       	mov	r30, r25
    3fb2:	96 95       	lsr	r25
    3fb4:	96 95       	lsr	r25
    3fb6:	e9 0f       	add	r30, r25
    3fb8:	ff 27       	eor	r31, r31
    3fba:	e2 55       	subi	r30, 0x52	; 82
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	99 27       	eor	r25, r25
    3fc0:	33 27       	eor	r19, r19
    3fc2:	ee 24       	eor	r14, r14
    3fc4:	ff 24       	eor	r15, r15
    3fc6:	a7 01       	movw	r20, r14
    3fc8:	e7 01       	movw	r28, r14
    3fca:	05 90       	lpm	r0, Z+
    3fcc:	08 94       	sec
    3fce:	07 94       	ror	r0
    3fd0:	28 f4       	brcc	.+10     	; 0x3fdc <__ftoa_engine+0x80>
    3fd2:	36 0f       	add	r19, r22
    3fd4:	e7 1e       	adc	r14, r23
    3fd6:	f8 1e       	adc	r15, r24
    3fd8:	49 1f       	adc	r20, r25
    3fda:	51 1d       	adc	r21, r1
    3fdc:	66 0f       	add	r22, r22
    3fde:	77 1f       	adc	r23, r23
    3fe0:	88 1f       	adc	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	06 94       	lsr	r0
    3fe6:	a1 f7       	brne	.-24     	; 0x3fd0 <__ftoa_engine+0x74>
    3fe8:	05 90       	lpm	r0, Z+
    3fea:	07 94       	ror	r0
    3fec:	28 f4       	brcc	.+10     	; 0x3ff8 <__ftoa_engine+0x9c>
    3fee:	e7 0e       	add	r14, r23
    3ff0:	f8 1e       	adc	r15, r24
    3ff2:	49 1f       	adc	r20, r25
    3ff4:	56 1f       	adc	r21, r22
    3ff6:	c1 1d       	adc	r28, r1
    3ff8:	77 0f       	add	r23, r23
    3ffa:	88 1f       	adc	r24, r24
    3ffc:	99 1f       	adc	r25, r25
    3ffe:	66 1f       	adc	r22, r22
    4000:	06 94       	lsr	r0
    4002:	a1 f7       	brne	.-24     	; 0x3fec <__ftoa_engine+0x90>
    4004:	05 90       	lpm	r0, Z+
    4006:	07 94       	ror	r0
    4008:	28 f4       	brcc	.+10     	; 0x4014 <__ftoa_engine+0xb8>
    400a:	f8 0e       	add	r15, r24
    400c:	49 1f       	adc	r20, r25
    400e:	56 1f       	adc	r21, r22
    4010:	c7 1f       	adc	r28, r23
    4012:	d1 1d       	adc	r29, r1
    4014:	88 0f       	add	r24, r24
    4016:	99 1f       	adc	r25, r25
    4018:	66 1f       	adc	r22, r22
    401a:	77 1f       	adc	r23, r23
    401c:	06 94       	lsr	r0
    401e:	a1 f7       	brne	.-24     	; 0x4008 <__ftoa_engine+0xac>
    4020:	05 90       	lpm	r0, Z+
    4022:	07 94       	ror	r0
    4024:	20 f4       	brcc	.+8      	; 0x402e <__ftoa_engine+0xd2>
    4026:	49 0f       	add	r20, r25
    4028:	56 1f       	adc	r21, r22
    402a:	c7 1f       	adc	r28, r23
    402c:	d8 1f       	adc	r29, r24
    402e:	99 0f       	add	r25, r25
    4030:	66 1f       	adc	r22, r22
    4032:	77 1f       	adc	r23, r23
    4034:	88 1f       	adc	r24, r24
    4036:	06 94       	lsr	r0
    4038:	a9 f7       	brne	.-22     	; 0x4024 <__ftoa_engine+0xc8>
    403a:	84 91       	lpm	r24, Z+
    403c:	10 95       	com	r17
    403e:	17 70       	andi	r17, 0x07	; 7
    4040:	41 f0       	breq	.+16     	; 0x4052 <__ftoa_engine+0xf6>
    4042:	d6 95       	lsr	r29
    4044:	c7 95       	ror	r28
    4046:	57 95       	ror	r21
    4048:	47 95       	ror	r20
    404a:	f7 94       	ror	r15
    404c:	e7 94       	ror	r14
    404e:	1a 95       	dec	r17
    4050:	c1 f7       	brne	.-16     	; 0x4042 <__ftoa_engine+0xe6>
    4052:	e4 e5       	ldi	r30, 0x54	; 84
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	68 94       	set
    4058:	15 90       	lpm	r1, Z+
    405a:	15 91       	lpm	r17, Z+
    405c:	35 91       	lpm	r19, Z+
    405e:	65 91       	lpm	r22, Z+
    4060:	95 91       	lpm	r25, Z+
    4062:	05 90       	lpm	r0, Z+
    4064:	7f e2       	ldi	r23, 0x2F	; 47
    4066:	73 95       	inc	r23
    4068:	e1 18       	sub	r14, r1
    406a:	f1 0a       	sbc	r15, r17
    406c:	43 0b       	sbc	r20, r19
    406e:	56 0b       	sbc	r21, r22
    4070:	c9 0b       	sbc	r28, r25
    4072:	d0 09       	sbc	r29, r0
    4074:	c0 f7       	brcc	.-16     	; 0x4066 <__ftoa_engine+0x10a>
    4076:	e1 0c       	add	r14, r1
    4078:	f1 1e       	adc	r15, r17
    407a:	43 1f       	adc	r20, r19
    407c:	56 1f       	adc	r21, r22
    407e:	c9 1f       	adc	r28, r25
    4080:	d0 1d       	adc	r29, r0
    4082:	7e f4       	brtc	.+30     	; 0x40a2 <__ftoa_engine+0x146>
    4084:	70 33       	cpi	r23, 0x30	; 48
    4086:	11 f4       	brne	.+4      	; 0x408c <__ftoa_engine+0x130>
    4088:	8a 95       	dec	r24
    408a:	e6 cf       	rjmp	.-52     	; 0x4058 <__ftoa_engine+0xfc>
    408c:	e8 94       	clt
    408e:	01 50       	subi	r16, 0x01	; 1
    4090:	30 f0       	brcs	.+12     	; 0x409e <__ftoa_engine+0x142>
    4092:	08 0f       	add	r16, r24
    4094:	0a f4       	brpl	.+2      	; 0x4098 <__ftoa_engine+0x13c>
    4096:	00 27       	eor	r16, r16
    4098:	02 17       	cp	r16, r18
    409a:	08 f4       	brcc	.+2      	; 0x409e <__ftoa_engine+0x142>
    409c:	20 2f       	mov	r18, r16
    409e:	23 95       	inc	r18
    40a0:	02 2f       	mov	r16, r18
    40a2:	7a 33       	cpi	r23, 0x3A	; 58
    40a4:	28 f0       	brcs	.+10     	; 0x40b0 <__ftoa_engine+0x154>
    40a6:	79 e3       	ldi	r23, 0x39	; 57
    40a8:	7d 93       	st	X+, r23
    40aa:	2a 95       	dec	r18
    40ac:	e9 f7       	brne	.-6      	; 0x40a8 <__ftoa_engine+0x14c>
    40ae:	10 c0       	rjmp	.+32     	; 0x40d0 <__ftoa_engine+0x174>
    40b0:	7d 93       	st	X+, r23
    40b2:	2a 95       	dec	r18
    40b4:	89 f6       	brne	.-94     	; 0x4058 <__ftoa_engine+0xfc>
    40b6:	06 94       	lsr	r0
    40b8:	97 95       	ror	r25
    40ba:	67 95       	ror	r22
    40bc:	37 95       	ror	r19
    40be:	17 95       	ror	r17
    40c0:	17 94       	ror	r1
    40c2:	e1 18       	sub	r14, r1
    40c4:	f1 0a       	sbc	r15, r17
    40c6:	43 0b       	sbc	r20, r19
    40c8:	56 0b       	sbc	r21, r22
    40ca:	c9 0b       	sbc	r28, r25
    40cc:	d0 09       	sbc	r29, r0
    40ce:	98 f0       	brcs	.+38     	; 0x40f6 <__ftoa_engine+0x19a>
    40d0:	23 95       	inc	r18
    40d2:	7e 91       	ld	r23, -X
    40d4:	73 95       	inc	r23
    40d6:	7a 33       	cpi	r23, 0x3A	; 58
    40d8:	08 f0       	brcs	.+2      	; 0x40dc <__ftoa_engine+0x180>
    40da:	70 e3       	ldi	r23, 0x30	; 48
    40dc:	7c 93       	st	X, r23
    40de:	20 13       	cpse	r18, r16
    40e0:	b8 f7       	brcc	.-18     	; 0x40d0 <__ftoa_engine+0x174>
    40e2:	7e 91       	ld	r23, -X
    40e4:	70 61       	ori	r23, 0x10	; 16
    40e6:	7d 93       	st	X+, r23
    40e8:	30 f0       	brcs	.+12     	; 0x40f6 <__ftoa_engine+0x19a>
    40ea:	83 95       	inc	r24
    40ec:	71 e3       	ldi	r23, 0x31	; 49
    40ee:	7d 93       	st	X+, r23
    40f0:	70 e3       	ldi	r23, 0x30	; 48
    40f2:	2a 95       	dec	r18
    40f4:	e1 f7       	brne	.-8      	; 0x40ee <__ftoa_engine+0x192>
    40f6:	11 24       	eor	r1, r1
    40f8:	ef 90       	pop	r14
    40fa:	ff 90       	pop	r15
    40fc:	0f 91       	pop	r16
    40fe:	1f 91       	pop	r17
    4100:	cf 91       	pop	r28
    4102:	df 91       	pop	r29
    4104:	99 27       	eor	r25, r25
    4106:	87 fd       	sbrc	r24, 7
    4108:	90 95       	com	r25
    410a:	08 95       	ret

0000410c <strrev>:
    410c:	dc 01       	movw	r26, r24
    410e:	fc 01       	movw	r30, r24
    4110:	67 2f       	mov	r22, r23
    4112:	71 91       	ld	r23, Z+
    4114:	77 23       	and	r23, r23
    4116:	e1 f7       	brne	.-8      	; 0x4110 <strrev+0x4>
    4118:	32 97       	sbiw	r30, 0x02	; 2
    411a:	04 c0       	rjmp	.+8      	; 0x4124 <strrev+0x18>
    411c:	7c 91       	ld	r23, X
    411e:	6d 93       	st	X+, r22
    4120:	70 83       	st	Z, r23
    4122:	62 91       	ld	r22, -Z
    4124:	ae 17       	cp	r26, r30
    4126:	bf 07       	cpc	r27, r31
    4128:	c8 f3       	brcs	.-14     	; 0x411c <strrev+0x10>
    412a:	08 95       	ret

0000412c <__udivmodhi4>:
    412c:	aa 1b       	sub	r26, r26
    412e:	bb 1b       	sub	r27, r27
    4130:	51 e1       	ldi	r21, 0x11	; 17
    4132:	07 c0       	rjmp	.+14     	; 0x4142 <__udivmodhi4_ep>

00004134 <__udivmodhi4_loop>:
    4134:	aa 1f       	adc	r26, r26
    4136:	bb 1f       	adc	r27, r27
    4138:	a6 17       	cp	r26, r22
    413a:	b7 07       	cpc	r27, r23
    413c:	10 f0       	brcs	.+4      	; 0x4142 <__udivmodhi4_ep>
    413e:	a6 1b       	sub	r26, r22
    4140:	b7 0b       	sbc	r27, r23

00004142 <__udivmodhi4_ep>:
    4142:	88 1f       	adc	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	5a 95       	dec	r21
    4148:	a9 f7       	brne	.-22     	; 0x4134 <__udivmodhi4_loop>
    414a:	80 95       	com	r24
    414c:	90 95       	com	r25
    414e:	bc 01       	movw	r22, r24
    4150:	cd 01       	movw	r24, r26
    4152:	08 95       	ret

00004154 <_exit>:
    4154:	f8 94       	cli

00004156 <__stop_program>:
    4156:	ff cf       	rjmp	.-2      	; 0x4156 <__stop_program>
